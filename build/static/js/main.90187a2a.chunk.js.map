{"version":3,"sources":["firebase.js","context/UserContext.js","PureFunctions.js","ColorContext.js","Components/RGB/ColorBall.js","Components/RGB/GameContainer.js","Components/Banner/ScoreTimer.js","Components/Banner/CryptoCoin.js","Components/Banner/Banner.js","Components/Footer/Bowl.js","Components/Footer/FooterButtons.js","Components/Footer/LeftConvertPanel.js","Components/Footer/RightConvertPanel.js","Components/Footer/ConvertContainer.js","Components/Footer/Footer.js","Components/Window/Window.js","Components/CustomWindow/CustomWindow.js","Components/Backdrop/Backdrop.js","Components/HighScoreDisplay/HighScoreDisplay.js","Components/Modals/MainModal.js","Components/SignupFormPage/SignUpFormPage.js","Components/Modals/LoginFormModal.js","Components/Modals/PlayerPageModal.js","Components/Modals/MyBioModal.js","Components/Modals/BattleInstructionModal.js","Components/Modals/ConvertInstructionModal.js","Components/Modals/ScoringModal.js","ModalContext/Modal.js","Controller.js","Components/Message/Message.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","UserContext","createContext","email","isAuthenticated","addStyleString","arr","newArray","i","length","push","background","randomColor","r","Math","floor","random","g","b","abs","randomPastelColor","generateTriadicArray","ranColor","compliment","findComplement","triOne","findTriadics","RGBtriOneColor","triTwo","RGBtriTwoColor","triCompOne","triCompTwo","generateAnalogousArray","findAnalogous","RGBanalogousOne","RGBanalogousTwo","analogousOne","analogousTwo","generatePastelArray","splitCompOne","splitCompTwo","color","splitColor","RGBtoHSL","split","hue","Number","satch","light","HSLtoRGB","rgbValue","triOneColor","triTwoColor","analogousOneColor","analogousTwoColor","red","green","blue","cmin","min","cmax","max","delta","h","s","l","round","toFixed","hslValue","substr","c","x","m","HEXtoRGB","hex","parseInt","RGBtoHEX","rgb","tempArray","toString","console","log","ColorContext","ColorBall","props","target","startConvert","id","useState","visibility","setVisibility","validTarget","setValidTarget","setColor","useEffect","delayRender","setTimeout","delay","clearTimeout","className","onClick","gameOn","correctGuess","removeCoin","checkGuess","style","GameContainer","values","useContext","colorArray","colorTargetId","idArray","delayArray","map","index","startBattle","toggleMainModal","colorTarget","ScoreTimer","falling","update","updateTimer","timer","seconds","setSeconds","isFalling","setIsFalling","interval","setInterval","clearInterval","CryptoCoin","rollout","coinArray","containerId","rolloutId","fallId","isRolling","setisRolling","Banner","currentPlayer","scoringModal","gameStart","name","Bowl","display","FooterButtons","toggleStartBattle","toggleStartConvert","clearRounds","toggleGameOn","toggleWindowDisplay","LeftConvertPanel","topValue","setTopValue","middleValue","setMiddleValue","bottomValue","setBottomValue","stringVal","fromTopInput","fromMiddleInput","fromBottomInput","fromRgbButton","toggleFromRgbButton","fromHslButton","toggleFromHslButton","fromHexButton","toggleFromHexButton","toRgbButton","toggleToRgbButton","toHslButton","toggleToHslButton","toHexButton","toggleToHexButton","fromTopLabel","type","value","placeholder","maxLength","onChange","e","onFocus","repeatRender","toggleRepeatRender","toggleTogglePosition","fromMiddleLabel","fromBottomLabel","playerSubmit","RightConvertPanel","disable","setDisable","triadicRepeating","setTriadicRepeating","analogousRepeating","setAnalogousRepeating","pastelRepeating","setPastelRepeating","postition","togglePosition","disableButtons","clearRepeat","disabled","toggleCreateTriadic","toggleCreateAnalogous","toggleCreatePastel","toTopLabel","toTopInput","toMiddleLabel","toMiddleInput","toBottomLabel","toBottomInput","ConvertContainer","rgbLabelArray","rgbInputArray","hslLabelArray","hslInputArray","hexLabelArray","hexInputArray","setTogglePosition","setFromRgbButton","setFromHslButton","setFromHexButton","setToRgbButton","setToHslButton","setToHexButton","setFromTopLabel","setFromMiddleLabel","setFromBottomLabel","setFromTopInput","setFromMiddleInput","setFromBottomInput","setToTopLabel","setToMiddleLabel","setToBottomLabel","setToTopInput","setToMiddleInput","setToBottomInput","checkInput","playerInput","result","validNumberInputs","validLetterInputs","includes","tempInput","renderedColor","displayedValue","join","state","displayArray","setCustomColor","Footer","score","coins","Window","windowVisibility","windowDisplayed","slicedArray","temp","sliced","slice","cheater","customVisibility","customDisplayed","customColor","BackDrop","CustomWindow","HighScoreDisplay","players","player","key","indexOf","MainModel","user","onLogin","togglePlayerPageModal","toggleLoginModal","toggleBattleInstructionModal","toggleConvertInstructionModal","toggleBioModal","SignupFormPage","onSignup","setFlashMessage","setEmail","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","validateEmail","test","String","toLowerCase","a","preventDefault","onSubmit","required","LoginForm","onDemoLogin","event","PlayerPageModal","onLogout","onEdit","deletePlayer","editMode","setEditMode","setName","MyBioModal","href","window","open","BattleInstructionModal","newGame","ConvertInstructionModal","alt","startGame","ScoringModal","updateScore","setScore","setCoins","total","setTotal","speed","setSpeed","accuracy","setAccuracy","topCountdown","setTopCountdown","bottomCountdown","setBottomCountdown","isAnimating","setIsAnimating","isRaising","setIsRaising","isFlashing","setIsFlashing","totalIsFlashing","setTotalIsFlashing","topIsFalling","setTopIsFalling","middleIsFalling","setMiddleIsFalling","isHidden","setIsHidden","futureTotal","timeout","raising","flashing","totalFlashing","topFalling","middleFalling","hidden","toggleScoringModal","ModalContext","React","ModalProvider","children","modalRef","useRef","setValue","current","Provider","ref","Modal","modalNode","ReactDOM","createPortal","Controller","battleArray","setState","createAnalogous","MainModal","loginModal","bioModal","playerPageModal","battleInstructionModal","convertInstructionModal","toggleCustomDisplay","createPastel","createTriadic","clearBoard","updateColorArrayContext","custom","createCustom","coinCount","clearArray","updateTimerContext","randomSix","targetId","generateGhostArray","playerColor","generateCustomArray","returnArr","generateEasyArray","firstSlice","this","Component","Message","saved","updated","deleted","mismatched","improperlyNamed","improperlyPassworded","improperlyEmailed","invalidCredentialed","signupFailed","logoutFailed","App","useStorageState","localStorage","setUser","setPlayers","setCurrentPlayer","message","setMessage","database","on","snapshot","val","newStatePlayers","sort","targetPlayer","find","auth","onAuthStateChanged","signInWithEmailAndPassword","then","response","catch","signOut","addNewPlayer","createUserWithEmailAndPassword","credential","confirm","remove","newScore","playerRef","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90187a2a.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDK87-LoZ6y1iPl7cIWMTQ2s1DAxPTt3PY\",\n    authDomain: \"color-crusher-fa181.firebaseapp.com\",\n    projectId: \"color-crusher-fa181\",\n    storageBucket: \"color-crusher-fa181.appspot.com\",\n    messagingSenderId: \"570070445008\",\n    appId: \"1:570070445008:web:33c91952390a18d8d227d5\",\n    measurementId: \"G-F6BNQCCWXX\"\n  };\n\n  firebase.initializeApp(firebaseConfig);\n//   firebase.analytics();\n\n  export default firebase;\n","import { createContext } from 'react';\n\nconst UserContext = createContext({\n    email: '',\n    isAuthenticated: false,\n})\n\nexport default UserContext;\n","//Add 3D effect\nfunction addStyleString (arr) {\n    const newArray = []\n\n    //iterate through the given array of colors and add the 3-D effect\n    for (let i = 0; i < arr.length; i++) {\n        newArray.push({ background: `radial-gradient(circle at 100px 100px, rgb(${arr[i]}), #000)` })\n    }\n    return newArray\n}\n\n//Color value array factories:\nexport function generateEasyArray() {\n    //Array of all possible 'easy ' colors (all values either 0 or 255)\n    let arr = [\n        \"0, 0, 0\",\n        \"0, 0, 255\",\n        \"255, 0, 255\",\n        \"255, 255, 255\",\n        \"0, 255, 255\",\n        \"255, 0, 0\",\n        \"0, 255, 0\",\n        \"255, 255, 0\"\n    ];\n\n    let returnArr = []\n    //fill returnArr array with random easy colors\n    while (returnArr.length !== 6) {\n        let randomNum = Math.floor(Math.random() *8);\n        let randomColor = arr[randomNum]\n        if(!returnArr.includes(randomColor)){\n            returnArr.push(randomColor)\n        }\n    }\n    //Add 3D effect\n    const newArray = addStyleString(returnArr)\n    return newArray\n}\n\nexport function generateGhostArray() {\n    const arr = [];\n\n    for (let i = 0; i < 6; i++) {\n        // let temp = randomColor();\n        // let sliced = temp.slice(0)\n        arr.push('255, 255, 255, 0.1');\n    }\n\n    const newArray = addStyleString(arr);\n    // const blurredArray = addBlurClass(newArray)\n    return newArray;\n    // return arr;\n}\n\nfunction randomColor() {\n    //pick a \"red\" from 0 to 255\n    const r = Math.floor(Math.random() * 256);\n    //pick a \"green\" from 0 to 255\n    const g = Math.floor(Math.random() * 256);\n    //pick a \"blue\" from 0 to 255\n    const b = Math.floor(Math.random() * 256);\n    // return RGBtoHSL(`(${r}, ${g}, ${b})`);\n\n    //make sure not too white or black\n    let difference = Math.abs(Math.abs(r - g) + Math.abs(r - b) + Math.abs(g - b))\n    if (difference < 80) {\n        return randomColor()\n    }\n\n    return `${r}, ${g}, ${b}`;\n}\n\n//find high numbers\nfunction randomPastelColor() {\n    //pick a \"red\" from 76 to 180\n    const r = Math.floor(Math.random() * 76) + 180;\n    //pick a \"green\" from 76 to 180\n    const g = Math.floor(Math.random() * 76) + 180;\n    //pick a \"blue\" from 76 to 180\n    const b = Math.floor(Math.random() * 76) + 180;\n\n    //make sure its not too white\n    if ((r+g+b) > 700 || (r+g+b) < 600  || ((Math.abs(r - g)) + (Math.abs(g - b))) < 40) {\n        return randomPastelColor()\n    }\n    // console.log(r, g, b)\n    return `${r}, ${g}, ${b}`;\n}\n\nexport function generateTriadicArray() {\n    const arr = []\n\n    //Pick Random RGB color\n    const ranColor = randomColor()\n    arr.push(ranColor);\n\n    //Find compliment\n    const compliment = findComplement(ranColor)\n\n    //find triadic compliments\n    const triOne = findTriadics(ranColor).RGBtriOneColor;\n    const triTwo = findTriadics(ranColor).RGBtriTwoColor;\n\n    //Find triadic compliments of compliment\n    const triCompOne  = findTriadics(compliment).RGBtriOneColor;\n    const triCompTwo  = findTriadics(compliment).RGBtriTwoColor;\n\n    arr.push(triCompOne, triTwo, compliment, triOne, triCompTwo)\n\n    // console.log(arr)\n    return addStyleString(arr)\n}\n\nexport function generateAnalogousArray() {\n    const arr = []\n    //Pick Random RGB color\n    const ranColor = randomColor()\n    arr.push(ranColor);\n    //Find compliment\n    const compliment = findComplement(ranColor)\n    //find analogous compliments\n    const triOne = findAnalogous(ranColor).RGBanalogousOne;\n    const triTwo = findAnalogous(ranColor).RGBanalogousTwo;\n    //Find analogous compliments of compliment\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo)\n\n    return addStyleString(arr)\n}\n\nexport function generatePastelArray() {\n    const arr = []\n    //Pick Random RGB color\n    const ranColor = randomPastelColor()\n    // console.log('TTTTTTT', ranColor)\n    arr.push(ranColor);\n    //Find compliment\n    const compliment = findComplement(ranColor)\n    //find split compliments\n    const splitCompOne = findAnalogous(ranColor).RGBanalogousOne;\n    const splitCompTwo = findAnalogous(ranColor).RGBanalogousTwo;\n    //Find analogous compliments\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, splitCompOne, compliment, splitCompTwo, analogousTwo)\n    return addStyleString(arr)\n}\n\nexport function generateCustomArray(playerColor) {\n    const arr = []\n    //Pick Random RGB color\n    arr.push(playerColor);\n    //Find compliment\n    const compliment = findComplement(playerColor)\n    //find analogous compliments\n    const triOne = findAnalogous(playerColor).RGBanalogousOne;\n    const triTwo = findAnalogous(playerColor).RGBanalogousTwo;\n    //Find analogous compliments of compliment\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo)\n\n    return addStyleString(arr)\n}\n\n//Find compliment colors:\n\nfunction findComplement (color) {\n    let convertedColor = (RGBtoHSL(color))\n\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n    let complimentHue = 0;\n\n    if (hue >= 180) {\n        complimentHue = hue - 180;\n    } else {\n        complimentHue = hue + 180;\n    }\n\n    let compHSL = (`${complimentHue},${satch},${light}`)\n    // console.log('complement', compHSL, HSLtoRGB(compHSL))\n    return HSLtoRGB(compHSL);\n}\n\nfunction findTriadics (rgbValue) {\n    let convertedColor = RGBtoHSL(rgbValue)\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n\n    let triOne = 0;\n    let triTwo = 0;\n    // console.log('triadics', rgbValue, convertedColor, hue, satch, light)\n    if (hue < 120) {\n        triOne = hue + 120;\n        triTwo = hue + 240;\n    } else if (hue >= 120 && hue < 240) {\n        triOne = hue + 120;\n        triTwo = hue - 120;\n    } else {\n        triOne = hue - 240;\n        triTwo = hue - 120;\n    }\n    let triOneColor = (`${triOne},${satch},${light}`)\n    let triTwoColor = (`${triTwo},${satch},${light}`)\n    // console.log('triadics', triOneColor)\n    let RGBtriOneColor = HSLtoRGB(triOneColor);\n    let RGBtriTwoColor = HSLtoRGB(triTwoColor);\n\n    return {RGBtriOneColor, RGBtriTwoColor}\n}\n\nfunction findAnalogous (rgbValue) {\n    let convertedColor = RGBtoHSL(rgbValue)\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n\n    let triOne = 0;\n    let triTwo = 0;\n\n    if (hue < 150) {\n        triOne = hue + 150;\n        triTwo = hue + 210;\n    } else if (hue >= 150 && hue < 210) {\n        triOne = hue + 150;\n        triTwo = hue - 150;\n    } else {\n        triOne = hue - 210;\n        triTwo = hue - 150;\n    }\n    let analogousOneColor = (`${triOne},${satch},${light}`)\n    let analogousTwoColor = (`${triTwo},${satch},${light}`)\n    let RGBanalogousOne = HSLtoRGB(analogousOneColor)\n    let RGBanalogousTwo = HSLtoRGB(analogousTwoColor)\n\n    return {RGBanalogousOne, RGBanalogousTwo}\n}\n\n\n//Color value conversions:\n\nexport function RGBtoHSL (rgbValue) {\n    //slice -n- dice\n    // let sliced = rgbValue.slice(1, rgbValue.length -1);\n    let split = rgbValue.split(',');\n    let red = Number(split[0]);\n    let green = Number(split[1]);\n    let blue = Number(split[2]);\n\n    //Make red, green, blue fractions of 1\n    red /= 255;\n    green /= 255;\n    blue /= 255;\n\n    //Find greatest and smallest channel values\n    let cmin = Math.min(red, green, blue);\n    let cmax = Math.max(red, green, blue);\n    let delta = cmax - cmin;\n\n    //calculate hue\n    //no difference\n    let h = 0;\n    let s = 0;\n    let l = 0;\n    if (delta === 0) {\n        h = 0;\n    }\n    //Red is max\n    else if (cmax === red) {\n        h = ((green - blue) / delta) % 6;\n    }\n    //Green is max\n    else if (cmax === green) {\n        h = (blue - red) / delta + 2;\n    }\n    //Blue is max\n    else {\n        h = (red - green) / delta + 4;\n    }\n    h = Math.round(h * 60);\n    //Make negative hues positive behind 360 degrees\n    if (h < 0) {\n        h += 360\n    }\n    //Calculate lightness\n    l = (cmax + cmin) / 2;\n    //Calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    // Multiply by 100\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    // console.log(`${h}, ${s}%, ${l}%`)\n    return(`${h}, ${s}%, ${l}%`)\n}\n\nexport function HSLtoRGB (hslValue) {\n    //expected input format: '222, 22%, 22%'\n    let split = hslValue.split(',');\n\n    //slice off '%' and convert to numbers\n    let h = Number(split[0]);\n    let s = Number(split[1].substr(0,split[1].length -1));\n    let l = Number(split[2].substr(0,split[2].length -1));\n\n    s /= 100;\n    l /= 100;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s;\n    let x = c * (1 - Math.abs((h / 60) % 2 - 1));\n    let m = l - c/2;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n\n    if (0 <= h && h < 60) {\n        r = c; g = x; b = 0;\n    } else if (60 <= h && h < 120) {\n        r = x; g = c; b = 0;\n    } else if (120 <= h && h < 180) {\n        r = 0; g = c; b = x;\n    } else if (180 <= h && h < 240) {\n        r = 0; g = x; b = c;\n    } else if (240 <= h && h < 300) {\n        r = x; g = 0; b = c;\n    } else if (300 <= h && h < 360) {\n        r = c; g = 0; b = x;\n    }\n\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    // console.log('WWWWWWWWW', hslValue, `${r}, ${g}, ${b}`)\n    // console.log(`${r}, ${g}, ${b}`)\n    //output format: '11, 22, 33's\n    return `${r}, ${g}, ${b}`;\n}\n\nexport function HEXtoRGB (hex) {\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n    if (hex.length === 4) {\n        r = parseInt(hex[1] + hex[1], 16);\n        g = parseInt(hex[2] + hex[2], 16);\n        b = parseInt(hex[3] + hex[3], 16);\n    } else if (hex.length === 7) {\n        r = parseInt(hex[1] + hex[2], 16)\n        g = parseInt(hex[3] + hex[4], 16);\n        b = parseInt(hex[5] + hex[6], 16);\n    }\n    return `${r}, ${g}, ${b}`\n}\n\nexport function RGBtoHEX (rgb) {\n    let tempArray = rgb.split(',')\n    let r = Number(tempArray[0])\n    let g = Number(tempArray[1])\n    let b = Number(tempArray[2])\n    r = r.toString(16)\n    g = g.toString(16)\n    b = b.toString(16)\n\n    if (r.length ===1)  {r = 0 + r}\n    if (g.length ===1)  {g = 0 + g}\n    if (b.length ===1)  {b = 0 + b}\n\n    // console.log('CCCCCCCC', `${r}, ${g}, ${b}`)\n    return `${r}, ${g}, ${b}`\n}\n\n\n//Console greeting\nconst style = \"font-size: 14px;\" +\n  \"background: #67b26f;\" +\n  \"background: -webkit-linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" +\n  \"background: linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" +\n  \"color: white;\" +\n  \"text-align: center;\" +\n  \"padding: 10px 15px;\" +\n  \"width: 100%;\" +\n  \"border-radius: 20px;\";\n\nconst text = \"%cLet's talk!🙂 sirscavo@gmail.com\";\n\nconsole.log(text, style);\n\n// export const zenObject = {\n//     0: \"Trust is good... control is better.\",\n//     1: \"I've never known a thing in my life.\",\n//     2: \"Nothing is something worth doing.\",\n//     3: \"Sleep is the best meditation.\",\n//     4: \"Everything has a crack in it, that's how the light gets in.\",\n//     5: \"These mountains that you carry, you were only meant to climb.\",\n//     6: \"Let go or be dragged.\",\n//     7: \"Transcend the bullshit.\",\n//     8: \"And when they played they really played. And when they worked they really worked.\",\n//     9: \"Relax. Nothing is under control.\",\n//     10: \"If you chase two rabbits, you catch none.\",\n//     11: \"Don't be afraid to just sit and watch.\",\n//     12: \"Become comfortable with not knowing.\",\n//     13: \"Life begins where fear ends.\",\n//     14: \"Don't curse the darkness, light a candle.\",\n//     15: \"This will never come again.\",\n//     16: \"Nothing is what you want.\",\n//     17: \"I have lived with several Zen masters - all of them cats.\",\n//     18: \"Matters of great concern should be treated lightly. Matters of small concerns should be treated seriously.\",\n//     19: \"Obstacles don't block the path, they are the path.\",\n//     20: \"If it is to be, it must be me.\",\n//     21: \"Don't enable the scumbags.\",\n//     22: \"The first draft of everything is crap.\",\n//     23: \"When action grows unprofitable, gather information. When information grows unprofitable, sleep.\"\n// }\n\n\n// export function generateHardColors() {\n//     const arr = [];\n\n//     for (let i = 0; i < 6; i++) {\n//         arr.push(randomColor());\n//     }\n//     console.log('generate hard colors', arr)\n\n//     const newArray = addStyleString(arr);\n//     return newArray;\n// }\n\n// function addBlurClass(arr) {\n//     const blurredArray = [];\n\n//     for (let i = 0; i < arr.length; i++) {\n//         let object = arr[i];\n//         object.class = 'blurred';\n//         blurredArray.push(object)\n//     }\n//     return blurredArray;\n// }\n\nexport function RGBtoHSLvalue (rgbValue) {\n    //     //slice -n- dice\n    //     let sliced = rgbValue.slice(1, rgbValue.length -1);\n    //     let split = sliced.split(',');\n    //     let red = Number(split[0]);\n    //     let green = Number(split[1]);\n    //     let blue = Number(split[2]);\n\n    //     //Make red, green, blue fractions of 1\n    //     red /= 255;\n    //     green /= 255;\n    //     blue /= 255;\n\n    //     //Find greatest and smallest channel values\n    //     let cmin = Math.min(red, green, blue);\n    //     let cmax = Math.max(red, green, blue);\n    //     let delta = cmax - cmin;\n\n    //     //calculate hue\n    //     //no difference\n    //     let h = 0;\n    //     let s = 0;\n    //     let l = 0;\n    //     if (delta === 0) {\n    //         h = 0;\n    //     }\n    //     //Red is max\n    //     else if (cmax === red) {\n    //         h = ((green - blue) / delta) % 6;\n    //     }\n    //     //Green is max\n    //     else if (cmax === green) {\n    //         h = (blue - red) / delta + 2;\n    //     }\n    //     //Blue is max\n    //     else {\n    //         h = (red - green) / delta + 4;\n    //     }\n    //     h = Math.round(h * 60);\n    //     //Make negative hues positive behind 360 degrees\n    //     if (h < 0) {\n    //         h += 360\n    //     }\n    //     //Calculate lightness\n    //     l = (cmax + cmin) / 2;\n    //     //Calculate saturation\n    //     s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    //     // Multiply by 100\n    //     s = +(s * 100).toFixed(1);\n    //     l = +(l * 100).toFixed(1);\n\n    //     return [`${h}`, `${s}`, `${l}`]\n}\n","import { createContext } from 'react';\n\nconst ColorContext = createContext();\n\nexport default ColorContext;\n","import React, { useState, useEffect } from 'react'\n\nimport './ColorBall.css'\n\nconst ColorBall = (props) => {\n    const target = props.target;\n    const startConvert = props.startConvert;\n    const id = props.id;\n\n    const [visibility, setVisibility] = useState(props.visibility);\n    const [validTarget, setValidTarget] = useState(true);\n    const [color, setColor] = useState(props.color);\n\n    const checkGuess = (id) => {\n        if (!props.gameOn) return;\n        if (startConvert) return;\n        if (target === id) {\n            setColor({})\n            props.correctGuess();\n            return;\n        } else {\n            setVisibility('hidden')\n            setValidTarget(false);\n            setColor({})\n        }\n        if (validTarget) {\n            props.removeCoin()\n        }\n    }\n\n    useEffect(() => {\n        let delayRender = setTimeout(() => {\n            setColor(props.color);\n            setVisibility(props.visibility)\n            setValidTarget(true)\n        }, props.delay)\n        return () => clearTimeout(delayRender)\n    }, [props.color, props.visibility, props.delay])\n\n    return (\n        <div\n            className={`colorBall ${visibility}`}\n            id={id}\n            onClick={() => checkGuess(props.id)}\n            style={color}\n        >\n        </div>\n    )\n}\n\n// class ColorBall extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             color: props.color,\n//             id: props.id,\n//             visibility: props.visibility,\n//             target: null,\n//             gameOn: false,\n//             validTarget: true,\n//             blurred: 'blurred',\n//             startConvert: props.startConvert,\n//             delay: props.delay,\n\n//             correctGuess: props.correctGuess,\n//             removeCoin: props.removeCoin\n//         }\n//     }\n\n//     componentDidUpdate(prevProps) {\n//         if (prevProps.color !== this.props.color) {\n//             this.timeout = setTimeout(() => {\n//                 this.setState({\n//                     id: this.props.id,\n//                     target: this.props.target,\n//                     visibility: this.props.visibility,\n//                     color: this.props.color,\n//                     validTarget: true,\n//                     startConvert: this.props.startConvert,\n//                 })\n//             }, this.state.delay)\n//         }\n//         if (prevProps.gameOn !== this.props.gameOn) {\n//             this.setState({\n//                 gameOn: this.props.gameOn\n//             })\n//         }\n//     }\n\n\n\n//     render() {\n//         return (\n//         <div\n//             className={`colorBall ${this.state.visibility} ${this.state.blurred}`}\n//             id={this.state.id}\n//             onClick={() => this.checkGuess(this.state.id)}\n//             style={this.state.color}\n//         >\n//         </div>\n//         )\n//     }\n// }\n\nexport default ColorBall;\n","import React, { useContext } from 'react';\n\nimport ColorContext from '../../ColorContext';\nimport ColorBall from './ColorBall';\n\nimport './GameContainer.css'\nimport '../Modals/ConvertInstructionModal.css'\n\nconst GameContainer = () => {\n    const values = useContext(ColorContext)\n    const arr = values.colorArray;\n    const target = values.colorTargetId;\n\n    //Arrays for ColorBall map\n    let idArray = ['colorOne', 'colorTwo', 'colorThree', 'colorFour', 'colorFive', 'colorSix'];\n    let delayArray =[0, 750, 600, 450, 300, 150];\n    let indexArray = [0, 1, 2, 3, 4, 5];\n\n    return (\n        <div className={`lipDiv`}>\n            <div className='plateDiv' >\n                {/* Set the balls */}\n                {indexArray.map(index => (\n                    <ColorBall\n                        key={idArray[index]}\n                        id={idArray[index]}\n                        color={arr[index]}\n                        delay={delayArray[index]}\n                        target={target}\n                        correctGuess={values.correctGuess}\n                        removeCoin={values.removeCoin}\n                        gameOn={values.gameOn}\n                        startConvert={values.startConvert}\n                        visibility='visible'\n                    />\n                ))}\n\n                <div className='targetColorDiv' >\n\n                    {/* Start button */}\n                    {/* {!values.gameOn &&\n                     values.round === 0 && */}\n                     {!values.startConvert &&\n                     !values.startBattle &&\n                        <button className='startButton' onClick={() => {\n                            values.toggleMainModal()\n                        }}>START</button>\n                    }\n\n                    {/* Color Wheel */}\n                    {values.startConvert &&\n                        <div className='plateWheel'></div>\n                    }\n\n                    {/* Target color */}\n                    {values.startBattle &&\n                     values.gameOn &&\n                        <div className='targetDiv'>\n                            <h2 className='colorText'>RGB</h2>\n                            <h2 className='colorNumber'>{values.colorTarget}</h2>\n                        </div>\n                    }\n\n                    {/* 'Correct' message */}\n                    {values.startBattle &&\n                     values.round > 0 &&\n                     !values.gameOn &&\n                        <div className='targetDiv'>\n                            <h2 className='colorNumber'>CORRECT</h2>\n                        </div>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default GameContainer;\n","import React, { useContext, useState, useEffect } from 'react';\n\nimport ColorContext from '../../ColorContext';\nimport './ScoreTimer.css'\nimport '../RGB/GameContainer.css'\n\nconst ScoreTimer = () => {\n    const values = useContext(ColorContext);\n    const update = values.updateTimer;\n    let falling = '';\n\n    const [seconds, setSeconds ] = useState(values.timer);\n    const [isFalling, setIsFalling] = useState(false)\n\n    useEffect(() => {\n        let interval = null;\n        if (values.gameOn && seconds > 0) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds -1);\n                return seconds\n            }, 1000);\n        }\n        if (!values.gameOn && seconds !== 15) {\n            update(seconds);\n            setSeconds(15);\n        }\n        return () => clearInterval(interval)\n    }, [values.gameOn, seconds, update])\n\n    useEffect(() => {\n        if (values.gameOn && isFalling) {\n            setTimeout(() => {\n                setIsFalling(false)\n            }, 2800)\n        }\n        if (!values.gameOn && values.round > 0) {\n            setIsFalling(true)\n        }\n    }, [isFalling, values.gameOn, values.round])\n\n    falling = isFalling ? 'scoreFall' : ''\n\n\n    return (\n        <div className={`scoreContainer ${falling}`}>\n            <div className='scoreTimerDiv scoreTimerFront'>\n                {!values.startBattle &&\n                    <h1 className='scoreTimer'>cc</h1>\n                }\n                {values.startBattle &&\n                    <h1 className='scoreTimer'>{seconds}</h1>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default ScoreTimer;\n","import React, { useContext, useState, useEffect } from 'react';\n\nimport ColorContext from '../../ColorContext';\nimport './CryptoCoin.css'\n\nconst CryptoCoin = (props) => {\n    const values = useContext(ColorContext);\n    const id = values.coinArray[props.index];\n    const rolloutIdArray = ['cryptoOneRoll', 'cryptoTwoRoll', 'cryptoThreeRoll'];\n    const fallIdArray = ['cryptoOneFall', 'cryptoTwoFall', 'cryptoThreeFall'];\n    const coinContainerArray = ['coinContainerOne', 'coinContainerTwo', 'coinContainerThree'];\n    const containerId = coinContainerArray[props.index]\n    const rolloutId = rolloutIdArray[props.index];\n    const fallId = fallIdArray[props.index];\n\n    let rollout = '';\n    let falling = '';\n\n    const [isRolling, setisRolling] = useState(false)\n    const [isFalling, setIsFalling] = useState(false)\n\n    useEffect(() => {\n        setisRolling(!id)\n        if (values.gameOn && isFalling) {\n            setTimeout(() => {\n                setIsFalling(false)\n            }, 2800)\n        }\n        if (!values.gameOn && values.round > 0) {\n            setIsFalling(id)\n        }\n    }, [id, values.gameOn, values.round, isFalling])\n\n\n    falling = isFalling ? fallId : '';\n    rollout = isRolling ? rolloutId : '';\n\n    return (\n        <div className={`coinContainer ${containerId} ${rollout} ${falling}`}>\n            <div className={`cryptoCoin ${props.className} cryptoCoinFront`}>cc</div>\n        </div>\n    )\n}\n\nexport default CryptoCoin;\n","import React, { useContext } from 'react';\n\nimport './Banner.css';\n\n// import UserName from './UserName'\nimport ColorContext from '../../ColorContext';\nimport UserContext from '../../context/UserContext';\n\nimport ScoreTimer from './ScoreTimer';\nimport CryptoCoin from './CryptoCoin';\n\nconst Banner = () => {\n    const values = useContext(ColorContext);\n    const { currentPlayer } = useContext(UserContext);\n    // console.log(user)\n\n    return (\n        <div className='bannerDiv'>\n            {!values.scoringModal &&\n                <ScoreTimer gameStart={values.gameOn}/>\n            }\n\n            {!values.gameOn && !values.startBattle &&\n                <h1 className='gameName'>Color Crusher</h1>\n            }\n            {values.startBattle &&\n                <h1 className='gameName'>Battle Mode</h1>\n            }\n            {values.startConvert &&\n                <h1 className='gameName'>Color Converter</h1>\n            }\n            {!values.scoringModal &&\n                <>\n                <CryptoCoin index={0} className='cryptoOne'/>\n                <CryptoCoin index={1} className='cryptoTwo'/>\n                <CryptoCoin index={2} className='cryptoThree'/>\n                </>\n            }\n            <h1 className='userName'>{`${currentPlayer.name}`}</h1>\n            {/* <UserName /> */}\n        </div>\n    )\n}\n\nexport default Banner;\n","import React, { useContext } from 'react'\n\nimport './Bowl.css'\nimport ColorContext from '../../ColorContext'\n\nconst Bowl = (props) => {\n    const values = useContext(ColorContext);\n\n    return (\n    <div className='bowlOutter'  id={props.id}>\n        <div className='upperHalf'>\n            <div className='innerGold'></div>\n        </div>\n        <div className='bowl'>\n\n            {values.startBattle &&\n                <h2 className='display'>{props.display}</h2>\n            }\n            {values.scoringModal &&\n                <h2 className='display'>{props.display}</h2>\n            }\n            {!values.startBattle && !values.scoringModal &&\n                <h2 className='display'>cc</h2>\n            }\n\n            <div className='lowerHalf'></div>\n        </div>\n    </div>\n    )\n}\n\nexport default Bowl;\n","import React, { useContext } from 'react'\n\nimport ColorContext from '../../ColorContext';\n\nimport './FooterButtons.css'\n\n\n\nconst FooterButtons = () => {\n    const values = useContext(ColorContext)\n\n    const checkBattle = () => {\n        if (values.startBattle) values.toggleStartBattle()\n    }\n    const checkConvert = () => {\n        if (values.startConvert) values.toggleStartConvert()\n    }\n\n    return (\n        <div className='footerButtonDiv'>\n            <button className='footerButton' onClick={() => {\n                checkBattle();\n                checkConvert();\n                values.clearRounds();\n                values.toggleGameOn();\n            }}>Home</button>\n            <button className='footerButton' onClick={() => {\n                values.toggleWindowDisplay();\n            }}>Show Values</button>\n        </div>\n    )\n}\n\nexport default FooterButtons\n","import React, { useState, useEffect } from 'react'\n\n// import './ConvertContainer.css';\nimport './LeftConvertPanel.css';\n\nconst LeftConvertPanel = (props) => {\n    const [topValue, setTopValue] = useState('');\n    const [middleValue, setMiddleValue] = useState('');\n    const [bottomValue, setBottomValue] = useState('');\n    const stringVal = [`${topValue}`, `${middleValue}`, `${bottomValue}`]\n\n    useEffect(() => {\n        setTopValue(props.fromTopInput)\n        setMiddleValue(props.fromMiddleInput)\n        setBottomValue(props.fromBottomInput)\n    }, [props])\n\n    return (\n        <div className='convertDiv' id='leftConvert'>\n            <div className={`convertButtonDiv leftButtonDiv`} >\n                <div className='upperButtonDiv'>\n\n                    <div className='convertTextDiv'>Convert From</div>\n                    <button className={`convertButton ${props.fromRgbButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleFromRgbButton}\n                        >RGB</button>\n                    <button className={`convertButton ${props.fromHslButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleFromHslButton}\n                        >HSL</button>\n                    <button className={`convertButton ${props.fromHexButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleFromHexButton}\n                        >HEX</button>\n\n                    <div className={`convertTextDiv`}>Convert To</div>\n                    <button className={`convertButton ${props.toRgbButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleToRgbButton}\n                        >RGB</button>\n                    <button className={`convertButton ${props.toHslButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleToHslButton}\n                        >HSL</button>\n                    <button className={`convertButton ${props.toHexButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleToHexButton}\n                        >HEX</button>\n                </div>\n            </div>\n            <div >\n                <div className='convertInputDiv'>\n                    <label className='convertLabel'>\n                        {props.fromTopLabel}\n                        <input\n                            className='convertInput'\n                            type='text'\n                            value={topValue}\n                            placeholder={props.fromTopInput}\n                            maxLength='3'\n                            onChange={(e) => setTopValue(e.target.value)}\n                            onFocus={() => {\n                                if (props.repeatRender) {\n                                    props.toggleRepeatRender()\n                                    props.toggleTogglePosition()\n                                }\n                                setTopValue('')\n                            }}\n                        />\n                    </label>\n                    <label className='convertLabel'>\n                        {props.fromMiddleLabel}\n                        <input\n                            className='convertInput'\n                            type='text'\n                            value={middleValue}\n                            placeholder={props.fromMiddleInput}\n                            maxLength='3'\n                            onChange={e => setMiddleValue(e.target.value)}\n                            onFocus={() => {\n                                if (props.repeatRender) {\n                                    props.toggleRepeatRender()\n                                    props.toggleTogglePosition()\n                                }\n                                setMiddleValue('')\n                            }}\n                        />\n                    </label>\n                    <label className='convertLabel'>\n                        {props.fromBottomLabel}\n                        <input\n                            className='convertInput'\n                            type='text'\n                            value={bottomValue}\n                            placeholder={props.fromBottomInput}\n                            maxLength='3'\n                            onChange={e => setBottomValue(e.target.value)}\n                            onFocus={() => {\n                                if (props.repeatRender) {\n                                    props.toggleRepeatRender()\n                                    props.toggleTogglePosition()\n                                }\n                                setBottomValue('')\n                            }}\n                        />\n                    </label>\n                    <button className='submitButton' onClick={() => {\n                        props.playerSubmit(stringVal)\n                    }}>Convert</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default LeftConvertPanel;\n","import React, { useState } from 'react'\n\n// import './ConvertContainer.css'\nimport './RightConvertPanel.css'\n\nconst RightConvertPanel = (props) => {\n    const [disable, setDisable] = useState(false);\n    const [triadicRepeating, setTriadicRepeating] = useState('')\n    const [analogousRepeating, setAnalogousRepeating] = useState('')\n    const [pastelRepeating, setPastelRepeating] = useState('')\n\n\n    const postition = props.togglePosition ? 'lowerPosition' : ''\n\n    const disableButtons = () => {\n        setDisable(true)\n        if (!props.togglePosition) {\n            setTimeout(() => {\n                setDisable(false)\n            }, 2200)\n        }\n    }\n\n    const clearRepeat = () => {\n        setTriadicRepeating('')\n        setAnalogousRepeating('')\n        setPastelRepeating('')\n    }\n\n    return (\n        <div className='convertDiv' id='rightConvert'>\n            <div className='rightButtonDiv' >\n                <div className='rightConvertTextDiv'>Create Random Colors</div>\n\n                <button className={`rightConvertButton ${triadicRepeating}`}\n                        disabled={disable}\n                        onClick={() => {\n                            disableButtons()\n                            props.toggleCreateTriadic()\n                            if (props.repeatRender) {\n                                clearRepeat()\n                                setTriadicRepeating('repeating')\n                            }\n                } }>Triadic</button>\n\n                <button className={`rightConvertButton ${analogousRepeating}`}\n                        disabled={disable}\n                        onClick={() => {\n                            disableButtons()\n                            props.toggleCreateAnalogous()\n                            if (props.repeatRender) {\n                                clearRepeat()\n                                setAnalogousRepeating('repeating')\n                            }\n                }}>Analogous</button>\n\n                <button className={`rightConvertButton ${pastelRepeating}`}\n                        disabled={disable}\n                        onClick={() => {\n                            disableButtons()\n                            props.toggleCreatePastel()\n                            if (props.repeatRender) {\n                                clearRepeat()\n                                setPastelRepeating('repeating')\n                            }\n\n                }}>Pastel</button>\n\n                <div className='repeatLabel'>Repeat</div>\n\n                <div className='repeatToggle' onClick={() => {\n                    props.toggleTogglePosition()\n                    if (props.togglePosition) {\n                        clearRepeat()\n                        setDisable(false)\n                    }\n                    props.toggleRepeatRender()\n                }}>\n                    <div className='toggleText'>On</div>\n                    <div className='toggleText'>Off</div>\n                    <div className={`innerToggle ${postition}`}></div>\n                </div>\n            </div>\n\n            <div className='rightConvertInputDiv'>\n                <div className='convertBling  firstBling'></div>\n                <div className='rightLabelDiv'>\n                    <h1 className='rightLabel'>{props.toTopLabel}</h1>\n                    <h1 className='rightInput'>{props.toTopInput}</h1>\n                </div>\n                <div className='convertBling  secondBling'></div>\n                <div className='rightLabelDiv'>\n                    <h1 className='rightLabel'>{props.toMiddleLabel}</h1>\n                    <h1 className='rightInput'>{props.toMiddleInput}</h1>\n                </div>\n                <div className='convertBling  thirdBling'></div>\n                <div className='rightLabelDiv'>\n                    <h1 className='rightLabel'>{props.toBottomLabel}</h1>\n                    <h1 className='rightInput'>{props.toBottomInput}</h1>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RightConvertPanel;\n","import React, { useState, useContext } from 'react'\n\nimport ColorContext from '../../ColorContext';\nimport { HSLtoRGB, RGBtoHEX, HEXtoRGB, RGBtoHSL } from '../../PureFunctions'\nimport LeftConvertPanel from './LeftConvertPanel';\nimport RightConvertPanel from './RightConvertPanel';\n\nimport './ConvertContainer.css'\n\nconst ConvertContainer = () => {\n    const values = useContext(ColorContext);\n\n    const rgbLabelArray = ['Red', 'Green', 'Blue'];\n    const rgbInputArray = ['From 0 to 255', 'From 0 to 255', 'From 0 to 255'];\n    const hslLabelArray = ['Hue', 'Saturation', 'Light'];\n    const hslInputArray = ['From 0 to 360', 'From 0 to 100', 'From 0 to 100'];\n    const hexLabelArray = ['Red', 'Green', 'Blue'];\n    const hexInputArray = ['From 00 to FF', 'From 00 to FF', 'From 00 to FF'];\n\n    const [togglePosition, setTogglePosition] = useState(false);\n\n    const [fromRgbButton, setFromRgbButton] = useState(true)\n    const [fromHslButton, setFromHslButton] = useState(false)\n    const [fromHexButton, setFromHexButton] = useState(false)\n\n    const [toRgbButton, setToRgbButton] = useState(false)\n    const [toHslButton, setToHslButton] = useState(true)\n    const [toHexButton, setToHexButton] = useState(false)\n\n    const [fromTopLabel, setFromTopLabel] = useState(rgbLabelArray[0])\n    const [fromMiddleLabel, setFromMiddleLabel] = useState(rgbLabelArray[1])\n    const [fromBottomLabel, setFromBottomLabel] = useState(rgbLabelArray[2])\n\n    const [fromTopInput, setFromTopInput] = useState(rgbInputArray[0])\n    const [fromMiddleInput, setFromMiddleInput] = useState(rgbInputArray[1])\n    const [fromBottomInput, setFromBottomInput] = useState(rgbInputArray[2])\n\n    const [toTopLabel, setToTopLabel] = useState(hslLabelArray[0])\n    const [toMiddleLabel, setToMiddleLabel] = useState(hslLabelArray[1])\n    const [toBottomLabel, setToBottomLabel] = useState(hslLabelArray[2])\n\n    const [toTopInput, setToTopInput] = useState(hslInputArray[0])\n    const [toMiddleInput, setToMiddleInput] = useState(hslInputArray[1])\n    const [toBottomInput, setToBottomInput] = useState(hslInputArray[2])\n\n    const toggleTogglePosition = () => {setTogglePosition(!togglePosition)}\n\n    const toggleFromRgbButton = () => {\n        if (toRgbButton) {\n            setToRgbButton(false)\n            setToHslButton(true)\n        }\n        if (fromRgbButton) return;\n        if (fromHslButton) setFromHslButton(false)\n        if (fromHexButton) setFromHexButton(false)\n\n        setFromRgbButton(true)\n        setFromTopLabel(rgbLabelArray[0])\n        setFromMiddleLabel(rgbLabelArray[1])\n        setFromBottomLabel(rgbLabelArray[2])\n        setFromTopInput(rgbInputArray[0])\n        setFromMiddleInput(rgbInputArray[1])\n        setFromBottomInput(rgbInputArray[2])\n    }\n\n    const toggleFromHslButton = () => {\n        if (toHslButton) {\n            setToHslButton(false)\n            setToRgbButton(true)\n        }\n        if (fromRgbButton) setFromRgbButton(false)\n        if (fromHexButton) setFromHexButton(false)\n\n        setFromHslButton(true)\n        setFromTopLabel(hslLabelArray[0])\n        setFromMiddleLabel(hslLabelArray[1])\n        setFromBottomLabel(hslLabelArray[2])\n        setFromTopInput(hslInputArray[0])\n        setFromMiddleInput(hslInputArray[1])\n        setFromBottomInput(hslInputArray[2])\n    }\n\n    const toggleFromHexButton = () => {\n        if (toHexButton) {\n            setToHexButton(false)\n            setToRgbButton(true)\n        }\n        if (fromHslButton) setFromHslButton(false)\n        if (fromRgbButton) setFromRgbButton(false)\n\n        setFromHexButton(true)\n        setFromTopLabel(hexLabelArray[0])\n        setFromMiddleLabel(hexLabelArray[1])\n        setFromBottomLabel(hexLabelArray[2])\n        setFromTopInput(hexInputArray[0])\n        setFromMiddleInput(hexInputArray[1])\n        setFromBottomInput(hexInputArray[2])\n    }\n\n    const toggleToRgbButton = () => {\n        if (fromRgbButton) return\n        if (toHexButton) setToHexButton(false)\n        if (toHslButton) setToHslButton(false)\n\n        setToRgbButton(true)\n        setToTopLabel(rgbLabelArray[0])\n        setToMiddleLabel(rgbLabelArray[1])\n        setToBottomLabel(rgbLabelArray[2])\n        setToTopInput(rgbInputArray[0])\n        setToMiddleInput(rgbInputArray[1])\n        setToBottomInput(rgbInputArray[2])\n    }\n\n    const toggleToHslButton = () => {\n        if (fromHslButton) return\n        if (toHexButton) setToHexButton(false)\n        if (toRgbButton) setToRgbButton(false)\n\n        setToHslButton(true)\n        setToTopLabel(hslLabelArray[0])\n        setToMiddleLabel(hslLabelArray[1])\n        setToBottomLabel(hslLabelArray[2])\n        setToTopInput(hslInputArray[0])\n        setToMiddleInput(hslInputArray[1])\n        setToBottomInput(hslInputArray[2])\n    }\n\n    const toggleToHexButton = () => {\n        if (fromHexButton) return\n        if (toRgbButton) setToRgbButton(false)\n        if (toHslButton) setToHslButton(false)\n\n        setToHexButton(true)\n        setToTopLabel(hexLabelArray[0])\n        setToMiddleLabel(hexLabelArray[1])\n        setToBottomLabel(hexLabelArray[2])\n        setToTopInput(hexInputArray[0])\n        setToMiddleInput(hexInputArray[1])\n        setToBottomInput(hexInputArray[2])\n    }\n\n    const playerSubmit = (playerInput) => {\n        //if they missed a field then exit function\n        for (let input of playerInput) {\n            if (input.includes('From')) return\n        }\n\n        //validate input\n        const tempInput = checkInput(playerInput)\n\n        //display any input errors while retaining good ones\n        setFromTopInput(`${tempInput[0]}`)\n        setFromMiddleInput(`${tempInput[1]}`)\n        setFromBottomInput(`${tempInput[2]}`)\n\n        let renderedColor = '';\n        let displayedValue = '';\n\n        //RGB to HSL\n        if ((fromRgbButton  && toHslButton)) {\n            renderedColor = tempInput.join(', ');\n            displayedValue = RGBtoHSL(renderedColor)\n\n        //HSL to RGB\n        } else if (fromHslButton && toRgbButton) {\n            let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`\n            renderedColor = HSLtoRGB(stringHSL);\n            displayedValue = renderedColor;\n\n        //Hex to RGB\n        } else if (fromHexButton && toRgbButton) {\n            renderedColor = HEXtoRGB(`#${tempInput.join('')}`);\n            displayedValue = renderedColor;\n\n        //RGB to HEX\n        } else if (fromRgbButton && toHexButton) {\n            renderedColor = tempInput.join(', ');\n            displayedValue = RGBtoHEX(tempInput.join(','))\n\n        //HSL to HEX\n        } else if (fromHslButton && toHexButton) {\n            let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`\n            renderedColor = HSLtoRGB(stringHSL)\n            displayedValue = RGBtoHEX(renderedColor)\n\n        //HEX to HSL\n        } else if (this.state.fromHexButton && this.state.toHslButton) {\n            renderedColor = HEXtoRGB(`#${tempInput.join('')}`);\n            displayedValue = RGBtoHSL(renderedColor);\n        }\n\n        //display converted values\n        let displayArray = displayedValue.split(',')\n        setToTopInput(`${displayArray[0]}`)\n        setToMiddleInput(`${displayArray[1]}`)\n        setToBottomInput(`${displayArray[2]}`)\n\n        //render player color with compliments\n        values.setCustomColor(renderedColor);\n    }\n\n    const checkInput = (playerInput) => {\n        const result = [];\n\n        //RGB input\n        if (fromRgbButton) {\n            for (let i = 0; i < 3; i++) {\n                if (!Number(playerInput[i]) && Number(playerInput[i]) !== 0) {\n                    result.push('From 0 to 255!')\n                } else if (playerInput[i] < 0 || playerInput[i] > 255) {\n                    result.push('From 0 to 255!')\n                } else {\n                    result.push(playerInput[i])\n                }\n            }\n        }\n\n        //HSL input\n        if (fromHslButton) {\n            if (playerInput[0] < 0 || playerInput[0] > 360 || !Number(playerInput[0])) {\n                result.push('From 0 to 360')\n            } else {\n                result.push(playerInput[0])\n            }\n            if (playerInput[1] < 0 || playerInput[1] > 100 || !Number(playerInput[1])) {\n                result.push('From 0 to 100')\n            } else {\n                result.push(playerInput[1])\n            }\n            if (playerInput[2] < 0 || playerInput[2] > 100 || !Number(playerInput[2])) {\n                result.push('From 0 to 100')\n            } else  {\n                result.push(playerInput[2])\n            }\n        }\n\n        //HEX input\n        if (fromHexButton) {\n            const validNumberInputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n            const validLetterInputs = ['A', 'B', 'C', 'D', 'E', 'F'];\n            for (let i = 0; i < 3; i++) {\n                if (playerInput[i].length !== 2) {\n                    result.push('From 00 to FF')\n                    continue;\n                }\n                if ((validNumberInputs.includes(Number(playerInput[i][0]))||\n                     validLetterInputs.includes(playerInput[i][0])) &&\n                    (validNumberInputs.includes(Number(playerInput[i][1])) ||\n                     validLetterInputs.includes(playerInput[i][1]))) {\n                    result.push(playerInput[i])\n                } else {\n                    result.push('From 00 to FF')\n                }\n            }\n        }\n        return result;\n    }\n\n    return (\n        <>\n            <LeftConvertPanel\n                fromRgbButton={fromRgbButton}\n                fromHslButton={fromHslButton}\n                fromHexButton={fromHexButton}\n                toRgbButton={toRgbButton}\n                toHslButton={toHslButton}\n                toHexButton={toHexButton}\n                repeatRender={values.repeatRender}\n                togglePosition={togglePosition}\n\n                fromTopLabel={fromTopLabel}\n                fromMiddleLabel={fromMiddleLabel}\n                fromBottomLabel={fromBottomLabel}\n                fromTopInput={fromTopInput}\n                fromMiddleInput={fromMiddleInput}\n                fromBottomInput={fromBottomInput}\n\n                toggleFromRgbButton={toggleFromRgbButton}\n                toggleFromHslButton={toggleFromHslButton}\n                toggleFromHexButton={toggleFromHexButton}\n                toggleToRgbButton={toggleToRgbButton}\n                toggleToHslButton={toggleToHslButton}\n                toggleToHexButton={toggleToHexButton}\n                toggleTogglePosition={toggleTogglePosition}\n                toggleRepeatRender={values.toggleRepeatRender}\n                playerSubmit={playerSubmit}\n            />\n            <RightConvertPanel\n                toTopLabel={toTopLabel}\n                toMiddleLabel={toMiddleLabel}\n                toBottomLabel={toBottomLabel}\n                toTopInput={toTopInput}\n                toMiddleInput={toMiddleInput}\n                toBottomInput={toBottomInput}\n                togglePosition={togglePosition}\n                repeatRender={values.repeatRender}\n\n                toggleCreateTriadic={values.toggleCreateTriadic}\n                toggleCreateAnalogous={values.toggleCreateAnalogous}\n                toggleCreatePastel={values.toggleCreatePastel}\n                toggleRepeatRender={values.toggleRepeatRender}\n                toggleTogglePosition={toggleTogglePosition}\n            />\n        </>\n    )\n}\n\nexport default ConvertContainer;\n","import React, { useContext } from 'react'\n\nimport ColorContext from '../../ColorContext';\nimport Bowl from './Bowl'\nimport FooterButtons from './FooterButtons'\nimport ConvertContainer from './ConvertContainer'\n\nimport './Footer.css'\n\nconst Footer = () => {\n    const values = useContext(ColorContext);\n\n    return (\n        <div className ='footerDiv'>\n            <FooterButtons />\n            {!values.startConvert && !values.scoringModal &&\n                <>\n                <Bowl id='scoreBowl' display={values.score}/>\n                <Bowl id='coinBowl' display={values.coins}/>\n                </>\n            }\n            {values.startConvert &&\n                <ConvertContainer />\n            }\n        </div>\n    )\n}\n\nexport default Footer;\n","import React, { useContext } from 'react'\n\nimport ColorContext from '../../ColorContext'\n\nimport './Window.css'\n\nconst Window = () => {\n    const values = useContext(ColorContext);\n\n    const windowDisplay = values.windowDisplayed;\n    let windowVisibility = false;\n    windowVisibility = windowDisplay ? 'windowVisible' : 'windowHidden';\n\n    const colorArray = values.colorArray;\n    const slicedArray = [];\n    const cheaterArray = ['windowOne', 'windowTwo', 'windowThree', 'windowFour', 'windowFive', 'windowSix']\n\n    if(colorArray[0]) {\n        for (let i = 0; i < 6; i++) {\n            let temp = colorArray[i].background\n            let sliced = temp.slice(43, temp.length -8)\n            slicedArray.push(sliced)\n        }\n    }\n\n    return (\n        <>\n            {values.startBattle &&\n                <div className={`windowDiv ${windowVisibility}`}>\n                    {cheaterArray.map(cheater => <div key={cheater.toString()} className={`window ${cheater}`} >\n                        <div >Only Cheating</div>\n                        <div >Yourself</div>\n                    </div>)}\n                </div>\n            }\n\n            {!values.startBattle &&\n                <div className={`windowDiv ${windowVisibility}`}>\n                    <div className='window windowOne'>\n                        <div>RGB</div>\n                        <div>{slicedArray[0]}</div>\n                    </div>\n                    <div className='window windowTwo'>\n                        <div>RGB</div>\n                        <div>{slicedArray[1]}</div>\n                    </div>\n                    <div className='window windowThree'>\n                        <div>RGB</div>\n                        <div>{slicedArray[2]}</div>\n                    </div>\n                    <div className='window windowFour'>\n                        <div>RGB</div>\n                        <div>{slicedArray[3]}</div>\n                    </div>\n                    <div className='window windowFive'>\n                        <div>RGB</div>\n                        <div>{slicedArray[4]}</div>\n                    </div>\n                    <div className='window windowSix'>\n                        <div>RGB</div>\n                        <div>{slicedArray[5]}</div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\n\nexport default Window;\n","import React, {useContext } from 'react'\n\nimport ColorContext from '../../ColorContext'\n\nimport '../Window/Window.css'\n\nconst Window = () => {\n    const values = useContext(ColorContext);\n\n    const customDisplay = values.customDisplayed;\n    let customVisibility = false;\n    customVisibility = customDisplay ? 'windowVisible' : 'windowHidden';\n\n    return (\n        <div className={`windowDiv ${customVisibility}`}>\n            <div className={`window windowOne  ${customVisibility}`}>\n                <div>RGB</div>\n                <div>{values.customColor}</div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Window;\n","import React, { useContext } from 'react';\n\nimport GameContainer from '../RGB/GameContainer'\nimport Banner from '../Banner/Banner'\nimport Footer from '../Footer/Footer'\nimport Window from '../Window/Window'\nimport CustomWindow from '../CustomWindow/CustomWindow'\nimport ColorContext from '../../ColorContext'\n\n\nimport './Backdrop.css'\n\nconst BackDrop = () => {\n    const values = useContext(ColorContext);\n\n    return (\n        <div className='backDrop'>\n            <Banner />\n            <div className='upperRoundDiv'>\n                <Window />\n                <CustomWindow />\n                <GameContainer />\n                <div className='innerDiv'></div>\n                <div className='sideDivRight'></div>\n                <div className='sideDiv'></div>\n                <Footer />\n                <div className='bottomBar'>\n                    {values.startBattle &&\n                        <h3 className='bottomBarText'>Score</h3>\n                    }\n                    {values.startBattle &&\n                        <h3 className='bottomBarText'>Coins</h3>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default BackDrop;\n","import React, { useContext }  from 'react';\n\nimport UserContext from '../../context/UserContext';\n\nimport './HighScoreDisplay.css'\n\nconst HighScoreDisplay = (props) => {\n  const { currentPlayer, players } = useContext(UserContext);\n\n    return (\n        <div id={props.id} className='highScoreDiv'>\n            <h1 className='highScoreText'>High Scores</h1>\n            <table className='highScoreTable'>\n                {players.map(player => (\n                    <tbody key={player.key.toString()}>\n                        <tr\n                            className={`tableRow ${player.key === currentPlayer.key ? 'highlight' : ''} `}\n                            // ref={player.key === currentPlayer.key ? {playerRef} : null}\n                        >\n                            <th className='rankColumn'>\n                                <div className='rankBling'>{players.indexOf(player)+1}</div>\n                            </th>\n                            <th className='userColumn'>{player.name}</th>\n                            <th className='scoreColumn'>{player.score}</th>\n                        </tr>\n\n                    </tbody>\n                ))}\n            </table>\n        </div>\n    )\n}\n\n\n\nexport default HighScoreDisplay;\n","import React, { useContext } from 'react';\n\nimport HighScoreDisplay from '../HighScoreDisplay/HighScoreDisplay'\nimport ColorContext from '../../ColorContext'\nimport UserContext from '../../context/UserContext'\n\nimport './LogInFormModal.css'\nimport './MainModel.css'\n\nfunction MainModel() {\n  const values = useContext(ColorContext);\n  const { currentPlayer, user, onLogin } = useContext(UserContext);\n\n  return (\n    <div className='instructionDiv'>\n        <div className='upperDiv'>\n            {user.isAuthenticated ? (\n              <>\n              <div className='greetingDiv'>\n                <h1 className='greetingText'><span className='biggerGreet'>\n                  {`Welcome ${currentPlayer.name}`}</span>\n                </h1>\n                <h1 className='arrow arrowLog'>➛</h1>\n              </div>\n              <div className='optionDiv'>\n                <button className='modalButton' onClick={() => {\n                  values.toggleMainModal();\n                  values.togglePlayerPageModal();\n                }}>Player Page</button>\n              </div>\n              </>\n            ) : (\n              <>\n              <div className='greetingDiv'>\n                <h1 className='greetingText'>\n                  <span className='biggerGreet'>Play as a guest  </span>\n                  or <span className='optionalText'>\n                  log in to record your score</span>\n                </h1>\n                <h1 className='arrow arrowLog'>➛</h1>\n              </div>\n              <div className='optionDiv'>\n                <button className='modalButton' onClick={() => {\n                  values.toggleMainModal();\n                  values.toggleLoginModal();\n                }}>Log In / Sign Up</button>\n              </div>\n              </>\n            )}\n\n          {/* Log In */}\n        </div>\n\n        <div className='lowerDiv'>\n\n            {/* BattleMode */}\n            <div className='modeDiv'>\n              <div className='buttonDiv'>\n                <h1 className='titleText'>BattleMode</h1>\n                <button  className='silverButton battle' onClick={() => {\n                  if (!currentPlayer.email) {\n                    console.log('gogogog')\n                    onLogin('guest@gmail.com', '121212')\n                  }\n                  values.toggleMainModal();\n                  values.toggleBattleInstructionModal();\n                  // values.toggleStartBattle();\n                  // values.startGame();\n                }}>Battle</button>\n              </div>\n              <div className='arrowText'>\n                <h1 className='arrow'>➛</h1>\n                <h1 className='modeText'>Try your RGB reading skills against the best in the world!</h1>\n              </div>\n            </div>\n\n            {/* Convert mode */}\n            <div className='modeDiv'>\n              <div className='buttonDiv'>\n                <h1 className='titleText'>ConvertMode</h1>\n                <button className='silverButton convert' onClick={() => {\n                  values.toggleMainModal();\n                  values.toggleConvertInstructionModal();\n                }}>Convert</button>\n              </div>\n              <div className='arrowText'>\n                <h1 className='arrow'>➛</h1>\n                <h1 className='modeText'>Convert your color values or find your next color scheme.</h1>\n              </div>\n            </div>\n\n            {/*Bio page*/}\n            <div className='modeDiv'>\n              <div className='buttonDiv'>\n                <h1 className='titleText'>MeetMode</h1>\n                <button className='bioPic' onClick={() => {\n                  values.toggleMainModal();\n                  values.toggleBioModal();\n                }}>Bio</button>\n              </div>\n              <div className='arrowText'>\n                <h1 className='arrow'>➛</h1>\n                <h1 className='modeText meetMeText'>Meet the developer!</h1>\n              </div>\n            </div>\n            <HighScoreDisplay />\n        </div>\n    </div>\n    )\n}\n\nexport default MainModel;\n","import React, { useState, useContext } from \"react\";\n\nimport UserContext from \"../../context/UserContext\";\n\nfunction SignupFormPage() {\n  const { onSignup, setFlashMessage } = useContext(UserContext)\n\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const validateEmail = (email) => {\n    const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return regex.test(String(email).toLowerCase());\n}\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (password !== confirmPassword) return setFlashMessage('mismatched');\n    if (password.length < 6 || password.length > 15) return setFlashMessage('improperlyPassworded');\n    if (username.length < 3 || username.length > 15) return setFlashMessage('improperlyNamed');\n    if (!validateEmail(email)) return setFlashMessage('improperlyEmailed')\n\n    onSignup(email, password, username, 0)\n  };\n\n  return (\n    <form className='form' onSubmit={handleSubmit}>\n      <h1 className='logSignTitle'>Sign Up</h1>\n\n      <label className='signUpLabel'>\n        <input\n          placeholder='Email'\n          type=\"text\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value.toLowerCase())}\n          required\n        />\n      </label>\n\n      <label className='signUpLabel'>\n        <input\n          placeholder='Player Name'\n          type=\"text\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n          required\n        />\n      </label>\n\n      <label className='signUpLabel'>\n        <input\n          placeholder='Password'\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n      </label>\n\n      <label className='signUpLabel'>\n        <input\n          placeholder='Confirm Password'\n          type=\"password\"\n          value={confirmPassword}\n          onChange={(e) => setConfirmPassword(e.target.value)}\n          required\n        />\n      </label>\n\n      <button\n        id='signUpButton'\n        className='silverButton'\n        type=\"submit\"\n      >SignUp</button>\n\n    </form>\n  );\n}\n\nexport default SignupFormPage;\n","import React, { useContext, useState, useEffect } from \"react\";\n\nimport SignUpForm from '../SignupFormPage/SignUpFormPage'\nimport ColorContext from '../../ColorContext';\nimport UserContext from \"../../context/UserContext\";\n\nimport './LogInFormModal.css'\n\nfunction LoginForm() {\n  const { togglePlayerPageModal,\n          toggleMainModal,\n          toggleLoginModal} = useContext(ColorContext);\n  const { onLogin, onDemoLogin, user } = useContext(UserContext)\n\n  const [email, setEmail] = useState('Email');\n  const [password, setPassword] = useState('Password');\n\n  const handleLogin = (event) => {\n    event.preventDefault();\n    onLogin(email, password);\n  }\n\n  useEffect(() => {\n    if (user.isAuthenticated) {\n      toggleLoginModal()\n      togglePlayerPageModal()\n    }\n\n  }, [user])\n\n  return (\n    <>\n    <div className='fullDiv'>\n      <div className='logInFormDiv'>\n        <h1 className='logSignTitle logTitle'>LogIn</h1>\n        <form className='loginForm' onSubmit={handleLogin}>\n\n            <input\n              className='logInput'\n              placeholder={email}\n              type=\"email\"\n              onChange={(event) => setEmail(event.target.value)}\n            />\n\n            <input\n              className='logInput'\n              placeholder={password}\n              type=\"password\"\n              onChange={(event) => setPassword(event.target.value)}\n            />\n\n            <button\n              className='silverButton logSignButton'\n              type=\"submit\"\n              disabled={!email && !password}\n            >LogIn</button>\n\n            <div className='demoButtonDiv'>\n              <button\n                id='demoButton'\n                className='silverButton logSignButton'\n                onClick={() => {\n                  setEmail('demo@gmail.com')\n                  setPassword('121212')\n                  setTimeout(() => {\n                    onDemoLogin()\n                  }, 1200)\n                }}\n              >Demo</button>\n\n              <div className='demoTextDiv'>\n                <h1 id='demoArrow' className='arrow'>➛</h1>\n                <h1 className='demoText'>Log in with demo credentials</h1>\n              </div>\n\n\n            </div>\n\n            <button  className='backButton' onClick={() => {\n              toggleLoginModal();\n              toggleMainModal();\n            }}>Home</button>\n        </form>\n      </div>\n\n      <div className='signUpFormDiv'>\n        <SignUpForm />\n      </div>\n    </div>\n    </>\n  )\n}\n\nexport default LoginForm;\n","import React, { useContext, useState, useEffect } from 'react';\n\nimport ColorContext from '../../ColorContext';\nimport UserContext from '../../context/UserContext';\n\nimport HighScoreDisplay from '../HighScoreDisplay/HighScoreDisplay';\n\nimport './PlayerPageModal.css';\n\nconst PlayerPageModal = () => {\n    const values = useContext(ColorContext);\n    const { onLogout, onEdit, user, deletePlayer, currentPlayer } = useContext(UserContext);\n\n    const [editMode, setEditMode] =useState(false);\n    const [email, setEmail] = useState(currentPlayer.email);\n    const [name, setName] = useState(currentPlayer.name);\n\n    const handleEdit = () => onEdit(currentPlayer.key, email, name, user.score)\n    const handleDelete = () => deletePlayer(currentPlayer.key);\n\n    useEffect(() => {}, [user])\n\n    return (\n        <div className='playerDiv'>\n            {editMode &&\n                <div className='leftSideDiv'>\n                    <div className='logInFormDiv' id='editForm'>\n                        <h1 className='logSignTitle editTitle'>Edit Info</h1>\n                        <form  className='loginForm' onSubmit={handleEdit}>\n\n                            <input\n                            className='logInput'\n                            placeholder={currentPlayer.email}\n                            type=\"email\"\n                            onChange={(event) => setEmail(event.target.value)}\n                            />\n\n                            <input\n                            className='logInput'\n                            placeholder={currentPlayer.name}\n                            type=\"text\"\n                            onChange={(event) => setName(event.target.value)}\n                            />\n\n                            <button\n                            className='silverButton logSignButton'\n                            type=\"submit\"\n                            disabled={!email && !user.password}\n                            >Edit</button>\n\n                        </form>\n                    </div>\n                    <button  id='editHomeButton' className='backButton' onClick={() => {\n                        values.toggleLoginModal();\n                        values.toggleMainModal();\n                    }}>Home</button>\n                    <button\n                        id='cancelButton'\n                        className='upperPlayerButton'\n                        onClick={() => setEditMode(false)}\n                    >Cancel</button>\n                </div>}\n\n                {!editMode &&\n                    <div className='leftSideDiv'>\n                        <div className='playerButtonDiv'>\n                            {currentPlayer.email &&\n                                <>\n                                <button\n                                    id='editButton'\n                                    className='upperPlayerButton'\n                                    onClick={() => setEditMode(true)}\n                                >Edit</button>\n\n                                <button\n                                    id='deleteButton'\n                                    className='upperPlayerButton'\n                                    onClick={() => handleDelete(user)}\n                                >Delete</button>\n\n                                <button\n                                    id='logoutButton'\n                                    className='upperPlayerButton'\n                                    onClick={(event) => {\n                                        event.preventDefault();\n                                        onLogout();\n                                        values.toggleMainModal();\n                                        values.togglePlayerPageModal();\n                                    }}\n                                >Logout</button>\n                                </>\n                            }\n\n                            {!currentPlayer.email &&\n                                <button\n                                    className='upperPlayerButton'\n                                    onClick={() => {\n                                        values.toggleLoginModal()\n                                        values.togglePlayerPageModal();\n                                    }}\n                                >Login</button>\n                            }\n\n                        </div>\n\n                        <div className='playerDisplayDiv'>\n                            <h1 className='nameText'>{currentPlayer.name}</h1>\n                            <div className='fancyDisplayDiv skoreText'>\n                                <h1 className='yourDisplayText'>High Score</h1>\n                                <div className='silverButton playerButton'>{currentPlayer.score}</div>\n                            </div>\n                        </div>\n\n                        <button id='playerHomeButton' className='upperPlayerButton' onClick={() => {\n                                values.togglePlayerPageModal();\n                                values.toggleMainModal();\n                        }}>Home</button>\n                    </div>}\n\n            <div className='rightSideDiv'>\n                <HighScoreDisplay id='playerHiScore'/>\n            </div>\n        </div>\n    )\n}\n\nexport default PlayerPageModal;\n","import React, { useContext } from 'react'\n// import { Link } from 'react-router-dom'\n\nimport ColorContext from '../../ColorContext'\n\nimport './MyBioModal.css'\n\nconst MyBioModal = () => {\n    const values = useContext(ColorContext)\n\n    const myEmail = 'sirscavo@gmail.com'\n\n    return (\n        <div className='fullBioDiv'>\n            <div className='bioDiv'>\n                <div className='myPic'></div>\n\n                <div className='bioTextDiv'>\n                    <div className='bioFancyDiv upperFancy'></div>\n                    <div className='bioText upperBioText'>\n                        Robin Scavo is a web developer with a\n                        heavy inclination for UX/UI. He lives in Missoula,\n                        Montana and is currently accepting job offers.\n                    </div>\n                    <div className='bioFancyDiv upperFancy'></div>\n                </div>\n\n                <div className='bioTextDiv lowerBioDiv'>\n                    <div className='bioFancyDiv'></div>\n                    <div className='bioText'>\n                        When not building apps like<br/><span className='krazyFont'>\n                        Color Crusher</span> Robin can usually be found traveling.<br/><br/>\n                        {/* <Link className='emailLink' href={`mailto:${myEmail}`}>Email Robin Scavo</Link> */}\n                        <a className='emailLink' href={`mailto:${myEmail}`}>Email Robin Scavo</a>\n                    </div>\n                    <div className='bioFancyDiv'></div>\n                </div>\n            </div>\n\n            <div className='contactProjectDiv'>\n                <div className='contactText topText'></div>\n\n                <button className='bioBackButton' onClick={() => {\n                    values.toggleBioModal();\n                    values.toggleMainModal();\n                }}>Home</button>\n\n                <div className='contactDiv'>\n                    <div className='linkedIn' onClick={() => window.open('https://www.linkedin.com/in/robin-scavo-0617881b5/')}></div>\n                    <div className='websiteLink'>Robin's Website Link</div>\n                    <div className='gitHub' onClick={() => window.open('https://github.com/RobinScavo')}></div>\n                </div>\n                <h1 className='contactText'>Robin's Other Projects</h1>\n\n                <div className='projectDiv'>\n                    <div className='sfsgDiv' onClick={() => window.open('https://so-fresh-so-green.herokuapp.com/')}>\n                        <div className='sfsgLink'></div>\n                        <div className='projectText'><span className='sfsgTextLink'>So Fresh So Green</span> <br/>is an\n                        online community of farmers and gardeners. Create your own\n                        post or comment and upvote.<br/>\n                        <span className='sfsgSpan'> CONTRIBUTERS: </span><br/>\n                        Danny Pong, Maximos Salzman and Kyle Barthelmes.</div>\n                    </div>\n\n                    <div className='openBookDiv' onClick={() => window.open('https://openbook-app.herokuapp.com/')}>\n                        <div className='openBookLink'></div>\n                        <div className='projectText'><span className='openBookTextLink'>Open Book </span><br/>is an open source\n                        project allowing teachers FREE access to remote learning\n                        resources. Build classes, create lessons and share those lessons online.\n                        <span className='openBookSpan'> CONTRIBUTERS: </span><br/>\n                         Phil Ling, Brandon Perry and Jacob Grooms.</div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default MyBioModal;\n","import React, { useContext } from 'react'\n\nimport ColorContext from '../../ColorContext'\n\nimport './BattleInstructionModal.css'\n\nconst BattleInstructionModal = () => {\n    const values = useContext(ColorContext);\n\n    return (\n        <div className='battleInstructionDiv'>\n            <div className='definitionDiv'><span className='defSpan'>\n                RGB (red, green, and blue)</span><br/>\n                A system for representing the colors\n                to be used on a computer display. Red, green, and\n                blue can be combined in various proportions to\n                obtain any color in the visible spectrum.\n                Each level is represented by the range of decimal\n                numbers from 0 to 255\n            </div>\n            <div className='exampleDiv'>\n                <div className='exampleBall blackExample'></div>\n                <div className='example leftExample'>RGB (0, 0, 0)</div>\n                <div className='example'>RGB (255, 255, 255)</div>\n                <div className='exampleBall whiteExample'></div>\n            </div>\n            <div className='exampleDiv'>\n                <div className='exampleBall greenExample'></div>\n                <div className='example leftExample'>RGB (0, 255, 0)</div>\n                <div className='example'>RGB (255, 0, 255)</div>\n                <div className='exampleBall yellowExample'></div>\n            </div>\n            <div className='summaryDiv'>Test your ability to decipher RGB values\n                of increasing complexity.<br/> Earn points for speed and accuracy!</div>\n            <button  className='gotItButton' onClick={() => {\n                values.toggleBattleInstructionModal();\n                values.newGame();\n                // values.toggleStartBattle();\n                // values.startGame();\n            }}>Got it!</button>\n        </div>\n    )\n}\n\nexport default BattleInstructionModal\n","import React, { useContext } from 'react';\n\nimport ColorContext from '../../ColorContext';\n\nimport './BattleInstructionModal.css';\nimport './ConvertInstructionModal.css';\n\n\nconst ConvertInstructionModal = () => {\n    const values = useContext(ColorContext);\n\n    return (\n        <div className='convertInstructionDiv'>\n\n            <div className='explanationDiv'><span className='defSpan'>HSL (Hue, Saturation, Light)</span><br/>\n                While RGB and Hex values use proportions\n                of red, green and blue, HSL is based on color wheel position which is\n                useful for finding color complements. Use the\n                <span className='expSpan'> Color Converter </span>\n                to convert your color values or find their compliments.\n            </div>\n\n            <div className='wheelDiv'>\n                <div className='wheel'>\n                    <h2 className='wheelLabel'>COMPLIMENT</h2>\n                    <div className='wheelImage' alt='color wheel'></div>\n                    <div className='wheelOverlayOne' alt='first overlay'></div>\n                    <h3 className='imageCredit'\n                        onClick={() => window.open('https://contentwriters.com/blog/psychology-color-content-marketing/')}>\n                            Image credit: Deborah K.\n                    </h3>\n                </div>\n                <div className='wheel'>\n                    <div className='wheelImage'></div>\n                    <div className='wheelOverlayTwo'></div>\n                    <h2 className='wheelLabel triadicLabel'>TRIADIC</h2>\n                </div>\n                <div className='wheel'>\n                    <h2 className='wheelLabel'>ANALOGOUS</h2>\n                    <div className='wheelImage'></div>\n                    <div className='wheelOverlayThree'></div>\n                    <h2 className='wheelLabel'>SPLIT COMPLIMENT</h2>\n                </div>\n            </div>\n\n            <button  className='gotItButton' onClick={() => {\n                values.toggleConvertInstructionModal();\n                values.toggleStartConvert();\n                values.startGame();\n              }}>Got it!</button>\n        </div>\n    )\n}\n\nexport default ConvertInstructionModal\n","import React, { useContext, useState, useEffect, useRef } from 'react'\n\nimport ColorContext from '../../ColorContext'\nimport UserContext from '../../context/UserContext'\n\nimport Bowl from '../Footer/Bowl';\nimport HighScoreDisplay from '../HighScoreDisplay/HighScoreDisplay';\n\nimport './ScoringModal.css'\nimport '../HighScoreDisplay/HighScoreDisplay.css'\n\nconst ScoringModal = () => {\n    const values = useContext(ColorContext)\n    const { updateScore } = useContext(UserContext)\n\n    const [score, setScore] = useState(values.score)\n    const [coins, setCoins] = useState(values.coins)\n    const [total, setTotal] = useState(0)\n    const [speed, setSpeed] = useState(0)\n    const [accuracy, setAccuracy] = useState(0)\n    const [topCountdown, setTopCountdown] = useState(false)\n    const [bottomCountdown, setBottomCountdown] = useState(false)\n\n    const [isAnimating, setIsAnimating] = useState(false)\n    const [isRaising, setIsRaising] = useState(false)\n    const [isFlashing, setIsFlashing] = useState(false)\n    const [totalIsFlashing, setTotalIsFlashing] = useState(false)\n    const [topIsFalling, setTopIsFalling] = useState(false)\n    const [middleIsFalling, setMiddleIsFalling] = useState(false)\n    const [isHidden, setIsHidden] = useState(false)\n\n    const futureTotal = values.score + values.coins\n    // const playerRef = useRef()\n\n    useEffect(() => {\n        let timeout = setTimeout(() => {\n            setTopCountdown(true)\n        }, 1000)\n        return () => {\n            clearTimeout(timeout)\n        }\n    })\n\n    // const handleScroll = () => {\n    //     playerRef.current.scrollIntoView({ behavior: 'smooth'})\n    // }\n\n    //Speed countdown/countup\n    useEffect(() => {\n        let interval = null;\n        if (score <= 0) setTopCountdown(false)\n        if (score <= 0 && coins > 0) setBottomCountdown(true)\n        if (topCountdown) {\n            interval = setInterval(() => {\n                setScore(score => score -1);\n                setSpeed(speed => speed +1)\n                return score\n            }, 20);\n        }\n        return () => clearInterval(interval)\n    }, [topCountdown, score, coins])\n\n    //Accuracy countdown/countup\n    useEffect(() => {\n        let interval = null;\n        if (coins <= 0) {\n            setBottomCountdown(false)\n            setIsAnimating(true)\n        }\n\n        if (bottomCountdown) {\n            interval = setInterval(() => {\n                setCoins(coins => coins -1)\n                setAccuracy(accuracy => accuracy +1)\n                return coins\n            }, 50)\n        }\n        return () => clearInterval(interval)\n    }, [bottomCountdown, coins])\n\n    //Animate score totaling\n    useEffect(() => {\n        if (isAnimating) {\n            setIsRaising(true)\n            setTimeout(() => {\n                setAccuracy(accuracy => accuracy *3)\n                setIsFlashing(true)\n            }, 600)\n            setTimeout(() => {\n                setTopIsFalling(true)\n                setIsFlashing(false)\n                setIsHidden(true)\n            }, 1000)\n            setTimeout(() => {\n                setAccuracy(futureTotal)\n                setIsFlashing(true)\n            }, 1600)\n            setTimeout(() => {\n                setMiddleIsFalling(true)\n            }, 2000)\n            setTimeout(() => {\n                setTotal(futureTotal)\n                setTotalIsFlashing(true)\n            }, 2600)\n            setIsAnimating(false)\n            setTimeout(() => {\n                updateScore(futureTotal)\n            }, 3100)\n        }\n    }, [isAnimating, speed, accuracy, futureTotal, updateScore])\n\n    let raising = isRaising ? 'raising' : ''\n    let flashing = isFlashing ? 'flashing' : ''\n    let totalFlashing = totalIsFlashing ? 'totalFlashing' : ''\n    let topFalling = topIsFalling ? 'topFall' : ''\n    let middleFalling = middleIsFalling ? 'middleFall' : ''\n    let hidden = isHidden ? 'hidden' : ''\n\n    return (\n        <div className='scoringDiv'>\n            <div className='scoringHalf'>\n                <div className='bowlScoringDiv'>\n                    <Bowl id='scoringBowlTop' display={score}/>\n                    <h2 className='scoringLabelTop'>Speed</h2>\n                    <Bowl id='scoringBowl' display={coins}/>\n                    <h2 className='scoringLabel'>Accuracy</h2>\n                </div>\n                <div className='displayScoringDiv'>\n                    <h2 className={`scoringDisplay topScore ${topFalling}`}>{speed}</h2>\n                    <h2 className={`arithmetic topArith ${hidden}`}>+</h2>\n                    <h2 className={`scoringDisplay bottomScore ${flashing} ${middleFalling}`}>{accuracy}</h2>\n                    <h2 className={`arithmetic  bottomArith ${raising}`}>x 3</h2>\n                    <div className={`totalDisplayDiv`}>\n                        <h2 className={`totalDisplay ${totalFlashing}`}>{total}</h2>\n                        <h3 className='totalLabel'>Total</h3>\n                    </div>\n                </div>\n            </div>\n            <HighScoreDisplay id='scoringHiScore' />\n            <button id='playButton' className='backButton' onClick={() => {\n                values.toggleScoringModal();\n                values.newGame();\n            }}>Play</button>\n            <button id='homeButton' className='backButton' onClick={() => {\n                values.toggleScoringModal();\n                values.toggleMainModal();\n            }}>Home</button>\n            {/* <button id='testButton' className='backButton' onClick={() => {\n                setIsHidden(false)\n                setTopIsFalling(false)\n                setMiddleIsFalling(false)\n                setIsFlashing(false)\n                setTotalIsFlashing(false)\n                setIsRaising(false)\n                setIsAnimating(false)\n                setSpeed(0)\n                setAccuracy(0)\n                setScore(12)\n                setCoins(15)\n                setTotal(0)\n                setTopCountdown(true)\n            }}>Test</button> */}\n        </div>\n    )\n}\n\nexport default ScoringModal;\n","import React, { useContext, useRef, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Modal.css';\n\nconst ModalContext = React.createContext();\n\nexport function ModalProvider({ children }) {\n  const modalRef = useRef();\n  const [value, setValue] = useState();\n\n  useEffect(() => {\n    setValue(modalRef.current);\n  }, [])\n\n  return (\n    <>\n      <ModalContext.Provider value={value}>\n        {children}\n      </ModalContext.Provider>\n      <div ref={modalRef} />\n    </>\n  );\n}\n\nexport function Modal({ children }) {\n  const modalNode = useContext(ModalContext);\n\n  if (!modalNode) return null;\n\n  return ReactDOM.createPortal(\n    <div id=\"modal\" >\n      <div id=\"modal-content\" >\n        {children}\n      </div>\n    </div>,\n    modalNode\n  );\n}\n","import React from 'react'\n\nimport {\n    generateEasyArray,\n    generateTriadicArray,\n    generateAnalogousArray,\n    generateGhostArray,\n    generatePastelArray,\n    generateCustomArray,\n} from './PureFunctions';\n\nimport Backdrop from './Components/Backdrop/Backdrop'\nimport ColorContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport BattleInstructionModal from './Components/Modals/BattleInstructionModal'\nimport ConvertInstructionModal from './Components/Modals/ConvertInstructionModal'\nimport ScoringModal from './Components/Modals/ScoringModal'\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n    constructor (props) {\n        const battleArray = generateAnalogousArray();\n\n        super (props);\n        this.state = {\n            colorArray: battleArray,\n            colorTargetId: '',\n            colorTarget: null,\n            round: 0,\n            score: 0,\n            timer: 15,\n            coins: 0,\n            coinArray: [true, true, true],\n            gameOn: false,\n            windowDisplayed: false,\n            customDisplayed: false,\n            customColor: '255, 255, 255',\n\n            // onLogin: props.onLogin,\n            MainModal: false,\n            loginModal: false,\n            bioModal: false,\n            playerPageModal: false,\n            battleInstructionModal: false,\n            convertInstructionModal: false,\n            scoringModal: false,\n            repeatRender: true,\n\n            startBattle: false,\n            startConvert: false,\n\n            createTriadic: false,\n            createAnalogous: false,\n            createPastel: false,\n            createCustom: false,\n\n            toggleMainModal: this.toggleMainModal,\n            toggleLoginModal: this.toggleLoginModal,\n            toggleBioModal: this.toggleBioModal,\n            togglePlayerPageModal: this.togglePlayerPageModal,\n            toggleBattleInstructionModal: this.toggleBattleInstructionModal,\n            toggleConvertInstructionModal: this.toggleConvertInstructionModal,\n            toggleScoringModal: this.toggleScoringModal,\n\n            toggleWindowDisplay: this.toggleWindowDisplay,\n\n            toggleGameOn: this.toggleGameOn,\n            toggleStartBattle: this.toggleStartBattle,\n            toggleStartConvert: this.toggleStartConvert,\n            toggleRepeatRender: this.toggleRepeatRender,\n\n            toggleCreateTriadic: this.toggleCreateTriadic,\n            toggleCreateAnalogous: this.toggleCreateAnalogous,\n            toggleCreatePastel: this.toggleCreatePastel,\n            setCustomColor: this.setCustomColor,\n\n            startGame: this.startGame,\n            correctGuess: this.correctGuess,\n            updateTimer: this.updateTimerContext,\n            removeCoin: this.removeCoin,\n            clearRounds: this.clearRounds,\n            newGame: this.newGame\n        }\n    }\n\n    componentDidMount() {this.toggleCreateAnalogous()}\n\n    toggleMainModal = () => {\n        this.setState({\n            repeatRender: false,\n            createAnalogous: false,\n            MainModal: !this.state.MainModal,\n            coinArray: [true, true, true],\n            round: 0,\n            coins: 0,\n            score: 0,\n            timer: 15\n        })\n    }\n\n    toggleLoginModal = () => this.setState({ loginModal: !this.state.loginModal })\n    toggleBioModal = () => this.setState({ bioModal: !this.state.bioModal })\n    togglePlayerPageModal = () => this.setState({ playerPageModal: !this.state.playerPageModal })\n    toggleBattleInstructionModal = () => this.setState({ battleInstructionModal: !this.state.battleInstructionModal })\n    toggleConvertInstructionModal = () => this.setState({ convertInstructionModal: !this.state.convertInstructionModal })\n    toggleScoringModal = () => this.setState({ scoringModal: !this.state.scoringModal});\n\n    toggleGameOn = () => this.setState({ gameOn: false })\n    toggleWindowDisplay = () => this.setState({ windowDisplayed: !this.state.windowDisplayed})\n    toggleCustomDisplay = () => this.setState({ customDisplayed: !this.state.customDisplayed})\n    clearRounds = () => this.setState({ round: 0})\n\n    toggleRepeatRender = () => {\n        if (this.state.repeatRender) {\n            this.setState({\n                createPastel: false,\n                createTriadic: false,\n                createAnalogous: false,\n                repeatRender: false\n            })\n        } else {\n            this.setState({\n                repeatRender: true\n            })\n        }\n    }\n\n    toggleCreateAnalogous = () => {\n        this.setState({ createAnalogous: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createAnalogous: false})\n            }\n        }, 1100)\n    }\n\n    toggleCreatePastel = () => {\n        this.setState({ createPastel: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createPastel: false})\n            }\n        }, 1100)\n    }\n\n    toggleCreateTriadic = () => {\n        this.setState({ createTriadic: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createTriadic: false});\n            }\n        }, 1100)\n    }\n\n    setCustomColor = (custom) => {\n        this.setState({\n            createCustom: true,\n            customColor: custom,\n        });\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({\n                customDisplayed: true,\n                createCustom: false\n            });\n        }, 1100)\n        setTimeout(() => {\n            this.setState({\n                customDisplayed: false\n            })\n        }, 3100)\n    }\n\n    toggleStartBattle = () => {\n        if (this.state.startConvert) this.toggleStartConvert();\n        this.setState({ startBattle: !this.state.startBattle });\n    }\n\n    toggleStartConvert = () => {\n        if (this.state.startBattle) this.toggleStartBattle();\n        this.setState({ startConvert: !this.state.startConvert});\n    }\n\n    startGame = () => {\n        this.clearBoard();\n        this.timeout = setTimeout(() => {\n            this.setState({ gameOn: true })\n            this.updateColorArrayContext()\n        }, 1100)\n    }\n\n    removeCoin = () => {\n        let tempArray = [];\n        if (this.state.coinArray[0]) {\n            tempArray = [false, true, true]\n        } else if (this.state.coinArray[1]) {\n            tempArray = [false, false, true]\n        } else {\n            tempArray = [false, false, false]\n        }\n        this.setState ({ coinArray: tempArray })\n    }\n\n    correctGuess = () => {\n        let coinCount = this.state.coins;\n\n        if (this.state.startBattle) {\n            for (let coin of this.state.coinArray) {\n                if (coin) coinCount++\n            }\n\n            this.setState({ gameOn: false });\n            setTimeout(() => {\n                this.setState({ coins: coinCount })\n            }, 2700)\n        }\n\n        this.clearBoard();\n        if (this.state.round < 6) {\n            setTimeout(() => {\n                this.updateColorArrayContext();\n            }, 1500)\n        } else {\n            this.setState({\n                gameOn: false,\n                startBattle: false\n            })\n            setTimeout(() => {\n                this.toggleScoringModal()\n            }, 2000)\n        }\n    }\n\n    newGame = () => {\n        this.setState({\n            round: 0,\n            coins: 0,\n            score: 0,\n            timer: 15,\n            coinArray: [true, true, true]\n        })\n        this.toggleStartBattle();\n        this.startGame();\n    }\n\n    clearBoard = () => {\n        let clearArray = []\n        for (let i = 0; i < 6; i++) {\n            clearArray.push({ background:\n                `radial-gradient(circle at 100px 100px, rgb(255, 255, 255, 0.1), #000)`\n            })\n        }\n        this.setState({\n            colorArray: clearArray,\n        })\n    }\n\n    updateTimerContext = (seconds) => {\n        this.setState({ timer: seconds })\n        setTimeout(() => {\n            this.setState({ score: this.state.score + seconds })\n        }, 1700)\n    }\n\n    updateColorArrayContext = () => {\n        let randomSix = Math.floor(Math.random() * 6)\n        let targetArray = [\n            'colorOne',\n            'colorTwo',\n            'colorThree',\n            'colorFour',\n            'colorFive',\n            'colorSix'\n        ]\n        let targetId = targetArray[randomSix];\n        let arr = [];\n\n        if (this.state.startConvert &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateGhostArray();\n\n        if (this.state.startConvert &&\n            this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateTriadicArray();\n\n        if (this.state.startConvert &&\n            this.state.createAnalogous &&\n            !this.state.createTriadic &&\n            !this.state.createPastel)\n                arr = generateAnalogousArray();\n\n        if (this.state.startConvert &&\n            this.state.createPastel &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous)\n                arr = generatePastelArray();\n\n        if (this.state.startConvert &&\n            this.state.createCustom)\n                arr = generateCustomArray(this.state.customColor);\n\n        if (this.state.startBattle) {\n            this.state.round <= 2\n                ? arr = generateEasyArray()\n                : arr = generateTriadicArray()\n        }\n\n\n        if (!this.state.startBattle &&\n            !this.state.startConvert) {\n                arr = generateAnalogousArray()\n        }\n\n\n        if (this.state.startBattle) {\n            //display target value\n            const targetColor = arr[randomSix]\n            const firstSlice = (targetColor.background.slice(42))\n            let colorTarget = (firstSlice.slice(0, firstSlice.length -7))\n\n            this.setState({\n                coinArray: [true, true, true],\n                round: this.state.round + 1,\n                colorTargetId: targetId,\n                colorTarget: colorTarget,\n                gameOn: true,\n            })\n        }\n\n        this.setState({\n            colorArray: arr,\n        });\n\n        if (this.state.repeatRender) {\n            setTimeout(() => {\n                this.clearBoard();\n            }, 1100)\n            setTimeout(() => {\n                this.updateColorArrayContext();\n            }, 2200)\n        }\n    }\n\n    render() {\n        return (\n            <div className='gameBoardDiv' value={this.state}>\n                <ColorContext.Provider value={this.state}>\n                    <ModalProvider>\n                        <Backdrop />\n\n                        {/* Modal Control */}\n                        {this.state.MainModal &&\n                            <Modal >\n                                <MainModal />\n                            </Modal>\n                        }\n                        {this.state.loginModal &&\n                            <Modal>\n                                <LoginModal />\n                            </Modal>\n                        }\n                        {this.state.bioModal &&\n                            <Modal>\n                                <MyBioModal />\n                            </Modal>\n                        }\n                        {this.state.playerPageModal &&\n                            <Modal>\n                                <PlayerPageModal />\n                            </Modal>\n                        }\n                        {this.state.battleInstructionModal &&\n                            <Modal>\n                                <BattleInstructionModal />\n                            </Modal>\n                        }\n                        {this.state.convertInstructionModal &&\n                            <Modal>\n                                <ConvertInstructionModal />\n                            </Modal>\n                        }\n                        {this.state.scoringModal &&\n                            <Modal >\n                                <ScoringModal />\n                            </Modal>\n                        }\n                    </ModalProvider>\n                </ColorContext.Provider>\n            </div>\n        )\n    }\n}\n\nexport default Controller;\n","import React from 'react'\n\nimport './Message.css'\n\nconst Message = ({ type }) => {\n    const messages = {\n        saved: 'Welcome New Player!',\n        updated: 'Player information updated.',\n        deleted: 'Player deleted.',\n        mismatched: 'Email confirmation must match.',\n        improperlyNamed: 'Name must be 3 to 15 characters.',\n        improperlyPassworded: 'Password must be 6 to 15 characters.',\n        improperlyEmailed: 'Must be a valid email.',\n        invalidCredentialed: 'Invalid Credentials.',\n        signupFailed: 'Sign up failure.',\n        logoutFailed: 'Log out failure.'\n\n    }\n\n    return (\n        <div className='messageDiv'>\n            <p className='messageContainer'>\n                <strong>{messages[type]}</strong>\n            </p>\n        </div>\n    )\n}\n\nexport default Message;\n","import React, { useState, useEffect } from \"react\";\nimport { useStorageState } from 'react-storage-hooks';\nimport firebase from \"./firebase\";\n\nimport UserContext from './context/UserContext'\nimport Controller from './Controller'\nimport Message from './Components/Message/Message'\n\nfunction App() {\n  const [user, setUser] = useStorageState(localStorage, 'state-user', {});\n  const [players, setPlayers] = useState([])\n  const [currentPlayer, setCurrentPlayer] = useState({ key: null, name: '', email: '', score: 0})\n  const [message, setMessage] = useState('')\n\n  useEffect(() => {\n    const playersRef =\n      firebase\n        .database()\n        .ref('players')\n        // .orderByChild('score');\n\n    playersRef.on('value', (snapshot) => {\n      const players = snapshot.val();\n      const newStatePlayers = [];\n\n      for (let player in players) {\n        newStatePlayers.push({\n          key: player,\n          name: players[player].name,\n          email: players[player].email,\n          password: players[player].password,\n          score: players[player].score,\n        })\n      }\n\n      newStatePlayers.sort(function(a, b) {\n        return b.score - a.score\n      })\n      setPlayers(newStatePlayers)\n    });\n  }, []);\n\n  useEffect(() => {\n    let targetPlayer = { key: null, name: '', email: '', score: 0}\n    if (user.email) {\n      targetPlayer = players.find((player) => (player.email === user.email))\n    } else {\n      return\n    }\n\n    firebase\n      .auth()\n      .onAuthStateChanged(() => {\n        if (targetPlayer) {\n          setCurrentPlayer({\n            key: targetPlayer.key,\n            name: targetPlayer.name,\n            email: targetPlayer.email,\n            score: targetPlayer.score\n          })\n        }\n      })\n  }, [user, players]);\n\n  const onLogin = (email, password) => {\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then((response) => {\n        setUser({\n          email: response.user['email'],\n          isAuthenticated: true,\n        })\n      })\n      .catch(() => setFlashMessage('invalidCredentialed'))\n  }\n\n  const onDemoLogin = () => onLogin('player@gmail.com', '121212')\n\n  const onLogout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        setCurrentPlayer({\n          key: null,\n          name: '',\n          email: '',\n          score: 0\n        })\n\n        setUser({\n          email: '',\n          isAuthenticated: false\n        });\n      })\n      .catch(() => setFlashMessage('logoutFailed'))\n  }\n\n  const onSignup = (email, password, name, score) => {\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then((credential) => {\n        setUser({\n          email: credential.user.email,\n          isAuthenticated: true,\n        })\n\n        addNewPlayer(email, password, name, score)\n      })\n      .catch(() => setFlashMessage('signupFailed'))\n  }\n\n  const onEdit = (key, email, name, score) => {\n    const playerRef = firebase.database().ref('players/' + key);\n    playerRef.update({\n      name: name,\n      email: email,\n      score: score,\n    })\n    setFlashMessage('updated')\n  }\n\n  const updateScore = (newScore) => {\n    const playerRef = firebase.database().ref('players/' + currentPlayer.key);\n    if(newScore > currentPlayer.score) {\n      playerRef.update({\n        name: currentPlayer.name,\n        email: currentPlayer.email,\n        score: newScore\n      })\n    }\n  }\n\n  const setFlashMessage = (message) => {\n    setMessage(message)\n    setTimeout(() => {\n      setMessage(null)\n    }, 1600)\n  }\n\n  const addNewPlayer = (email, password, name, score) => {\n    const playersRef = firebase.database().ref('players')\n    // delete player.key\n    playersRef.push({\n      name: name,\n      email: email,\n      password: password,\n      score: score\n    });\n    setFlashMessage('saved')\n  }\n\n  const deletePlayer = (player) => {\n    if (window.confirm('Your account will be deleted. Proceed?')) {\n      const playerRef = firebase.database().ref('players/' + player);\n      playerRef.remove();\n      setFlashMessage('deleted')\n    }\n    onLogout();\n  }\n\n  return (\n    <>\n      <UserContext.Provider value={{\n        user,\n        players,\n        currentPlayer,\n        onLogin,\n        onLogout,\n        onSignup,\n        onEdit,\n        onDemoLogin,\n        addNewPlayer,\n        deletePlayer,\n        updateScore,\n        setFlashMessage\n      }}>\n          {message && <Message type={message} />}\n          <Controller />\n      </UserContext.Provider>\n    </>\n)\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}