{"ast":null,"code":"//Add 3D effect\nfunction addStyleString(arr) {\n  const newArray = []; //iterate through the array of choosen colors and add the 3-D effect\n\n  for (let i = 0; i < arr.length; i++) {\n    newArray.push({\n      background: `radial-gradient(circle at 100px 100px, rgb(${arr[i]}), #000)`\n    });\n  }\n\n  return newArray;\n} //Color value array factories:\n\n\nexport function generateEasyColors() {\n  //Array of all possible 'easy ' colors (all values either 0 or 255)\n  let arr = [\"0, 0, 0\", \"0, 0, 255\", \"255, 0, 255\", \"255, 255, 255\", \"0, 255, 255\", \"255, 0, 0\", \"0, 255, 0\", \"255, 255, 0\"];\n  let returnArr = []; //fill returnArr array with random easy colors\n\n  while (returnArr.length !== 6) {\n    let randomNum = Math.floor(Math.random() * 8);\n    let randomColor = arr[randomNum];\n\n    if (!returnArr.includes(randomColor)) {\n      returnArr.push(randomColor);\n    }\n  } //Add 3D effect\n\n\n  const newArray = addStyleString(returnArr);\n  return newArray;\n} // export function generateHardColors() {\n//     const arr = [];\n//     for (let i = 0; i < 6; i++) {\n//         arr.push(randomColor());\n//     }\n//     console.log('generate hard colors', arr)\n//     const newArray = addStyleString(arr);\n//     return newArray;\n// }\n\nexport function generateGhostColors() {\n  const arr = [];\n\n  for (let i = 0; i < 6; i++) {\n    let temp = randomColor();\n    let sliced = temp.slice(1);\n    arr.push(sliced);\n  }\n\n  const newArray = addStyleString(arr);\n  const blurredArray = addBlurClass(newArray);\n  return blurredArray;\n}\n\nfunction addBlurClass(arr) {\n  const blurredArray = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let object = arr[i];\n    object.class = 'blurred';\n    blurredArray.push(object);\n  }\n\n  return blurredArray;\n}\n\nfunction randomColor() {\n  //pick a \"red\" from 0 to 255\n  const r = Math.floor(Math.random() * 256); //pick a \"green\" from 0 to 255\n\n  const g = Math.floor(Math.random() * 256); //pick a \"blue\" from 0 to 255\n\n  const b = Math.floor(Math.random() * 256); // return RGBtoHSL(`(${r}, ${g}, ${b})`);\n\n  return `${r}, ${g}, ${b}`;\n} //find high numbers\n\n\nfunction randomPastelColor() {\n  //pick a \"red\" from 76 to 180\n  const r = Math.floor(Math.random() * 76) + 180; //pick a \"green\" from 76 to 180\n\n  const g = Math.floor(Math.random() * 76) + 180; //pick a \"blue\" from 76 to 180\n\n  const b = Math.floor(Math.random() * 76) + 180; //make sure its not too white\n\n  if (r + g + b > 700 || r + g + b < 600 || Math.abs(r - g) + Math.abs(g - b) < 40) {\n    return randomPastelColor();\n  } // console.log(r, g, b)\n\n\n  return `${r}, ${g}, ${b}`;\n}\n\nexport function generateBattleColors() {\n  const arr = []; //Pick Random RGB color\n\n  const ranColor = randomColor();\n  arr.push(ranColor); //Find compliment\n\n  const compliment = findComplement(ranColor); //find triadic compliments\n\n  const triOne = findTriadics(ranColor).RGBtriOneColor;\n  const triTwo = findTriadics(ranColor).RGBtriTwoColor; //Find triadic compliments of compliment\n\n  const triCompOne = findTriadics(compliment).RGBtriOneColor;\n  const triCompTwo = findTriadics(compliment).RGBtriTwoColor;\n  arr.push(triCompOne, triTwo, compliment, triOne, triCompTwo); // console.log(arr)\n\n  return addStyleString(arr);\n}\nexport function generateZenColors() {\n  const arr = []; //Pick Random RGB color\n\n  const ranColor = randomColor();\n  arr.push(ranColor); //Find compliment\n\n  const compliment = findComplement(ranColor); //find analogous compliments\n\n  const triOne = findAnalogous(ranColor).RGBanalogousOne;\n  const triTwo = findAnalogous(ranColor).RGBanalogousTwo; //Find analogous compliments of compliment\n\n  const analogousOne = findAnalogous(compliment).RGBanalogousOne;\n  const analogousTwo = findAnalogous(compliment).RGBanalogousTwo;\n  arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo);\n  return addStyleString(arr);\n}\nexport function generatePastelColors() {\n  const arr = []; //Pick Random RGB color\n\n  const ranColor = randomPastelColor();\n  console.log('TTTTTTT', ranColor);\n  arr.push(ranColor); //Find compliment\n\n  const compliment = findComplement(ranColor); //find split compliments\n\n  const splitCompOne = findAnalogous(ranColor).RGBanalogousOne;\n  const splitCompTwo = findAnalogous(ranColor).RGBanalogousTwo; //Find analogous compliments\n\n  const analogousOne = findAnalogous(compliment).RGBanalogousOne;\n  const analogousTwo = findAnalogous(compliment).RGBanalogousTwo;\n  arr.push(analogousOne, splitCompOne, compliment, splitCompTwo, analogousTwo);\n  console.log('JJJJJJJJ', arr);\n  return addStyleString(arr);\n}\nexport function generateCustomColors(playerColor) {\n  const arr = []; //Pick Random RGB color\n  // const ranColor = randomPastelColor()\n  // let convertedColor = RGBtoHSL(playerColor);\n  // let tempArr = playerColor.split(',')\n  // let first = tempArr[0]\n  // let second = `${tempArr[1]}%`\n  // let third = `${tempArr[2]}%`\n  // let tempPlayer = `(${first}, ${second}, ${third})`\n\n  arr.push(playerColor); //Find compliment\n\n  const compliment = findComplement(playerColor); //find analogous compliments\n\n  const triOne = findAnalogous(playerColor).RGBanalogousOne;\n  const triTwo = findAnalogous(playerColor).RGBanalogousTwo; //Find analogous compliments of compliment\n\n  const analogousOne = findAnalogous(compliment).RGBanalogousOne;\n  const analogousTwo = findAnalogous(compliment).RGBanalogousTwo;\n  arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo); // console.log('UUUUUUUU', arr, playerColor)\n\n  return addStyleString(arr);\n} //Find compliment colors:\n\nfunction findComplement(color) {\n  let convertedColor = RGBtoHSL(color);\n  let splitColor = convertedColor.split(',');\n  let hue = Number(splitColor[0]);\n  let satch = splitColor[1];\n  let light = splitColor[2];\n  let complimentHue = 0;\n\n  if (hue >= 180) {\n    complimentHue = hue - 180;\n  } else {\n    complimentHue = hue + 180;\n  }\n\n  let compHSL = `${complimentHue},${satch},${light}`; // console.log('complement', compHSL, HSLtoRGB(compHSL))\n\n  return HSLtoRGB(compHSL);\n}\n\nfunction findTriadics(rgbValue) {\n  let convertedColor = RGBtoHSL(rgbValue);\n  let splitColor = convertedColor.split(',');\n  let hue = Number(splitColor[0]);\n  let satch = splitColor[1];\n  let light = splitColor[2];\n  let triOne = 0;\n  let triTwo = 0; // console.log('triadics', rgbValue, convertedColor, hue, satch, light)\n\n  if (hue < 120) {\n    triOne = hue + 120;\n    triTwo = hue + 240;\n  } else if (hue >= 120 && hue < 240) {\n    triOne = hue + 120;\n    triTwo = hue - 120;\n  } else {\n    triOne = hue - 240;\n    triTwo = hue - 120;\n  }\n\n  let triOneColor = `${triOne},${satch},${light}`;\n  let triTwoColor = `${triTwo},${satch},${light}`; // console.log('triadics', triOneColor)\n\n  let RGBtriOneColor = HSLtoRGB(triOneColor);\n  let RGBtriTwoColor = HSLtoRGB(triTwoColor);\n  return {\n    RGBtriOneColor,\n    RGBtriTwoColor\n  };\n}\n\nfunction findAnalogous(rgbValue) {\n  let convertedColor = RGBtoHSL(rgbValue);\n  let splitColor = convertedColor.split(',');\n  let hue = Number(splitColor[0]);\n  let satch = splitColor[1];\n  let light = splitColor[2];\n  let triOne = 0;\n  let triTwo = 0;\n\n  if (hue < 150) {\n    triOne = hue + 150;\n    triTwo = hue + 210;\n  } else if (hue >= 150 && hue < 240) {\n    triOne = hue + 150;\n    triTwo = hue - 150;\n  } else {\n    triOne = hue - 210;\n    triTwo = hue - 150;\n  }\n\n  let analogousOneColor = `${triOne},${satch},${light}`;\n  let analogousTwoColor = `${triTwo},${satch},${light}`; // console.log('analogous', analogousOneColor)\n\n  let RGBanalogousOne = HSLtoRGB(analogousOneColor);\n  let RGBanalogousTwo = HSLtoRGB(analogousTwoColor);\n  return {\n    RGBanalogousOne,\n    RGBanalogousTwo\n  };\n} //Color value conversions:\n\n\nexport function RGBtoHSL(rgbValue) {\n  //slice -n- dice\n  // let sliced = rgbValue.slice(1, rgbValue.length -1);\n  let split = rgbValue.split(',');\n  let red = Number(split[0]);\n  let green = Number(split[1]);\n  let blue = Number(split[2]); //Make red, green, blue fractions of 1\n\n  red /= 255;\n  green /= 255;\n  blue /= 255; //Find greatest and smallest channel values\n\n  let cmin = Math.min(red, green, blue);\n  let cmax = Math.max(red, green, blue);\n  let delta = cmax - cmin; //calculate hue\n  //no difference\n\n  let h = 0;\n  let s = 0;\n  let l = 0;\n\n  if (delta === 0) {\n    h = 0;\n  } //Red is max\n  else if (cmax === red) {\n      h = (green - blue) / delta % 6;\n    } //Green is max\n    else if (cmax === green) {\n        h = (blue - red) / delta + 2;\n      } //Blue is max\n      else {\n          h = (red - green) / delta + 4;\n        }\n\n  h = Math.round(h * 60); //Make negative hues positive behind 360 degrees\n\n  if (h < 0) {\n    h += 360;\n  } //Calculate lightness\n\n\n  l = (cmax + cmin) / 2; //Calculate saturation\n\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1)); // Multiply by 100\n\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);\n  return `${h}, ${s}%, ${l}%`;\n}\n_c = RGBtoHSL;\nexport function RGBtoHSLvalue(rgbValue) {\n  //slice -n- dice\n  let sliced = rgbValue.slice(1, rgbValue.length - 1);\n  let split = sliced.split(',');\n  let red = Number(split[0]);\n  let green = Number(split[1]);\n  let blue = Number(split[2]); //Make red, green, blue fractions of 1\n\n  red /= 255;\n  green /= 255;\n  blue /= 255; //Find greatest and smallest channel values\n\n  let cmin = Math.min(red, green, blue);\n  let cmax = Math.max(red, green, blue);\n  let delta = cmax - cmin; //calculate hue\n  //no difference\n\n  let h = 0;\n  let s = 0;\n  let l = 0;\n\n  if (delta === 0) {\n    h = 0;\n  } //Red is max\n  else if (cmax === red) {\n      h = (green - blue) / delta % 6;\n    } //Green is max\n    else if (cmax === green) {\n        h = (blue - red) / delta + 2;\n      } //Blue is max\n      else {\n          h = (red - green) / delta + 4;\n        }\n\n  h = Math.round(h * 60); //Make negative hues positive behind 360 degrees\n\n  if (h < 0) {\n    h += 360;\n  } //Calculate lightness\n\n\n  l = (cmax + cmin) / 2; //Calculate saturation\n\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1)); // Multiply by 100\n\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);\n  return [`${h}`, `${s}`, `${l}`];\n}\n_c2 = RGBtoHSLvalue;\nexport function HSLtoRGB(hslValue) {\n  let split = hslValue.split(','); //slice off '%' and convert to numbers\n\n  let h = Number(split[0]);\n  let s = Number(split[1].substr(0, split[1].length - 1));\n  let l = Number(split[2].substr(0, split[2].length - 1));\n  s /= 100;\n  l /= 100;\n  let c = (1 - Math.abs(2 * l - 1)) * s;\n  let x = c * (1 - Math.abs(h / 60 % 2 - 1));\n  let m = l - c / 2;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n\n  if (0 <= h && h < 60) {\n    r = c;\n    g = x;\n    b = 0;\n  } else if (60 <= h && h < 120) {\n    r = x;\n    g = c;\n    b = 0;\n  } else if (120 <= h && h < 180) {\n    r = 0;\n    g = c;\n    b = x;\n  } else if (180 <= h && h < 240) {\n    r = 0;\n    g = x;\n    b = c;\n  } else if (240 <= h && h < 300) {\n    r = x;\n    g = 0;\n    b = c;\n  } else if (300 <= h && h < 360) {\n    r = c;\n    g = 0;\n    b = x;\n  }\n\n  r = Math.round((r + m) * 255);\n  g = Math.round((g + m) * 255);\n  b = Math.round((b + m) * 255);\n  return `${r}, ${g}, ${b}`;\n}\n_c3 = HSLtoRGB;\nexport function HEXtoRGB(hex) {\n  let r = 0;\n  let g = 0;\n  let b = 0;\n\n  if (hex.length === 4) {\n    r = parseInt(hex[1] + hex[1], 16);\n    g = parseInt(hex[2] + hex[2], 16);\n    b = parseInt(hex[3] + hex[3], 16);\n  } else if (hex.length === 7) {\n    r = parseInt(hex[1] + hex[2], 16);\n    g = parseInt(hex[3] + hex[4], 16);\n    b = parseInt(hex[5] + hex[6], 16);\n  }\n\n  return [`${r}`, `${g}`, `${b}`];\n}\n_c4 = HEXtoRGB;\nexport function RGBtoHEX(rgb) {\n  let r = Number(rgb[0]);\n  let g = Number(rgb[1]);\n  let b = Number(rgb[2]);\n  r = r.toString(16);\n  g = g.toString(16);\n  b = b.toString(16);\n\n  if (r.length === 1) {\n    r = 0 + r;\n  }\n\n  if (g.length === 1) {\n    g = 0 + g;\n  }\n\n  if (b.length === 1) {\n    b = 0 + b;\n  }\n\n  return [`${r}`, `${g}`, `${b}`];\n} //Console greeting\n\n_c5 = RGBtoHEX;\nconst style = \"font-size: 14px;\" + \"background: #67b26f;\" + \"background: -webkit-linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" + \"background: linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" + \"color: white;\" + \"text-align: center;\" + \"padding: 10px 15px;\" + \"width: 100%;\" + \"border-radius: 20px;\";\nconst text = \"%cLet's talk!🙂 sirscavo@gmail.com\";\nconsole.log(text, style); // export const zenObject = {\n//     0: \"Trust is good... control is better.\",\n//     1: \"I've never known a thing in my life.\",\n//     2: \"Nothing is something worth doing.\",\n//     3: \"Sleep is the best meditation.\",\n//     4: \"Everything has a crack in it, that's how the light gets in.\",\n//     5: \"These mountains that you carry, you were only meant to climb.\",\n//     6: \"Let go or be dragged.\",\n//     7: \"Transcend the bullshit.\",\n//     8: \"And when they played they really played. And when they worked they really worked.\",\n//     9: \"Relax. Nothing is under control.\",\n//     10: \"If you chase two rabbits, you catch none.\",\n//     11: \"Don't be afraid to just sit and watch.\",\n//     12: \"Become comfortable with not knowing.\",\n//     13: \"Life begins where fear ends.\",\n//     14: \"Don't curse the darkness, light a candle.\",\n//     15: \"This will never come again.\",\n//     16: \"Nothing is what you want.\",\n//     17: \"I have lived with several Zen masters - all of them cats.\",\n//     18: \"Matters of great concern should be treated lightly. Matters of small concerns should be treated seriously.\",\n//     19: \"Obstacles don't block the path, they are the path.\",\n//     20: \"If it is to be, it must be me.\",\n//     21: \"Don't enable the scumbags.\",\n//     22: \"The first draft of everything is crap.\",\n//     23: \"When action grows unprofitable, gather information. When information grows unprofitable, sleep.\"\n// }\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"RGBtoHSL\");\n$RefreshReg$(_c2, \"RGBtoHSLvalue\");\n$RefreshReg$(_c3, \"HSLtoRGB\");\n$RefreshReg$(_c4, \"HEXtoRGB\");\n$RefreshReg$(_c5, \"RGBtoHEX\");","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/PureFunctions.js"],"names":["addStyleString","arr","newArray","i","length","push","background","generateEasyColors","returnArr","randomNum","Math","floor","random","randomColor","includes","generateGhostColors","temp","sliced","slice","blurredArray","addBlurClass","object","class","r","g","b","randomPastelColor","abs","generateBattleColors","ranColor","compliment","findComplement","triOne","findTriadics","RGBtriOneColor","triTwo","RGBtriTwoColor","triCompOne","triCompTwo","generateZenColors","findAnalogous","RGBanalogousOne","RGBanalogousTwo","analogousOne","analogousTwo","generatePastelColors","console","log","splitCompOne","splitCompTwo","generateCustomColors","playerColor","color","convertedColor","RGBtoHSL","splitColor","split","hue","Number","satch","light","complimentHue","compHSL","HSLtoRGB","rgbValue","triOneColor","triTwoColor","analogousOneColor","analogousTwoColor","red","green","blue","cmin","min","cmax","max","delta","h","s","l","round","toFixed","RGBtoHSLvalue","hslValue","substr","c","x","m","HEXtoRGB","hex","parseInt","RGBtoHEX","rgb","toString","style","text"],"mappings":"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","sourcesContent":["//Add 3D effect\nfunction addStyleString (arr) {\n    const newArray = []\n\n    //iterate through the array of choosen colors and add the 3-D effect\n    for (let i = 0; i < arr.length; i++) {\n        newArray.push({ background: `radial-gradient(circle at 100px 100px, rgb(${arr[i]}), #000)` })\n    }\n\n    return newArray\n}\n\n//Color value array factories:\nexport function generateEasyColors() {\n    //Array of all possible 'easy ' colors (all values either 0 or 255)\n    let arr = [\n        \"0, 0, 0\",\n        \"0, 0, 255\",\n        \"255, 0, 255\",\n        \"255, 255, 255\",\n        \"0, 255, 255\",\n        \"255, 0, 0\",\n        \"0, 255, 0\",\n        \"255, 255, 0\"\n    ];\n\n    let returnArr = []\n    //fill returnArr array with random easy colors\n    while (returnArr.length !== 6) {\n        let randomNum = Math.floor(Math.random() *8);\n        let randomColor = arr[randomNum]\n        if(!returnArr.includes(randomColor)){\n            returnArr.push(randomColor)\n        }\n    }\n    //Add 3D effect\n    const newArray = addStyleString(returnArr)\n    return newArray\n}\n\n// export function generateHardColors() {\n//     const arr = [];\n\n//     for (let i = 0; i < 6; i++) {\n//         arr.push(randomColor());\n//     }\n//     console.log('generate hard colors', arr)\n\n//     const newArray = addStyleString(arr);\n//     return newArray;\n// }\n\nexport function generateGhostColors() {\n    const arr = [];\n\n    for (let i = 0; i < 6; i++) {\n        let temp = randomColor();\n        let sliced = temp.slice(1)\n        arr.push(sliced);\n    }\n\n    const newArray = addStyleString(arr);\n    const blurredArray = addBlurClass(newArray)\n    return blurredArray;\n}\n\nfunction addBlurClass(arr) {\n    const blurredArray = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        let object = arr[i];\n        object.class = 'blurred';\n        blurredArray.push(object)\n    }\n    return blurredArray;\n}\n\nfunction randomColor() {\n    //pick a \"red\" from 0 to 255\n    const r = Math.floor(Math.random() * 256);\n    //pick a \"green\" from 0 to 255\n    const g = Math.floor(Math.random() * 256);\n    //pick a \"blue\" from 0 to 255\n    const b = Math.floor(Math.random() * 256);\n    // return RGBtoHSL(`(${r}, ${g}, ${b})`);\n    return `${r}, ${g}, ${b}`;\n}\n\n//find high numbers\nfunction randomPastelColor() {\n    //pick a \"red\" from 76 to 180\n    const r = Math.floor(Math.random() * 76) + 180;\n    //pick a \"green\" from 76 to 180\n    const g = Math.floor(Math.random() * 76) + 180;\n    //pick a \"blue\" from 76 to 180\n    const b = Math.floor(Math.random() * 76) + 180;\n\n    //make sure its not too white\n    if ((r+g+b) > 700 || (r+g+b) < 600  || ((Math.abs(r - g)) + (Math.abs(g - b))) < 40) {\n        return randomPastelColor()\n    }\n    // console.log(r, g, b)\n    return `${r}, ${g}, ${b}`;\n}\n\nexport function generateBattleColors() {\n    const arr = []\n\n    //Pick Random RGB color\n    const ranColor = randomColor()\n    arr.push(ranColor);\n\n    //Find compliment\n    const compliment = findComplement(ranColor)\n\n    //find triadic compliments\n    const triOne = findTriadics(ranColor).RGBtriOneColor;\n    const triTwo = findTriadics(ranColor).RGBtriTwoColor;\n\n    //Find triadic compliments of compliment\n    const triCompOne  = findTriadics(compliment).RGBtriOneColor;\n    const triCompTwo  = findTriadics(compliment).RGBtriTwoColor;\n\n    arr.push(triCompOne, triTwo, compliment, triOne, triCompTwo)\n\n    // console.log(arr)\n    return addStyleString(arr)\n}\n\nexport function generateZenColors() {\n    const arr = []\n    //Pick Random RGB color\n    const ranColor = randomColor()\n    arr.push(ranColor);\n    //Find compliment\n    const compliment = findComplement(ranColor)\n    //find analogous compliments\n    const triOne = findAnalogous(ranColor).RGBanalogousOne;\n    const triTwo = findAnalogous(ranColor).RGBanalogousTwo;\n    //Find analogous compliments of compliment\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo)\n\n    return addStyleString(arr)\n}\n\nexport function generatePastelColors() {\n    const arr = []\n    //Pick Random RGB color\n    const ranColor = randomPastelColor()\n    console.log('TTTTTTT', ranColor)\n    arr.push(ranColor);\n    //Find compliment\n    const compliment = findComplement(ranColor)\n    //find split compliments\n    const splitCompOne = findAnalogous(ranColor).RGBanalogousOne;\n    const splitCompTwo = findAnalogous(ranColor).RGBanalogousTwo;\n    //Find analogous compliments\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, splitCompOne, compliment, splitCompTwo, analogousTwo)\n    console.log('JJJJJJJJ', arr)\n    return addStyleString(arr)\n}\n\nexport function generateCustomColors(playerColor) {\n    const arr = []\n    //Pick Random RGB color\n    // const ranColor = randomPastelColor()\n    // let convertedColor = RGBtoHSL(playerColor);\n    // let tempArr = playerColor.split(',')\n    // let first = tempArr[0]\n    // let second = `${tempArr[1]}%`\n    // let third = `${tempArr[2]}%`\n    // let tempPlayer = `(${first}, ${second}, ${third})`\n    arr.push(playerColor);\n    //Find compliment\n    const compliment = findComplement(playerColor)\n    //find analogous compliments\n    const triOne = findAnalogous(playerColor).RGBanalogousOne;\n    const triTwo = findAnalogous(playerColor).RGBanalogousTwo;\n    //Find analogous compliments of compliment\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo)\n    // console.log('UUUUUUUU', arr, playerColor)\n\n    return addStyleString(arr)\n}\n\n//Find compliment colors:\n\nfunction findComplement (color) {\n    let convertedColor = (RGBtoHSL(color))\n\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n    let complimentHue = 0;\n\n    if (hue >= 180) {\n        complimentHue = hue - 180;\n    } else {\n        complimentHue = hue + 180;\n    }\n\n    let compHSL = (`${complimentHue},${satch},${light}`)\n    // console.log('complement', compHSL, HSLtoRGB(compHSL))\n    return HSLtoRGB(compHSL);\n}\n\nfunction findTriadics (rgbValue) {\n    let convertedColor = RGBtoHSL(rgbValue)\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n\n    let triOne = 0;\n    let triTwo = 0;\n    // console.log('triadics', rgbValue, convertedColor, hue, satch, light)\n    if (hue < 120) {\n        triOne = hue + 120;\n        triTwo = hue + 240;\n    } else if (hue >= 120 && hue < 240) {\n        triOne = hue + 120;\n        triTwo = hue - 120;\n    } else {\n        triOne = hue - 240;\n        triTwo = hue - 120;\n    }\n    let triOneColor = (`${triOne},${satch},${light}`)\n    let triTwoColor = (`${triTwo},${satch},${light}`)\n    // console.log('triadics', triOneColor)\n    let RGBtriOneColor = HSLtoRGB(triOneColor);\n    let RGBtriTwoColor = HSLtoRGB(triTwoColor);\n\n    return {RGBtriOneColor, RGBtriTwoColor}\n}\n\nfunction findAnalogous (rgbValue) {\n    let convertedColor = RGBtoHSL(rgbValue)\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n\n    let triOne = 0;\n    let triTwo = 0;\n\n    if (hue < 150) {\n        triOne = hue + 150;\n        triTwo = hue + 210;\n    } else if (hue >= 150 && hue < 240) {\n        triOne = hue + 150;\n        triTwo = hue - 150;\n    } else {\n        triOne = hue - 210;\n        triTwo = hue - 150;\n    }\n    let analogousOneColor = (`${triOne},${satch},${light}`)\n    let analogousTwoColor = (`${triTwo},${satch},${light}`)\n    // console.log('analogous', analogousOneColor)\n    let RGBanalogousOne = HSLtoRGB(analogousOneColor)\n    let RGBanalogousTwo = HSLtoRGB(analogousTwoColor)\n\n    return {RGBanalogousOne, RGBanalogousTwo}\n}\n\n\n//Color value conversions:\n\nexport function RGBtoHSL (rgbValue) {\n    //slice -n- dice\n    // let sliced = rgbValue.slice(1, rgbValue.length -1);\n    let split = rgbValue.split(',');\n    let red = Number(split[0]);\n    let green = Number(split[1]);\n    let blue = Number(split[2]);\n\n    //Make red, green, blue fractions of 1\n    red /= 255;\n    green /= 255;\n    blue /= 255;\n\n    //Find greatest and smallest channel values\n    let cmin = Math.min(red, green, blue);\n    let cmax = Math.max(red, green, blue);\n    let delta = cmax - cmin;\n\n    //calculate hue\n    //no difference\n    let h = 0;\n    let s = 0;\n    let l = 0;\n    if (delta === 0) {\n        h = 0;\n    }\n    //Red is max\n    else if (cmax === red) {\n        h = ((green - blue) / delta) % 6;\n    }\n    //Green is max\n    else if (cmax === green) {\n        h = (blue - red) / delta + 2;\n    }\n    //Blue is max\n    else {\n        h = (red - green) / delta + 4;\n    }\n    h = Math.round(h * 60);\n    //Make negative hues positive behind 360 degrees\n    if (h < 0) {\n        h += 360\n    }\n    //Calculate lightness\n    l = (cmax + cmin) / 2;\n    //Calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    // Multiply by 100\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    return(`${h}, ${s}%, ${l}%`)\n}\n\nexport function RGBtoHSLvalue (rgbValue) {\n    //slice -n- dice\n    let sliced = rgbValue.slice(1, rgbValue.length -1);\n    let split = sliced.split(',');\n    let red = Number(split[0]);\n    let green = Number(split[1]);\n    let blue = Number(split[2]);\n\n    //Make red, green, blue fractions of 1\n    red /= 255;\n    green /= 255;\n    blue /= 255;\n\n    //Find greatest and smallest channel values\n    let cmin = Math.min(red, green, blue);\n    let cmax = Math.max(red, green, blue);\n    let delta = cmax - cmin;\n\n    //calculate hue\n    //no difference\n    let h = 0;\n    let s = 0;\n    let l = 0;\n    if (delta === 0) {\n        h = 0;\n    }\n    //Red is max\n    else if (cmax === red) {\n        h = ((green - blue) / delta) % 6;\n    }\n    //Green is max\n    else if (cmax === green) {\n        h = (blue - red) / delta + 2;\n    }\n    //Blue is max\n    else {\n        h = (red - green) / delta + 4;\n    }\n    h = Math.round(h * 60);\n    //Make negative hues positive behind 360 degrees\n    if (h < 0) {\n        h += 360\n    }\n    //Calculate lightness\n    l = (cmax + cmin) / 2;\n    //Calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    // Multiply by 100\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    return [`${h}`, `${s}`, `${l}`]\n}\n\nexport function HSLtoRGB (hslValue) {\n    let split = hslValue.split(',');\n\n    //slice off '%' and convert to numbers\n    let h = Number(split[0]);\n    let s = Number(split[1].substr(0,split[1].length -1));\n    let l = Number(split[2].substr(0,split[2].length -1));\n\n    s /= 100;\n    l /= 100;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s;\n    let x = c * (1 - Math.abs((h / 60) % 2 - 1));\n    let m = l - c/2;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n    if (0 <= h && h < 60) {\n        r = c; g = x; b = 0;\n    } else if (60 <= h && h < 120) {\n        r = x; g = c; b = 0;\n    } else if (120 <= h && h < 180) {\n        r = 0; g = c; b = x;\n    } else if (180 <= h && h < 240) {\n        r = 0; g = x; b = c;\n    } else if (240 <= h && h < 300) {\n        r = x; g = 0; b = c;\n    } else if (300 <= h && h < 360) {\n        r = c; g = 0; b = x;\n    }\n\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    return `${r}, ${g}, ${b}`;\n}\n\nexport function HEXtoRGB (hex) {\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n    if (hex.length === 4) {\n        r = parseInt(hex[1] + hex[1], 16);\n        g = parseInt(hex[2] + hex[2], 16);\n        b = parseInt(hex[3] + hex[3], 16);\n    } else if (hex.length === 7) {\n        r = parseInt(hex[1] + hex[2], 16)\n        g = parseInt(hex[3] + hex[4], 16);\n        b = parseInt(hex[5] + hex[6], 16);\n    }\n    return [`${r}`, `${g}`, `${b}`]\n}\n\nexport function RGBtoHEX (rgb) {\n    let r = Number(rgb[0])\n    let g = Number(rgb[1])\n    let b = Number(rgb[2])\n    r = r.toString(16)\n    g = g.toString(16)\n    b = b.toString(16)\n\n    if (r.length ===1)  {r = 0 + r}\n    if (g.length ===1)  {g = 0 + g}\n    if (b.length ===1)  {b = 0 + b}\n\n    return [`${r}`, `${g}`, `${b}`]\n}\n\n\n//Console greeting\nconst style = \"font-size: 14px;\" +\n  \"background: #67b26f;\" +\n  \"background: -webkit-linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" +\n  \"background: linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" +\n  \"color: white;\" +\n  \"text-align: center;\" +\n  \"padding: 10px 15px;\" +\n  \"width: 100%;\" +\n  \"border-radius: 20px;\";\n\nconst text = \"%cLet's talk!🙂 sirscavo@gmail.com\";\n\nconsole.log(text, style);\n\n// export const zenObject = {\n//     0: \"Trust is good... control is better.\",\n//     1: \"I've never known a thing in my life.\",\n//     2: \"Nothing is something worth doing.\",\n//     3: \"Sleep is the best meditation.\",\n//     4: \"Everything has a crack in it, that's how the light gets in.\",\n//     5: \"These mountains that you carry, you were only meant to climb.\",\n//     6: \"Let go or be dragged.\",\n//     7: \"Transcend the bullshit.\",\n//     8: \"And when they played they really played. And when they worked they really worked.\",\n//     9: \"Relax. Nothing is under control.\",\n//     10: \"If you chase two rabbits, you catch none.\",\n//     11: \"Don't be afraid to just sit and watch.\",\n//     12: \"Become comfortable with not knowing.\",\n//     13: \"Life begins where fear ends.\",\n//     14: \"Don't curse the darkness, light a candle.\",\n//     15: \"This will never come again.\",\n//     16: \"Nothing is what you want.\",\n//     17: \"I have lived with several Zen masters - all of them cats.\",\n//     18: \"Matters of great concern should be treated lightly. Matters of small concerns should be treated seriously.\",\n//     19: \"Obstacles don't block the path, they are the path.\",\n//     20: \"If it is to be, it must be me.\",\n//     21: \"Don't enable the scumbags.\",\n//     22: \"The first draft of everything is crap.\",\n//     23: \"When action grows unprofitable, gather information. When information grows unprofitable, sleep.\"\n// }\n"]},"metadata":{},"sourceType":"module"}