{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Components/Footer/ClassConvertPanels.js\";\nimport React from 'react';\nimport { HSLtoRGB, RGBtoHEX, HEXtoRGB } from '../../PureFunctions';\nimport LeftConvertPanel from './LeftConvertPanel';\nimport RightConvertPanel from './RightConvertPanel';\nimport './ClassConvertPanels.css';\n\nclass ConvertPanels extends React.Component {\n  constructor(props) {\n    const rgbLabelArray = ['Red', 'Green', 'Blue'];\n    const rgbInputArray = ['From 0 to 255', 'From 0 to 255', 'From 0 to 255'];\n    const hslLabelArray = ['Hue', 'Saturation', 'Light'];\n    const hslInputArray = ['From 0 to 360', 'From 0 to 100', 'From 0 to 100'];\n    const hexLabelArray = ['Red', 'Green', 'Blue'];\n    const hexInputArray = ['From 00 to FF', 'From 00 to FF', 'From 00 to FF'];\n    super(props);\n\n    this.playerSubmit = playerInput => {\n      let mode = '';\n\n      if (this.state.fromRgbButton) {\n        mode = 'rgb';\n      } else if (this.state.fromHexButton) {\n        mode = 'hex';\n      } else {\n        mode = 'hsl';\n      }\n\n      const tempInput = this.checkInput(playerInput, mode);\n      this.setState({\n        fromTopInput: `${tempInput[0]}`,\n        fromMiddleInput: `${tempInput[1]}`,\n        fromBottomInput: `${tempInput[2]}`\n      });\n      let convertedColor = '';\n\n      if (this.state.fromRgbButton && this.state.toHslButton) {\n        convertedColor = tempInput.join(',');\n        console.log('@@@@@@@@@@@@', convertedColor);\n      } else if (this.state.fromHslButton && this.state.toRgbButton) {\n        let tempColor = HSLtoRGB(`${tempInput.join(',')}`); // tempColor = tempColor.slice(1, tempColor.length -1)\n\n        convertedColor = tempColor.split(', ');\n      } else if (this.state.fromHexButton && this.state.toRgbButton) {\n        convertedColor = HEXtoRGB(`#${tempInput.join('')}`);\n      } else if (this.state.fromRgbButton && this.state.toHexButton) {\n        convertedColor = RGBtoHEX(tempInput);\n      } else if (this.state.fromHslButton && this.state.toHexButton) {\n        let tempColor = HSLtoRGB(`${tempInput.join(',')}`);\n        tempColor = tempColor.slice(1, tempColor.length - 1);\n        tempColor = tempColor.split(', ');\n        convertedColor = RGBtoHEX(tempColor);\n      } else if (this.state.fromHexButton && this.state.toHslButton) {\n        let tempColor = HEXtoRGB(`#${tempInput.join('')}`);\n        convertedColor = RGBtoHSL(`(${tempColor.join(', ')})`);\n      } else if (this.state.fromRgbButton && this.state.toRgbButton || this.state.fromHslButton && this.state.toHslButton || this.state.fromHexButton && this.state.toHexButton) {\n        convertedColor = tempInput;\n      }\n\n      this.setState({\n        toTopInput: `${convertedColor[0]}`,\n        toMiddleInput: `${convertedColor[1]}`,\n        toBottomInput: `${convertedColor[2]}`\n      });\n      this.state.setCustom(convertedColor);\n    };\n\n    this.checkInput = (playerInput, mode) => {\n      const result = [];\n\n      if (mode === 'rgb') {\n        for (let i = 0; i < 3; i++) {\n          if (!Number(playerInput[i]) && Number(playerInput[i]) !== 0) {\n            result.push('From 0 to 255!');\n          } else if (playerInput[i] < 0 || playerInput[i] > 255) {\n            result.push('From 0 to 255!');\n          } else {\n            result.push(playerInput[i]);\n          }\n        }\n      }\n\n      if (mode === 'hsl') {\n        if (playerInput[0] < 0 || playerInput[0] > 360 || !Number(playerInput[0])) {\n          result.push('From 0 to 360');\n        } else {\n          result.push(playerInput[0]);\n        }\n\n        if (playerInput[1] < 0 || playerInput[1] > 100 || !Number(playerInput[1])) {\n          result.push('From 0 to 100');\n        } else {\n          result.push(playerInput[1]);\n        }\n\n        if (playerInput[2] < 0 || playerInput[2] > 100 || !Number(playerInput[2])) {\n          result.push('From 0 to 100');\n        } else {\n          result.push(playerInput[2]);\n        }\n      }\n\n      if (mode === 'hex') {\n        const validNumberInputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n        const validLetterInputs = ['A', 'B', 'C', 'D', 'E', 'F'];\n\n        for (let i = 0; i < 3; i++) {\n          if (playerInput[i].length !== 2) {\n            result.push('From 00 to FF');\n            continue;\n          }\n\n          if ((validNumberInputs.includes(Number(playerInput[i][0])) || validLetterInputs.includes(playerInput[i][0])) && (validNumberInputs.includes(Number(playerInput[i][1])) || validLetterInputs.includes(playerInput[i][1]))) {\n            result.push(playerInput[i]);\n          } else {\n            result.push('From 00 to FF');\n          }\n        }\n      }\n\n      return result;\n    };\n\n    this.toggleFromRgbButton = () => {\n      if (this.state.fromRgbButton) return;\n      if (this.state.fromHslButton) this.setState({\n        fromHslButton: false\n      });\n      if (this.state.fromHexButton) this.setState({\n        fromHexButton: false\n      });\n      this.setState({\n        fromRgbButton: true,\n        fromTopLabel: this.state.rgbLabelArray[0],\n        fromMiddleLabel: this.state.rgbLabelArray[1],\n        fromBottomLabel: this.state.rgbLabelArray[2],\n        fromTopInput: this.state.rgbInputArray[0],\n        fromMiddleInput: this.state.rgbInputArray[1],\n        fromBottomInput: this.state.rgbInputArray[2]\n      });\n    };\n\n    this.toggleFromHslButton = () => {\n      if (this.state.fromRgbButton) this.setState({\n        fromRgbButton: false\n      });\n      if (this.state.fromHexButton) this.setState({\n        fromHexButton: false\n      });\n      this.setState({\n        fromHslButton: true,\n        fromTopLabel: this.state.hslLabelArray[0],\n        fromMiddleLabel: this.state.hslLabelArray[1],\n        fromBottomLabel: this.state.hslLabelArray[2],\n        fromTopInput: this.state.hslInputArray[0],\n        fromMiddleInput: this.state.hslInputArray[1],\n        fromBottomInput: this.state.hslInputArray[2]\n      });\n    };\n\n    this.toggleFromHexButton = () => {\n      if (this.state.fromHslButton) this.setState({\n        fromHslButton: false\n      });\n      if (this.state.fromRgbButton) this.setState({\n        fromRgbButton: false\n      });\n      this.setState({\n        fromHexButton: true,\n        fromTopLabel: this.state.hexLabelArray[0],\n        fromMiddleLabel: this.state.hexLabelArray[1],\n        fromBottomLabel: this.state.hexLabelArray[2],\n        fromTopInput: this.state.hexInputArray[0],\n        fromMiddleInput: this.state.hexInputArray[1],\n        fromBottomInput: this.state.hexInputArray[2]\n      });\n    };\n\n    this.toggleToRgbButton = () => {\n      if (this.state.toHexButton) this.setState({\n        toHexButton: false\n      });\n      if (this.state.toHslButton) this.setState({\n        toHslButton: false\n      });\n      this.setState({\n        toRgbButton: true,\n        toTopLabel: this.state.rgbLabelArray[0],\n        toMiddleLabel: this.state.rgbLabelArray[1],\n        toBottomLabel: this.state.rgbLabelArray[2],\n        toTopInput: this.state.rgbInputArray[0],\n        toMiddleInput: this.state.rgbInputArray[1],\n        toBottomInput: this.state.rgbInputArray[2]\n      });\n    };\n\n    this.toggleToHslButton = () => {\n      if (this.state.toHexButton) this.setState({\n        toHexButton: false\n      });\n      if (this.state.toRgbButton) this.setState({\n        toRgbButton: false\n      });\n      this.setState({\n        toHslButton: true,\n        toTopLabel: this.state.hslLabelArray[0],\n        toMiddleLabel: this.state.hslLabelArray[1],\n        toBottomLabel: this.state.hslLabelArray[2],\n        toTopInput: this.state.hslInputArray[0],\n        toMiddleInput: this.state.hslInputArray[1],\n        toBottomInput: this.state.hslInputArray[2]\n      });\n    };\n\n    this.toggleToHexButton = () => {\n      if (this.state.toRgbButton) this.setState({\n        toRgbButton: false\n      });\n      if (this.state.toHslButton) this.setState({\n        toHslButton: false\n      });\n      this.setState({\n        toHexButton: true,\n        toTopLabel: this.state.hexLabelArray[0],\n        toMiddleLabel: this.state.hexLabelArray[1],\n        toBottomLabel: this.state.hexLabelArray[2],\n        toTopInput: this.state.hexInputArray[0],\n        toMiddleInput: this.state.hexInputArray[1],\n        toBottomInput: this.state.hexInputArray[2]\n      });\n    };\n\n    this.state = {\n      setCustom: props.setCustom,\n      fromRgbButton: true,\n      fromHslButton: false,\n      fromHexButton: false,\n      toRgbButton: false,\n      toHslButton: true,\n      toHexButton: false,\n      fromTopLabel: rgbLabelArray[0],\n      fromMiddleLabel: rgbLabelArray[1],\n      fromBottomLabel: rgbLabelArray[2],\n      fromTopInput: rgbInputArray[0],\n      fromMiddleInput: rgbInputArray[1],\n      fromBottomInput: rgbInputArray[2],\n      toTopLabel: hslLabelArray[0],\n      toMiddleLabel: hslLabelArray[1],\n      toBottomLabel: hslLabelArray[2],\n      toTopInput: hslInputArray[0],\n      toMiddleInput: hslInputArray[1],\n      toBottomInput: hslInputArray[2],\n      rgbLabelArray: rgbLabelArray,\n      rgbInputArray: rgbInputArray,\n      hslLabelArray: hslLabelArray,\n      hslInputArray: hslInputArray,\n      hexLabelArray: hexLabelArray,\n      hexInputArray: hexInputArray,\n      // playerInput: '',\n      toggleFromRgbButton: this.toggleFromRgbButton,\n      toggleFromHslButton: this.toggleFromHslButton,\n      toggleFromHexButton: this.toggleFromHexButton,\n      toggleToRgbButton: this.toggleToRgbButton,\n      toggleToHslButton: this.toggleToHslButton,\n      toggleToHexButton: this.toggleToHexButton,\n      playerSubmit: this.playerSubmit\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(LeftConvertPanel, {\n        fromRgbButton: this.state.fromRgbButton,\n        fromHslButton: this.state.fromHslButton,\n        fromHexButton: this.state.fromHexButton,\n        toRgbButton: this.state.toRgbButton,\n        toHslButton: this.state.toHslButton,\n        toHexButton: this.state.toHexButton,\n        fromTopLabel: this.state.fromTopLabel,\n        fromMiddleLabel: this.state.fromMiddleLabel,\n        fromBottomLabel: this.state.fromBottomLabel,\n        fromTopInput: this.state.fromTopInput,\n        fromMiddleInput: this.state.fromMiddleInput,\n        fromBottomInput: this.state.fromBottomInput,\n        toggleFromRgbButton: this.state.toggleFromRgbButton,\n        toggleFromHslButton: this.state.toggleFromHslButton,\n        toggleFromHexButton: this.state.toggleFromHexButton,\n        toggleToRgbButton: this.state.toggleToRgbButton,\n        toggleToHslButton: this.state.toggleToHslButton,\n        toggleToHexButton: this.state.toggleToHexButton,\n        playerSubmit: this.state.playerSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RightConvertPanel, {\n        toTopLabel: this.state.toTopLabel,\n        toMiddleLabel: this.state.toMiddleLabel,\n        toBottomLabel: this.state.toBottomLabel,\n        toTopInput: this.state.toTopInput,\n        toMiddleInput: this.state.toMiddleInput,\n        toBottomInput: this.state.toBottomInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default ConvertPanels;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Components/Footer/ClassConvertPanels.js"],"names":["React","HSLtoRGB","RGBtoHEX","HEXtoRGB","LeftConvertPanel","RightConvertPanel","ConvertPanels","Component","constructor","props","rgbLabelArray","rgbInputArray","hslLabelArray","hslInputArray","hexLabelArray","hexInputArray","playerSubmit","playerInput","mode","state","fromRgbButton","fromHexButton","tempInput","checkInput","setState","fromTopInput","fromMiddleInput","fromBottomInput","convertedColor","toHslButton","join","console","log","fromHslButton","toRgbButton","tempColor","split","toHexButton","slice","length","RGBtoHSL","toTopInput","toMiddleInput","toBottomInput","setCustom","result","i","Number","push","validNumberInputs","validLetterInputs","includes","toggleFromRgbButton","fromTopLabel","fromMiddleLabel","fromBottomLabel","toggleFromHslButton","toggleFromHexButton","toggleToRgbButton","toTopLabel","toMiddleLabel","toBottomLabel","toggleToHslButton","toggleToHexButton","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { HSLtoRGB, RGBtoHEX, HEXtoRGB } from '../../PureFunctions'\nimport LeftConvertPanel from './LeftConvertPanel';\nimport RightConvertPanel from './RightConvertPanel';\n\nimport './ClassConvertPanels.css'\n\nclass ConvertPanels extends React.Component {\n    constructor (props) {\n        const rgbLabelArray = ['Red', 'Green', 'Blue'];\n        const rgbInputArray = ['From 0 to 255', 'From 0 to 255', 'From 0 to 255'];\n        const hslLabelArray = ['Hue', 'Saturation', 'Light'];\n        const hslInputArray = ['From 0 to 360', 'From 0 to 100', 'From 0 to 100'];\n        const hexLabelArray = ['Red', 'Green', 'Blue'];\n        const hexInputArray = ['From 00 to FF', 'From 00 to FF', 'From 00 to FF']\n\n\n        super(props);\n        this.state = {\n            setCustom: props.setCustom,\n\n            fromRgbButton: true,\n            fromHslButton: false,\n            fromHexButton: false,\n\n            toRgbButton: false,\n            toHslButton: true,\n            toHexButton: false,\n\n            fromTopLabel: rgbLabelArray[0],\n            fromMiddleLabel: rgbLabelArray[1],\n            fromBottomLabel: rgbLabelArray[2],\n\n            fromTopInput: rgbInputArray[0],\n            fromMiddleInput: rgbInputArray[1],\n            fromBottomInput: rgbInputArray[2],\n\n            toTopLabel: hslLabelArray[0],\n            toMiddleLabel: hslLabelArray[1],\n            toBottomLabel: hslLabelArray[2],\n\n            toTopInput: hslInputArray[0],\n            toMiddleInput: hslInputArray[1],\n            toBottomInput: hslInputArray[2],\n\n            rgbLabelArray: rgbLabelArray,\n            rgbInputArray: rgbInputArray,\n            hslLabelArray: hslLabelArray,\n            hslInputArray: hslInputArray,\n            hexLabelArray: hexLabelArray,\n            hexInputArray: hexInputArray,\n\n            // playerInput: '',\n\n            toggleFromRgbButton: this.toggleFromRgbButton,\n            toggleFromHslButton: this.toggleFromHslButton,\n            toggleFromHexButton: this.toggleFromHexButton,\n            toggleToRgbButton: this.toggleToRgbButton,\n            toggleToHslButton: this.toggleToHslButton,\n            toggleToHexButton: this.toggleToHexButton,\n            playerSubmit: this.playerSubmit,\n        }\n    }\n\n    playerSubmit = (playerInput) => {\n        let mode = '';\n        if (this.state.fromRgbButton) {\n            mode = 'rgb'\n        } else if (this.state.fromHexButton) {\n            mode = 'hex'\n        } else {\n            mode = 'hsl'\n        }\n        const tempInput = this.checkInput(playerInput, mode)\n\n        this.setState({\n            fromTopInput: `${tempInput[0]}`,\n            fromMiddleInput: `${tempInput[1]}`,\n            fromBottomInput: `${tempInput[2]}`,\n        })\n\n        let convertedColor = ''\n\n        if ((this.state.fromRgbButton  && this.state.toHslButton)) {\n            convertedColor = tempInput.join(',');\n            console.log('@@@@@@@@@@@@',convertedColor)\n        } else if (this.state.fromHslButton && this.state.toRgbButton) {\n            let tempColor = HSLtoRGB(`${tempInput.join(',')}`)\n            // tempColor = tempColor.slice(1, tempColor.length -1)\n            convertedColor = tempColor.split(', ')\n        } else if (this.state.fromHexButton && this.state.toRgbButton) {\n            convertedColor = HEXtoRGB(`#${tempInput.join('')}`)\n        } else if (this.state.fromRgbButton && this.state.toHexButton) {\n            convertedColor = RGBtoHEX(tempInput)\n        } else if (this.state.fromHslButton && this.state.toHexButton) {\n            let tempColor = HSLtoRGB(`${tempInput.join(',')}`)\n            tempColor = tempColor.slice(1, tempColor.length -1)\n            tempColor = tempColor.split(', ')\n            convertedColor = RGBtoHEX(tempColor)\n        } else if (this.state.fromHexButton && this.state.toHslButton) {\n            let tempColor = HEXtoRGB(`#${tempInput.join('')}`)\n            convertedColor = RGBtoHSL(`(${tempColor.join(', ')})`)\n        } else if ((this.state.fromRgbButton && this.state.toRgbButton) ||\n                   (this.state.fromHslButton && this.state.toHslButton) ||\n                   (this.state.fromHexButton && this.state.toHexButton)) {\n                        convertedColor = tempInput;\n        }\n        this.setState({\n            toTopInput: `${convertedColor[0]}`,\n            toMiddleInput: `${convertedColor[1]}`,\n            toBottomInput: `${convertedColor[2]}`,\n        })\n        this.state.setCustom(convertedColor);\n    }\n\n    //Player input validation\n    checkInput = (playerInput, mode) => {\n        const result = [];\n\n        if (mode === 'rgb') {\n            for (let i = 0; i < 3; i++) {\n                if (!Number(playerInput[i]) && Number(playerInput[i]) !== 0) {\n                    result.push('From 0 to 255!')\n                } else if (playerInput[i] < 0 || playerInput[i] > 255) {\n                    result.push('From 0 to 255!')\n                } else {\n                    result.push(playerInput[i])\n                }\n            }\n        }\n        if (mode === 'hsl') {\n            if (playerInput[0] < 0 || playerInput[0] > 360 || !Number(playerInput[0])) {\n                result.push('From 0 to 360')\n            } else {\n                result.push(playerInput[0])\n            }\n            if (playerInput[1] < 0 || playerInput[1] > 100 || !Number(playerInput[1])) {\n                result.push('From 0 to 100')\n            } else {\n                result.push(playerInput[1])\n            }\n            if (playerInput[2] < 0 || playerInput[2] > 100 || !Number(playerInput[2])) {\n                result.push('From 0 to 100')\n            } else  {\n                result.push(playerInput[2])\n            }\n        }\n        if (mode === 'hex') {\n            const validNumberInputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n            const validLetterInputs = ['A', 'B', 'C', 'D', 'E', 'F'];\n            for (let i = 0; i < 3; i++) {\n                if (playerInput[i].length !== 2) {\n                    result.push('From 00 to FF')\n                    continue;\n                }\n                if ((validNumberInputs.includes(Number(playerInput[i][0]))|| validLetterInputs.includes(playerInput[i][0])) &&\n                    (validNumberInputs.includes(Number(playerInput[i][1])) || validLetterInputs.includes(playerInput[i][1]))) {\n                    result.push(playerInput[i])\n                } else {\n                    result.push('From 00 to FF')\n                }\n            }\n        }\n        return result;\n    }\n\n    toggleFromRgbButton = () => {\n        if (this.state.fromRgbButton) return;\n        if (this.state.fromHslButton) this.setState({fromHslButton: false})\n        if (this.state.fromHexButton) this.setState({fromHexButton: false})\n        this.setState ({\n            fromRgbButton: true,\n            fromTopLabel: this.state.rgbLabelArray[0],\n            fromMiddleLabel: this.state.rgbLabelArray[1],\n            fromBottomLabel: this.state.rgbLabelArray[2],\n            fromTopInput: this.state.rgbInputArray[0],\n            fromMiddleInput: this.state.rgbInputArray[1],\n            fromBottomInput: this.state.rgbInputArray[2],\n        }\n    )}\n\n    toggleFromHslButton = () => {\n        if (this.state.fromRgbButton) this.setState({fromRgbButton: false})\n        if (this.state.fromHexButton) this.setState({fromHexButton: false})\n        this.setState ({\n            fromHslButton: true,\n            fromTopLabel: this.state.hslLabelArray[0],\n            fromMiddleLabel: this.state.hslLabelArray[1],\n            fromBottomLabel: this.state.hslLabelArray[2],\n            fromTopInput: this.state.hslInputArray[0],\n            fromMiddleInput: this.state.hslInputArray[1],\n            fromBottomInput: this.state.hslInputArray[2],\n        }\n    )}\n\n    toggleFromHexButton = () => {\n        if (this.state.fromHslButton) this.setState({fromHslButton: false})\n        if (this.state.fromRgbButton) this.setState({fromRgbButton: false})\n        this.setState ({\n            fromHexButton: true,\n            fromTopLabel: this.state.hexLabelArray[0],\n            fromMiddleLabel: this.state.hexLabelArray[1],\n            fromBottomLabel: this.state.hexLabelArray[2],\n            fromTopInput: this.state.hexInputArray[0],\n            fromMiddleInput: this.state.hexInputArray[1],\n            fromBottomInput: this.state.hexInputArray[2],\n        }\n    )}\n\n    toggleToRgbButton = () => {\n        if (this.state.toHexButton) this.setState({toHexButton: false})\n        if (this.state.toHslButton) this.setState({toHslButton: false})\n        this.setState ({\n            toRgbButton: true,\n            toTopLabel: this.state.rgbLabelArray[0],\n            toMiddleLabel: this.state.rgbLabelArray[1],\n            toBottomLabel: this.state.rgbLabelArray[2],\n            toTopInput: this.state.rgbInputArray[0],\n            toMiddleInput: this.state.rgbInputArray[1],\n            toBottomInput: this.state.rgbInputArray[2],\n        }\n    )}\n\n    toggleToHslButton = () => {\n        if (this.state.toHexButton) this.setState({toHexButton: false})\n        if (this.state.toRgbButton) this.setState({toRgbButton: false})\n        this.setState ({\n            toHslButton: true,\n            toTopLabel: this.state.hslLabelArray[0],\n            toMiddleLabel: this.state.hslLabelArray[1],\n            toBottomLabel: this.state.hslLabelArray[2],\n            toTopInput: this.state.hslInputArray[0],\n            toMiddleInput: this.state.hslInputArray[1],\n            toBottomInput: this.state.hslInputArray[2],\n        }\n    )}\n\n    toggleToHexButton = () => {\n        if (this.state.toRgbButton) this.setState({toRgbButton: false})\n        if (this.state.toHslButton) this.setState({toHslButton: false})\n        this.setState ({\n            toHexButton: true,\n            toTopLabel: this.state.hexLabelArray[0],\n            toMiddleLabel: this.state.hexLabelArray[1],\n            toBottomLabel: this.state.hexLabelArray[2],\n            toTopInput: this.state.hexInputArray[0],\n            toMiddleInput: this.state.hexInputArray[1],\n            toBottomInput: this.state.hexInputArray[2],\n        }\n    )}\n\n    render () {\n        return (\n            <>\n                <LeftConvertPanel\n                    fromRgbButton={this.state.fromRgbButton}\n                    fromHslButton={this.state.fromHslButton}\n                    fromHexButton={this.state.fromHexButton}\n                    toRgbButton={this.state.toRgbButton}\n                    toHslButton={this.state.toHslButton}\n                    toHexButton={this.state.toHexButton}\n\n                    fromTopLabel={this.state.fromTopLabel}\n                    fromMiddleLabel={this.state.fromMiddleLabel}\n                    fromBottomLabel={this.state.fromBottomLabel}\n                    fromTopInput={this.state.fromTopInput}\n                    fromMiddleInput={this.state.fromMiddleInput}\n                    fromBottomInput={this.state.fromBottomInput}\n\n                    toggleFromRgbButton={this.state.toggleFromRgbButton}\n                    toggleFromHslButton={this.state.toggleFromHslButton}\n                    toggleFromHexButton={this.state.toggleFromHexButton}\n                    toggleToRgbButton={this.state.toggleToRgbButton}\n                    toggleToHslButton={this.state.toggleToHslButton}\n                    toggleToHexButton={this.state.toggleToHexButton}\n                    playerSubmit={this.state.playerSubmit}\n                />\n                <RightConvertPanel\n                    toTopLabel={this.state.toTopLabel}\n                    toMiddleLabel={this.state.toMiddleLabel}\n                    toBottomLabel={this.state.toBottomLabel}\n                    toTopInput={this.state.toTopInput}\n                    toMiddleInput={this.state.toMiddleInput}\n                    toBottomInput={this.state.toBottomInput}\n                />\n            </>\n        )\n    }\n}\n\nexport default ConvertPanels;\n"]},"metadata":{},"sourceType":"module"}