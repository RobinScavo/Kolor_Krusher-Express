{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Components/Footer/ConvertContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport ColorContext from '../../ColorContext';\nimport { HSLtoRGB, RGBtoHEX, HEXtoRGB, RGBtoHSL } from '../../PureFunctions';\nimport LeftConvertPanel from './LeftConvertPanel';\nimport RightConvertPanel from './RightConvertPanel';\nimport './ConvertContainer.css';\n\nconst ConvertContainer = () => {\n  _s();\n\n  const values = useContext(ColorContext);\n  const rgbLabelArray = ['Red', 'Green', 'Blue'];\n  const rgbInputArray = ['From 0 to 255', 'From 0 to 255', 'From 0 to 255'];\n  const hslLabelArray = ['Hue', 'Saturation', 'Light'];\n  const hslInputArray = ['From 0 to 360', 'From 0 to 100', 'From 0 to 100'];\n  const hexLabelArray = ['Red', 'Green', 'Blue'];\n  const hexInputArray = ['From 00 to FF', 'From 00 to FF', 'From 00 to FF'];\n  const [fromRgbButton, setFromRgbButton] = useState(true);\n  const [fromHslButton, setFromHslButton] = useState(false);\n  const [fromHexButton, setFromHexButton] = useState(false);\n  const [toRgbButton, setToRgbButton] = useState(false);\n  const [toHslButton, setToHslButton] = useState(true);\n  const [toHexButton, setToHexButton] = useState(false);\n  const [fromTopLabel, setFromTopLabel] = useState(rgbLabelArray[0]);\n  const [fromMiddleLabel, setFromMiddleLabel] = useState(rgbLabelArray[1]);\n  const [fromBottomLabel, setFromBottomLabel] = useState(rgbLabelArray[2]);\n  const [fromTopInput, setFromTopInput] = useState(rgbInputArray[0]);\n  const [fromMiddleInput, setFromMiddleInput] = useState(rgbInputArray[1]);\n  const [fromBottomInput, setFromBottomInput] = useState(rgbInputArray[2]);\n  const [toTopLabel, setToTopLabel] = useState(hslLabelArray[0]);\n  const [toMiddleLabel, setToMiddleLabel] = useState(hslLabelArray[1]);\n  const [toBottomLabel, setToBottomLabel] = useState(hslLabelArray[2]);\n  const [toTopInput, setToTopInput] = useState(hslInputArray[0]);\n  const [toMiddleInput, setToMiddleInput] = useState(hslInputArray[1]);\n  const [toBottomInput, setToBottomInput] = useState(hslInputArray[2]);\n\n  const toggleFromRgbButton = () => {\n    if (toRgbButton) {\n      setToRgbButton(false);\n      setToHslButton(true);\n    }\n\n    if (fromRgbButton) return;\n    if (fromHslButton) setFromHslButton(false);\n    if (fromHexButton) setFromHexButton(false);\n    setFromRgbButton(true);\n    setFromTopLabel(rgbLabelArray[0]);\n    setFromMiddleLabel(rgbLabelArray[1]);\n    setFromBottomLabel(rgbLabelArray[2]);\n    setFromTopInput(rgbInputArray[0]);\n    setFromMiddleInput(rgbInputArray[1]);\n    setFromBottomInput(rgbInputArray[2]);\n  };\n\n  const toggleFromHslButton = () => {\n    if (toHslButton) {\n      setToHslButton(false);\n      setToRgbButton(true);\n    }\n\n    if (fromRgbButton) setFromRgbButton(false);\n    if (fromHexButton) setFromHexButton(false);\n    setFromHslButton(true);\n    setFromTopLabel(hslLabelArray[0]);\n    setFromMiddleLabel(hslLabelArray[1]);\n    setFromBottomLabel(hslLabelArray[2]);\n    setFromTopInput(hslInputArray[0]);\n    setFromMiddleInput(hslInputArray[1]);\n    setFromBottomInput(hslInputArray[2]);\n  };\n\n  const toggleFromHexButton = () => {\n    if (toHexButton) {\n      setToHexButton(false);\n      setToRgbButton(true);\n    }\n\n    if (fromHslButton) setFromHslButton(false);\n    if (fromRgbButton) setFromRgbButton(false);\n    setFromHexButton(true);\n    setFromTopLabel(hexLabelArray[0]);\n    setFromMiddleLabel(hexLabelArray[1]);\n    setFromBottomLabel(hexLabelArray[2]);\n    setFromTopInput(hexInputArray[0]);\n    setFromMiddleInput(hexInputArray[1]);\n    setFromBottomInput(hexInputArray[2]);\n  };\n\n  const toggleToRgbButton = () => {\n    if (fromRgbButton) return;\n    if (toHexButton) setToHexButton(false);\n    if (toHslButton) setToHslButton(false);\n    setToRgbButton(true);\n    setToTopLabel(rgbLabelArray[0]);\n    setToMiddleLabel(rgbLabelArray[1]);\n    setToBottomLabel(rgbLabelArray[2]);\n    setToTopInput(rgbInputArray[0]);\n    setToMiddleInput(rgbInputArray[1]);\n    setToBottomInput(rgbInputArray[2]);\n  };\n\n  const toggleToHslButton = () => {\n    if (fromHslButton) return;\n    if (toHexButton) setToHexButton(false);\n    if (toRgbButton) setToRgbButton(false);\n    setToHslButton(true);\n    setToTopLabel(hslLabelArray[0]);\n    setToMiddleLabel(hslLabelArray[1]);\n    setToBottomLabel(hslLabelArray[2]);\n    setToTopInput(hslInputArray[0]);\n    setToMiddleInput(hslInputArray[1]);\n    setToBottomInput(hslInputArray[2]);\n  };\n\n  const toggleToHexButton = () => {\n    if (fromHexButton) return;\n    if (toRgbButton) setToRgbButton(false);\n    if (toHslButton) setToHslButton(false);\n    setToHexButton(true);\n    setToTopLabel(hexLabelArray[0]);\n    setToMiddleLabel(hexLabelArray[1]);\n    setToBottomLabel(hexLabelArray[2]);\n    setToTopInput(hexInputArray[0]);\n    setToMiddleInput(hexInputArray[1]);\n    setToBottomInput(hexInputArray[2]);\n  };\n\n  const playerSubmit = playerInput => {\n    //if they missed a field then exit function\n    for (let input of playerInput) {\n      if (input.includes('From')) return;\n    } //validate input\n\n\n    const tempInput = checkInput(playerInput); //display any input errors while retaining good ones\n\n    setFromTopInput(`${tempInput[0]}`);\n    setFromMiddleInput(`${tempInput[1]}`);\n    setFromBottomInput(`${tempInput[2]}`);\n    let renderedColor = '';\n    let displayedValue = ''; //RGB to HSL\n\n    if (fromRgbButton && toHslButton) {\n      renderedColor = tempInput.join(', ');\n      displayedValue = RGBtoHSL(renderedColor); //HSL to RGB\n    } else if (fromHslButton && toRgbButton) {\n      let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`;\n      renderedColor = HSLtoRGB(stringHSL);\n      displayedValue = renderedColor; //Hex to RGB\n    } else if (fromHexButton && toRgbButton) {\n      renderedColor = HEXtoRGB(`#${tempInput.join('')}`);\n      displayedValue = renderedColor; //RGB to HEX\n    } else if (fromRgbButton && toHexButton) {\n      renderedColor = tempInput.join(', ');\n      displayedValue = RGBtoHEX(tempInput.join(',')); //HSL to HEX\n    } else if (fromHslButton && toHexButton) {\n      let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`;\n      renderedColor = HSLtoRGB(stringHSL);\n      displayedValue = RGBtoHEX(renderedColor); //HEX to HSL\n    } else if (this.state.fromHexButton && this.state.toHslButton) {\n      renderedColor = HEXtoRGB(`#${tempInput.join('')}`);\n      displayedValue = RGBtoHSL(renderedColor);\n    } //display converted values\n\n\n    let displayArray = displayedValue.split(',');\n    setToTopInput(`${displayArray[0]}`);\n    setToMiddleInput(`${displayArray[1]}`);\n    setToBottomInput(`${displayArray[2]}`); //render player color with compliments\n\n    values.setCustomColor(renderedColor);\n  };\n\n  const checkInput = playerInput => {\n    const result = []; //RGB input\n\n    if (fromRgbButton) {\n      for (let i = 0; i < 3; i++) {\n        if (!Number(playerInput[i]) && Number(playerInput[i]) !== 0) {\n          result.push('From 0 to 255!');\n        } else if (playerInput[i] < 0 || playerInput[i] > 255) {\n          result.push('From 0 to 255!');\n        } else {\n          result.push(playerInput[i]);\n        }\n      }\n    } //HSL input\n\n\n    if (fromHslButton) {\n      if (playerInput[0] < 0 || playerInput[0] > 360 || !Number(playerInput[0])) {\n        result.push('From 0 to 360');\n      } else {\n        result.push(playerInput[0]);\n      }\n\n      if (playerInput[1] < 0 || playerInput[1] > 100 || !Number(playerInput[1])) {\n        result.push('From 0 to 100');\n      } else {\n        result.push(playerInput[1]);\n      }\n\n      if (playerInput[2] < 0 || playerInput[2] > 100 || !Number(playerInput[2])) {\n        result.push('From 0 to 100');\n      } else {\n        result.push(playerInput[2]);\n      }\n    } //HEX input\n\n\n    if (fromHexButton) {\n      const validNumberInputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n      const validLetterInputs = ['A', 'B', 'C', 'D', 'E', 'F'];\n\n      for (let i = 0; i < 3; i++) {\n        if (playerInput[i].length !== 2) {\n          result.push('From 00 to FF');\n          continue;\n        }\n\n        if ((validNumberInputs.includes(Number(playerInput[i][0])) || validLetterInputs.includes(playerInput[i][0])) && (validNumberInputs.includes(Number(playerInput[i][1])) || validLetterInputs.includes(playerInput[i][1]))) {\n          result.push(playerInput[i]);\n        } else {\n          result.push('From 00 to FF');\n        }\n      }\n    }\n\n    return result;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LeftConvertPanel, {\n      fromRgbButton: fromRgbButton,\n      fromHslButton: fromHslButton,\n      fromHexButton: fromHexButton,\n      toRgbButton: toRgbButton,\n      toHslButton: toHslButton,\n      toHexButton: toHexButton,\n      fromTopLabel: fromTopLabel,\n      fromMiddleLabel: fromMiddleLabel,\n      fromBottomLabel: fromBottomLabel,\n      fromTopInput: fromTopInput,\n      fromMiddleInput: fromMiddleInput,\n      fromBottomInput: fromBottomInput,\n      toggleFromRgbButton: toggleFromRgbButton,\n      toggleFromHslButton: toggleFromHslButton,\n      toggleFromHexButton: toggleFromHexButton,\n      toggleToRgbButton: toggleToRgbButton,\n      toggleToHslButton: toggleToHslButton,\n      toggleToHexButton: toggleToHexButton,\n      playerSubmit: playerSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RightConvertPanel, {\n      toTopLabel: toTopLabel,\n      toMiddleLabel: toMiddleLabel,\n      toBottomLabel: toBottomLabel,\n      toTopInput: toTopInput,\n      toMiddleInput: toMiddleInput,\n      toBottomInput: toBottomInput,\n      toggleCreateTriadic: values.toggleCreateTriadic,\n      toggleCreateAnalogous: values.toggleCreateAnalogous,\n      toggleCreatePastel: values.toggleCreatePastel,\n      toggleRepeatRender: values.toggleRepeatRender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ConvertContainer, \"7jt9c16GyZcuDyVX3F9Z+wBDS3o=\");\n\n_c = ConvertContainer;\nexport default ConvertContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConvertContainer\");","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Components/Footer/ConvertContainer.js"],"names":["React","useState","useContext","ColorContext","HSLtoRGB","RGBtoHEX","HEXtoRGB","RGBtoHSL","LeftConvertPanel","RightConvertPanel","ConvertContainer","values","rgbLabelArray","rgbInputArray","hslLabelArray","hslInputArray","hexLabelArray","hexInputArray","fromRgbButton","setFromRgbButton","fromHslButton","setFromHslButton","fromHexButton","setFromHexButton","toRgbButton","setToRgbButton","toHslButton","setToHslButton","toHexButton","setToHexButton","fromTopLabel","setFromTopLabel","fromMiddleLabel","setFromMiddleLabel","fromBottomLabel","setFromBottomLabel","fromTopInput","setFromTopInput","fromMiddleInput","setFromMiddleInput","fromBottomInput","setFromBottomInput","toTopLabel","setToTopLabel","toMiddleLabel","setToMiddleLabel","toBottomLabel","setToBottomLabel","toTopInput","setToTopInput","toMiddleInput","setToMiddleInput","toBottomInput","setToBottomInput","toggleFromRgbButton","toggleFromHslButton","toggleFromHexButton","toggleToRgbButton","toggleToHslButton","toggleToHexButton","playerSubmit","playerInput","input","includes","tempInput","checkInput","renderedColor","displayedValue","join","stringHSL","state","displayArray","split","setCustomColor","result","i","Number","push","validNumberInputs","validLetterInputs","length","toggleCreateTriadic","toggleCreateAnalogous","toggleCreatePastel","toggleRepeatRender"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\n\nimport ColorContext from '../../ColorContext';\nimport { HSLtoRGB, RGBtoHEX, HEXtoRGB, RGBtoHSL } from '../../PureFunctions'\nimport LeftConvertPanel from './LeftConvertPanel';\nimport RightConvertPanel from './RightConvertPanel';\n\nimport './ConvertContainer.css'\n\nconst ConvertContainer = () => {\n    const values = useContext(ColorContext);\n\n    const rgbLabelArray = ['Red', 'Green', 'Blue'];\n    const rgbInputArray = ['From 0 to 255', 'From 0 to 255', 'From 0 to 255'];\n    const hslLabelArray = ['Hue', 'Saturation', 'Light'];\n    const hslInputArray = ['From 0 to 360', 'From 0 to 100', 'From 0 to 100'];\n    const hexLabelArray = ['Red', 'Green', 'Blue'];\n    const hexInputArray = ['From 00 to FF', 'From 00 to FF', 'From 00 to FF'];\n\n    const [fromRgbButton, setFromRgbButton] = useState(true)\n    const [fromHslButton, setFromHslButton] = useState(false)\n    const [fromHexButton, setFromHexButton] = useState(false)\n\n    const [toRgbButton, setToRgbButton] = useState(false)\n    const [toHslButton, setToHslButton] = useState(true)\n    const [toHexButton, setToHexButton] = useState(false)\n\n    const [fromTopLabel, setFromTopLabel] = useState(rgbLabelArray[0])\n    const [fromMiddleLabel, setFromMiddleLabel] = useState(rgbLabelArray[1])\n    const [fromBottomLabel, setFromBottomLabel] = useState(rgbLabelArray[2])\n\n    const [fromTopInput, setFromTopInput] = useState(rgbInputArray[0])\n    const [fromMiddleInput, setFromMiddleInput] = useState(rgbInputArray[1])\n    const [fromBottomInput, setFromBottomInput] = useState(rgbInputArray[2])\n\n    const [toTopLabel, setToTopLabel] = useState(hslLabelArray[0])\n    const [toMiddleLabel, setToMiddleLabel] = useState(hslLabelArray[1])\n    const [toBottomLabel, setToBottomLabel] = useState(hslLabelArray[2])\n\n    const [toTopInput, setToTopInput] = useState(hslInputArray[0])\n    const [toMiddleInput, setToMiddleInput] = useState(hslInputArray[1])\n    const [toBottomInput, setToBottomInput] = useState(hslInputArray[2])\n\n    const toggleFromRgbButton = () => {\n        if (toRgbButton) {\n            setToRgbButton(false)\n            setToHslButton(true)\n        }\n        if (fromRgbButton) return;\n        if (fromHslButton) setFromHslButton(false)\n        if (fromHexButton) setFromHexButton(false)\n\n        setFromRgbButton(true)\n        setFromTopLabel(rgbLabelArray[0])\n        setFromMiddleLabel(rgbLabelArray[1])\n        setFromBottomLabel(rgbLabelArray[2])\n        setFromTopInput(rgbInputArray[0])\n        setFromMiddleInput(rgbInputArray[1])\n        setFromBottomInput(rgbInputArray[2])\n    }\n\n    const toggleFromHslButton = () => {\n        if (toHslButton) {\n            setToHslButton(false)\n            setToRgbButton(true)\n        }\n        if (fromRgbButton) setFromRgbButton(false)\n        if (fromHexButton) setFromHexButton(false)\n\n        setFromHslButton(true)\n        setFromTopLabel(hslLabelArray[0])\n        setFromMiddleLabel(hslLabelArray[1])\n        setFromBottomLabel(hslLabelArray[2])\n        setFromTopInput(hslInputArray[0])\n        setFromMiddleInput(hslInputArray[1])\n        setFromBottomInput(hslInputArray[2])\n    }\n\n    const toggleFromHexButton = () => {\n        if (toHexButton) {\n            setToHexButton(false)\n            setToRgbButton(true)\n        }\n        if (fromHslButton) setFromHslButton(false)\n        if (fromRgbButton) setFromRgbButton(false)\n\n        setFromHexButton(true)\n        setFromTopLabel(hexLabelArray[0])\n        setFromMiddleLabel(hexLabelArray[1])\n        setFromBottomLabel(hexLabelArray[2])\n        setFromTopInput(hexInputArray[0])\n        setFromMiddleInput(hexInputArray[1])\n        setFromBottomInput(hexInputArray[2])\n    }\n\n    const toggleToRgbButton = () => {\n        if (fromRgbButton) return\n        if (toHexButton) setToHexButton(false)\n        if (toHslButton) setToHslButton(false)\n\n        setToRgbButton(true)\n        setToTopLabel(rgbLabelArray[0])\n        setToMiddleLabel(rgbLabelArray[1])\n        setToBottomLabel(rgbLabelArray[2])\n        setToTopInput(rgbInputArray[0])\n        setToMiddleInput(rgbInputArray[1])\n        setToBottomInput(rgbInputArray[2])\n    }\n\n    const toggleToHslButton = () => {\n        if (fromHslButton) return\n        if (toHexButton) setToHexButton(false)\n        if (toRgbButton) setToRgbButton(false)\n\n        setToHslButton(true)\n        setToTopLabel(hslLabelArray[0])\n        setToMiddleLabel(hslLabelArray[1])\n        setToBottomLabel(hslLabelArray[2])\n        setToTopInput(hslInputArray[0])\n        setToMiddleInput(hslInputArray[1])\n        setToBottomInput(hslInputArray[2])\n    }\n\n    const toggleToHexButton = () => {\n        if (fromHexButton) return\n        if (toRgbButton) setToRgbButton(false)\n        if (toHslButton) setToHslButton(false)\n\n        setToHexButton(true)\n        setToTopLabel(hexLabelArray[0])\n        setToMiddleLabel(hexLabelArray[1])\n        setToBottomLabel(hexLabelArray[2])\n        setToTopInput(hexInputArray[0])\n        setToMiddleInput(hexInputArray[1])\n        setToBottomInput(hexInputArray[2])\n    }\n\n    const playerSubmit = (playerInput) => {\n        //if they missed a field then exit function\n        for (let input of playerInput) {\n            if (input.includes('From')) return\n        }\n\n        //validate input\n        const tempInput = checkInput(playerInput)\n\n        //display any input errors while retaining good ones\n        setFromTopInput(`${tempInput[0]}`)\n        setFromMiddleInput(`${tempInput[1]}`)\n        setFromBottomInput(`${tempInput[2]}`)\n\n        let renderedColor = '';\n        let displayedValue = '';\n\n        //RGB to HSL\n        if ((fromRgbButton  && toHslButton)) {\n            renderedColor = tempInput.join(', ');\n            displayedValue = RGBtoHSL(renderedColor)\n\n        //HSL to RGB\n        } else if (fromHslButton && toRgbButton) {\n            let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`\n            renderedColor = HSLtoRGB(stringHSL);\n            displayedValue = renderedColor;\n\n        //Hex to RGB\n        } else if (fromHexButton && toRgbButton) {\n            renderedColor = HEXtoRGB(`#${tempInput.join('')}`);\n            displayedValue = renderedColor;\n\n        //RGB to HEX\n        } else if (fromRgbButton && toHexButton) {\n            renderedColor = tempInput.join(', ');\n            displayedValue = RGBtoHEX(tempInput.join(','))\n\n        //HSL to HEX\n        } else if (fromHslButton && toHexButton) {\n            let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`\n            renderedColor = HSLtoRGB(stringHSL)\n            displayedValue = RGBtoHEX(renderedColor)\n\n        //HEX to HSL\n        } else if (this.state.fromHexButton && this.state.toHslButton) {\n            renderedColor = HEXtoRGB(`#${tempInput.join('')}`);\n            displayedValue = RGBtoHSL(renderedColor);\n        }\n\n        //display converted values\n        let displayArray = displayedValue.split(',')\n        setToTopInput(`${displayArray[0]}`)\n        setToMiddleInput(`${displayArray[1]}`)\n        setToBottomInput(`${displayArray[2]}`)\n\n        //render player color with compliments\n        values.setCustomColor(renderedColor);\n    }\n\n    const checkInput = (playerInput) => {\n        const result = [];\n\n        //RGB input\n        if (fromRgbButton) {\n            for (let i = 0; i < 3; i++) {\n                if (!Number(playerInput[i]) && Number(playerInput[i]) !== 0) {\n                    result.push('From 0 to 255!')\n                } else if (playerInput[i] < 0 || playerInput[i] > 255) {\n                    result.push('From 0 to 255!')\n                } else {\n                    result.push(playerInput[i])\n                }\n            }\n        }\n\n        //HSL input\n        if (fromHslButton) {\n            if (playerInput[0] < 0 || playerInput[0] > 360 || !Number(playerInput[0])) {\n                result.push('From 0 to 360')\n            } else {\n                result.push(playerInput[0])\n            }\n            if (playerInput[1] < 0 || playerInput[1] > 100 || !Number(playerInput[1])) {\n                result.push('From 0 to 100')\n            } else {\n                result.push(playerInput[1])\n            }\n            if (playerInput[2] < 0 || playerInput[2] > 100 || !Number(playerInput[2])) {\n                result.push('From 0 to 100')\n            } else  {\n                result.push(playerInput[2])\n            }\n        }\n\n        //HEX input\n        if (fromHexButton) {\n            const validNumberInputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n            const validLetterInputs = ['A', 'B', 'C', 'D', 'E', 'F'];\n            for (let i = 0; i < 3; i++) {\n                if (playerInput[i].length !== 2) {\n                    result.push('From 00 to FF')\n                    continue;\n                }\n                if ((validNumberInputs.includes(Number(playerInput[i][0]))||\n                     validLetterInputs.includes(playerInput[i][0])) &&\n                    (validNumberInputs.includes(Number(playerInput[i][1])) ||\n                     validLetterInputs.includes(playerInput[i][1]))) {\n                    result.push(playerInput[i])\n                } else {\n                    result.push('From 00 to FF')\n                }\n            }\n        }\n        return result;\n    }\n\n    return (\n        <>\n            <LeftConvertPanel\n                fromRgbButton={fromRgbButton}\n                fromHslButton={fromHslButton}\n                fromHexButton={fromHexButton}\n                toRgbButton={toRgbButton}\n                toHslButton={toHslButton}\n                toHexButton={toHexButton}\n\n                fromTopLabel={fromTopLabel}\n                fromMiddleLabel={fromMiddleLabel}\n                fromBottomLabel={fromBottomLabel}\n                fromTopInput={fromTopInput}\n                fromMiddleInput={fromMiddleInput}\n                fromBottomInput={fromBottomInput}\n\n                toggleFromRgbButton={toggleFromRgbButton}\n                toggleFromHslButton={toggleFromHslButton}\n                toggleFromHexButton={toggleFromHexButton}\n                toggleToRgbButton={toggleToRgbButton}\n                toggleToHslButton={toggleToHslButton}\n                toggleToHexButton={toggleToHexButton}\n                playerSubmit={playerSubmit}\n            />\n            <RightConvertPanel\n                toTopLabel={toTopLabel}\n                toMiddleLabel={toMiddleLabel}\n                toBottomLabel={toBottomLabel}\n                toTopInput={toTopInput}\n                toMiddleInput={toMiddleInput}\n                toBottomInput={toBottomInput}\n\n                toggleCreateTriadic={values.toggleCreateTriadic}\n                toggleCreateAnalogous={values.toggleCreateAnalogous}\n                toggleCreatePastel={values.toggleCreatePastel}\n                toggleRepeatRender={values.toggleRepeatRender}\n            />\n        </>\n    )\n}\n\nexport default ConvertContainer;\n"]},"metadata":{},"sourceType":"module"}