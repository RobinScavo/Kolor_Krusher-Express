{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js\";\nimport React from 'react';\nimport { generateEasyArray, generateTriadicArray, generateAnalogousArray, generateGhostArray, generatePastelArray, generateCustomArray } from './PureFunctions';\nimport Backdrop from './Components/Backdrop/Backdrop';\nimport ColorContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport BattleInstructionModal from './Components/Modals/BattleInstructionModal';\nimport ConvertInstructionModal from './Components/Modals/ConvertInstructionModal';\nimport ScoringModal from './Components/Modals/ScoringModal';\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n  constructor(props) {\n    const battleArray = generateAnalogousArray();\n    super(props);\n\n    this.toggleMainModal = () => {\n      this.setState({\n        repeatRender: false,\n        createAnalogous: false,\n        MainModal: !this.state.MainModal,\n        round: 0,\n        coins: 0,\n        score: 0,\n        timer: 15\n      });\n    };\n\n    this.toggleLoginModal = () => this.setState({\n      loginModal: !this.state.loginModal\n    });\n\n    this.toggleBioModal = () => this.setState({\n      bioModal: !this.state.bioModal\n    });\n\n    this.togglePlayerPageModal = () => this.setState({\n      playerPageModal: !this.state.playerPageModal\n    });\n\n    this.toggleBattleInstructionModal = () => this.setState({\n      battleInstructionModal: !this.state.battleInstructionModal\n    });\n\n    this.toggleConvertInstructionModal = () => this.setState({\n      convertInstructionModal: !this.state.convertInstructionModal\n    });\n\n    this.toggleScoringModal = () => this.setState({\n      scoringModal: !this.state.scoringModal\n    });\n\n    this.toggleGameOn = () => this.setState({\n      gameOn: false\n    });\n\n    this.toggleWindowDisplay = () => this.setState({\n      windowDisplayed: !this.state.windowDisplayed\n    });\n\n    this.toggleCustomDisplay = () => this.setState({\n      customDisplayed: !this.state.customDisplayed\n    });\n\n    this.clearRounds = () => this.setState({\n      round: 0\n    });\n\n    this.toggleRepeatRender = () => {\n      if (this.state.repeatRender) {\n        this.setState({\n          createPastel: false,\n          createTriadic: false,\n          createAnalogous: false,\n          repeatRender: false\n        });\n      } else {\n        this.setState({\n          repeatRender: true\n        });\n      }\n    };\n\n    this.toggleCreateAnalogous = () => {\n      this.setState({\n        createAnalogous: true\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n\n        if (!this.state.repeatRender) {\n          this.setState({\n            createAnalogous: false\n          });\n        }\n      }, 1100);\n    };\n\n    this.toggleCreatePastel = () => {\n      this.setState({\n        createPastel: true\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n\n        if (!this.state.repeatRender) {\n          this.setState({\n            createPastel: false\n          });\n        }\n      }, 1100);\n    };\n\n    this.toggleCreateTriadic = () => {\n      this.setState({\n        createTriadic: true\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n\n        if (!this.state.repeatRender) {\n          this.setState({\n            createTriadic: false\n          });\n        }\n      }, 1100);\n    };\n\n    this.setCustomColor = custom => {\n      this.setState({\n        createCustom: true,\n        customColor: custom\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          customDisplayed: true,\n          createCustom: false\n        });\n      }, 1100);\n      setTimeout(() => {\n        this.setState({\n          customDisplayed: false\n        });\n      }, 3100);\n    };\n\n    this.toggleStartBattle = () => {\n      if (this.state.startConvert) this.toggleStartConvert();\n      this.setState({\n        startBattle: !this.state.startBattle\n      });\n    };\n\n    this.toggleStartConvert = () => {\n      if (this.state.startBattle) this.toggleStartBattle();\n      this.setState({\n        startConvert: !this.state.startConvert\n      });\n    };\n\n    this.startGame = () => {\n      this.clearBoard();\n      this.timeout = setTimeout(() => {\n        this.setState({\n          gameOn: true\n        });\n        this.updateColorArrayContext();\n      }, 1100);\n    };\n\n    this.removeCoin = () => {\n      let tempArray = [];\n\n      if (this.state.coinArray[0]) {\n        tempArray = [false, true, true];\n      } else if (this.state.coinArray[1]) {\n        tempArray = [false, false, true];\n      } else {\n        tempArray = [false, false, false];\n      }\n\n      this.setState({\n        coinArray: tempArray\n      });\n    };\n\n    this.correctGuess = () => {\n      let coinCount = this.state.coins;\n\n      if (this.state.startBattle) {\n        for (let coin of this.state.coinArray) {\n          if (coin) coinCount++;\n        }\n\n        this.setState({\n          gameOn: false\n        });\n        setTimeout(() => {\n          this.setState({\n            coins: coinCount\n          });\n        }, 2700);\n      }\n\n      this.clearBoard();\n\n      if (this.state.round < 6) {\n        setTimeout(() => {\n          this.updateColorArrayContext();\n        }, 1500);\n      } else {\n        this.setState({\n          gameOn: false,\n          startBattle: false\n        });\n        setTimeout(() => {\n          this.toggleScoringModal();\n        }, 2000);\n      }\n    };\n\n    this.newGame = () => {\n      this.setState({\n        round: 0,\n        coins: 0,\n        score: 0,\n        timer: 15,\n        coinArray: [true, true, true]\n      });\n      this.toggleStartBattle();\n      this.startGame();\n    };\n\n    this.clearBoard = () => {\n      let clearArray = [];\n\n      for (let i = 0; i < 6; i++) {\n        clearArray.push({\n          background: `radial-gradient(circle at 100px 100px, rgb(255, 255, 255, 0.1), #000)`\n        });\n      }\n\n      this.setState({\n        colorArray: clearArray\n      });\n    };\n\n    this.updateTimerContext = seconds => {\n      this.setState({\n        timer: seconds\n      });\n      setTimeout(() => {\n        this.setState({\n          score: this.state.score + seconds\n        });\n      }, 1700);\n    };\n\n    this.updateColorArrayContext = () => {\n      let randomSix = Math.floor(Math.random() * 6);\n      let targetArray = ['colorOne', 'colorTwo', 'colorThree', 'colorFour', 'colorFive', 'colorSix'];\n      let targetId = targetArray[randomSix];\n      let arr = [];\n      if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateGhostArray();\n      if (this.state.startConvert && this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateTriadicArray();\n      if (this.state.startConvert && this.state.createAnalogous && !this.state.createTriadic && !this.state.createPastel) arr = generateAnalogousArray();\n      if (this.state.startConvert && this.state.createPastel && !this.state.createTriadic && !this.state.createAnalogous) arr = generatePastelArray();\n      if (this.state.startConvert && this.state.createCustom) arr = generateCustomArray(this.state.customColor);\n\n      if (this.state.startBattle) {\n        this.state.round <= 2 ? arr = generateEasyArray() : arr = generateTriadicArray();\n      }\n\n      if (!this.state.startBattle && !this.state.startConvert) {\n        arr = generateAnalogousArray();\n      }\n\n      if (this.state.startBattle) {\n        //display target value\n        const targetColor = arr[randomSix];\n        const firstSlice = targetColor.background.slice(42);\n        let colorTarget = firstSlice.slice(0, firstSlice.length - 7);\n        this.setState({\n          coinArray: [true, true, true],\n          round: this.state.round + 1,\n          colorTargetId: targetId,\n          colorTarget: colorTarget,\n          gameOn: true\n        });\n      }\n\n      this.setState({\n        colorArray: arr\n      });\n\n      if (this.state.repeatRender) {\n        setTimeout(() => {\n          this.clearBoard();\n        }, 1100);\n        setTimeout(() => {\n          this.updateColorArrayContext();\n        }, 2200);\n      }\n    };\n\n    this.state = {\n      colorArray: battleArray,\n      colorTargetId: '',\n      colorTarget: null,\n      round: 0,\n      score: 0,\n      timer: 15,\n      coins: 0,\n      coinArray: [true, true, true],\n      gameOn: false,\n      windowDisplayed: false,\n      customDisplayed: false,\n      customColor: '255, 255, 255',\n      // onLogin: props.onLogin,\n      MainModal: false,\n      loginModal: false,\n      bioModal: false,\n      playerPageModal: false,\n      battleInstructionModal: false,\n      convertInstructionModal: false,\n      scoringModal: false,\n      repeatRender: true,\n      startBattle: false,\n      startConvert: false,\n      createTriadic: false,\n      createAnalogous: false,\n      createPastel: false,\n      createCustom: false,\n      toggleMainModal: this.toggleMainModal,\n      toggleLoginModal: this.toggleLoginModal,\n      toggleBioModal: this.toggleBioModal,\n      togglePlayerPageModal: this.togglePlayerPageModal,\n      toggleBattleInstructionModal: this.toggleBattleInstructionModal,\n      toggleConvertInstructionModal: this.toggleConvertInstructionModal,\n      toggleScoringModal: this.toggleScoringModal,\n      toggleWindowDisplay: this.toggleWindowDisplay,\n      toggleGameOn: this.toggleGameOn,\n      toggleStartBattle: this.toggleStartBattle,\n      toggleStartConvert: this.toggleStartConvert,\n      toggleRepeatRender: this.toggleRepeatRender,\n      toggleCreateTriadic: this.toggleCreateTriadic,\n      toggleCreateAnalogous: this.toggleCreateAnalogous,\n      toggleCreatePastel: this.toggleCreatePastel,\n      setCustomColor: this.setCustomColor,\n      startGame: this.startGame,\n      correctGuess: this.correctGuess,\n      updateTimer: this.updateTimerContext,\n      removeCoin: this.removeCoin,\n      clearRounds: this.clearRounds,\n      newGame: this.newGame\n    };\n  }\n\n  componentDidMount() {\n    this.toggleCreateAnalogous();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBoardDiv\",\n      value: this.state,\n      children: /*#__PURE__*/_jsxDEV(ColorContext.Provider, {\n        value: this.state,\n        children: /*#__PURE__*/_jsxDEV(ModalProvider, {\n          children: [/*#__PURE__*/_jsxDEV(Backdrop, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 25\n          }, this), this.state.MainModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MainModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 29\n          }, this), this.state.loginModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(LoginModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 29\n          }, this), this.state.bioModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MyBioModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 29\n          }, this), this.state.playerPageModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(PlayerPageModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 29\n          }, this), this.state.battleInstructionModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(BattleInstructionModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 29\n          }, this), this.state.convertInstructionModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(ConvertInstructionModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 29\n          }, this), this.state.scoringModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(ScoringModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Controller;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js"],"names":["React","generateEasyArray","generateTriadicArray","generateAnalogousArray","generateGhostArray","generatePastelArray","generateCustomArray","Backdrop","ColorContext","MainModal","LoginModal","PlayerPageModal","MyBioModal","BattleInstructionModal","ConvertInstructionModal","ScoringModal","Modal","ModalProvider","Controller","Component","constructor","props","battleArray","toggleMainModal","setState","repeatRender","createAnalogous","state","round","coins","score","timer","toggleLoginModal","loginModal","toggleBioModal","bioModal","togglePlayerPageModal","playerPageModal","toggleBattleInstructionModal","battleInstructionModal","toggleConvertInstructionModal","convertInstructionModal","toggleScoringModal","scoringModal","toggleGameOn","gameOn","toggleWindowDisplay","windowDisplayed","toggleCustomDisplay","customDisplayed","clearRounds","toggleRepeatRender","createPastel","createTriadic","toggleCreateAnalogous","clearBoard","setTimeout","updateColorArrayContext","toggleCreatePastel","toggleCreateTriadic","setCustomColor","custom","createCustom","customColor","toggleStartBattle","startConvert","toggleStartConvert","startBattle","startGame","timeout","removeCoin","tempArray","coinArray","correctGuess","coinCount","coin","newGame","clearArray","i","push","background","colorArray","updateTimerContext","seconds","randomSix","Math","floor","random","targetArray","targetId","arr","targetColor","firstSlice","slice","colorTarget","length","colorTargetId","updateTimer","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n    generateEasyArray,\n    generateTriadicArray,\n    generateAnalogousArray,\n    generateGhostArray,\n    generatePastelArray,\n    generateCustomArray,\n} from './PureFunctions';\n\nimport Backdrop from './Components/Backdrop/Backdrop'\nimport ColorContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport BattleInstructionModal from './Components/Modals/BattleInstructionModal'\nimport ConvertInstructionModal from './Components/Modals/ConvertInstructionModal'\nimport ScoringModal from './Components/Modals/ScoringModal'\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n    constructor (props) {\n        const battleArray = generateAnalogousArray();\n\n        super (props);\n        this.state = {\n            colorArray: battleArray,\n            colorTargetId: '',\n            colorTarget: null,\n            round: 0,\n            score: 0,\n            timer: 15,\n            coins: 0,\n            coinArray: [true, true, true],\n            gameOn: false,\n            windowDisplayed: false,\n            customDisplayed: false,\n            customColor: '255, 255, 255',\n\n            // onLogin: props.onLogin,\n            MainModal: false,\n            loginModal: false,\n            bioModal: false,\n            playerPageModal: false,\n            battleInstructionModal: false,\n            convertInstructionModal: false,\n            scoringModal: false,\n            repeatRender: true,\n\n            startBattle: false,\n            startConvert: false,\n\n            createTriadic: false,\n            createAnalogous: false,\n            createPastel: false,\n            createCustom: false,\n\n            toggleMainModal: this.toggleMainModal,\n            toggleLoginModal: this.toggleLoginModal,\n            toggleBioModal: this.toggleBioModal,\n            togglePlayerPageModal: this.togglePlayerPageModal,\n            toggleBattleInstructionModal: this.toggleBattleInstructionModal,\n            toggleConvertInstructionModal: this.toggleConvertInstructionModal,\n            toggleScoringModal: this.toggleScoringModal,\n\n            toggleWindowDisplay: this.toggleWindowDisplay,\n\n            toggleGameOn: this.toggleGameOn,\n            toggleStartBattle: this.toggleStartBattle,\n            toggleStartConvert: this.toggleStartConvert,\n            toggleRepeatRender: this.toggleRepeatRender,\n\n            toggleCreateTriadic: this.toggleCreateTriadic,\n            toggleCreateAnalogous: this.toggleCreateAnalogous,\n            toggleCreatePastel: this.toggleCreatePastel,\n            setCustomColor: this.setCustomColor,\n\n            startGame: this.startGame,\n            correctGuess: this.correctGuess,\n            updateTimer: this.updateTimerContext,\n            removeCoin: this.removeCoin,\n            clearRounds: this.clearRounds,\n            newGame: this.newGame\n        }\n    }\n\n    componentDidMount() {this.toggleCreateAnalogous()}\n\n    toggleMainModal = () => {\n        this.setState({\n            repeatRender: false,\n            createAnalogous: false,\n            MainModal: !this.state.MainModal,\n            round: 0,\n            coins: 0,\n            score: 0,\n            timer: 15\n        })\n    }\n\n    toggleLoginModal = () => this.setState({ loginModal: !this.state.loginModal })\n    toggleBioModal = () => this.setState({ bioModal: !this.state.bioModal })\n    togglePlayerPageModal = () => this.setState({ playerPageModal: !this.state.playerPageModal })\n    toggleBattleInstructionModal = () => this.setState({ battleInstructionModal: !this.state.battleInstructionModal })\n    toggleConvertInstructionModal = () => this.setState({ convertInstructionModal: !this.state.convertInstructionModal })\n    toggleScoringModal = () => this.setState({ scoringModal: !this.state.scoringModal});\n\n    toggleGameOn = () => this.setState({ gameOn: false })\n    toggleWindowDisplay = () => this.setState({ windowDisplayed: !this.state.windowDisplayed})\n    toggleCustomDisplay = () => this.setState({ customDisplayed: !this.state.customDisplayed})\n    clearRounds = () => this.setState({ round: 0})\n\n    toggleRepeatRender = () => {\n        if (this.state.repeatRender) {\n            this.setState({\n                createPastel: false,\n                createTriadic: false,\n                createAnalogous: false,\n                repeatRender: false\n            })\n        } else {\n            this.setState({\n                repeatRender: true\n            })\n        }\n    }\n\n    toggleCreateAnalogous = () => {\n        this.setState({ createAnalogous: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createAnalogous: false})\n            }\n        }, 1100)\n    }\n\n    toggleCreatePastel = () => {\n        this.setState({ createPastel: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createPastel: false})\n            }\n        }, 1100)\n    }\n\n    toggleCreateTriadic = () => {\n        this.setState({ createTriadic: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createTriadic: false});\n            }\n        }, 1100)\n    }\n\n    setCustomColor = (custom) => {\n        this.setState({\n            createCustom: true,\n            customColor: custom,\n        });\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({\n                customDisplayed: true,\n                createCustom: false\n            });\n        }, 1100)\n        setTimeout(() => {\n            this.setState({\n                customDisplayed: false\n            })\n        }, 3100)\n    }\n\n    toggleStartBattle = () => {\n        if (this.state.startConvert) this.toggleStartConvert();\n        this.setState({ startBattle: !this.state.startBattle });\n    }\n\n    toggleStartConvert = () => {\n        if (this.state.startBattle) this.toggleStartBattle();\n        this.setState({ startConvert: !this.state.startConvert});\n    }\n\n    startGame = () => {\n        this.clearBoard();\n        this.timeout = setTimeout(() => {\n            this.setState({ gameOn: true })\n            this.updateColorArrayContext()\n        }, 1100)\n    }\n\n    removeCoin = () => {\n        let tempArray = [];\n        if (this.state.coinArray[0]) {\n            tempArray = [false, true, true]\n        } else if (this.state.coinArray[1]) {\n            tempArray = [false, false, true]\n        } else {\n            tempArray = [false, false, false]\n        }\n        this.setState ({ coinArray: tempArray })\n    }\n\n    correctGuess = () => {\n        let coinCount = this.state.coins;\n\n        if (this.state.startBattle) {\n            for (let coin of this.state.coinArray) {\n                if (coin) coinCount++\n            }\n\n            this.setState({ gameOn: false });\n            setTimeout(() => {\n                this.setState({ coins: coinCount })\n            }, 2700)\n        }\n\n        this.clearBoard();\n        if (this.state.round < 6) {\n            setTimeout(() => {\n                this.updateColorArrayContext();\n            }, 1500)\n        } else {\n            this.setState({\n                gameOn: false,\n                startBattle: false\n            })\n            setTimeout(() => {\n                this.toggleScoringModal()\n            }, 2000)\n        }\n    }\n\n    newGame = () => {\n        this.setState({\n            round: 0,\n            coins: 0,\n            score: 0,\n            timer: 15,\n            coinArray: [true, true, true]\n        })\n        this.toggleStartBattle();\n        this.startGame();\n    }\n\n    clearBoard = () => {\n        let clearArray = []\n        for (let i = 0; i < 6; i++) {\n            clearArray.push({ background:\n                `radial-gradient(circle at 100px 100px, rgb(255, 255, 255, 0.1), #000)`\n            })\n        }\n        this.setState({\n            colorArray: clearArray,\n        })\n    }\n\n    updateTimerContext = (seconds) => {\n        this.setState({ timer: seconds })\n        setTimeout(() => {\n            this.setState({ score: this.state.score + seconds })\n        }, 1700)\n    }\n\n    updateColorArrayContext = () => {\n        let randomSix = Math.floor(Math.random() * 6)\n        let targetArray = [\n            'colorOne',\n            'colorTwo',\n            'colorThree',\n            'colorFour',\n            'colorFive',\n            'colorSix'\n        ]\n        let targetId = targetArray[randomSix];\n        let arr = [];\n\n        if (this.state.startConvert &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateGhostArray();\n\n        if (this.state.startConvert &&\n            this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateTriadicArray();\n\n        if (this.state.startConvert &&\n            this.state.createAnalogous &&\n            !this.state.createTriadic &&\n            !this.state.createPastel)\n                arr = generateAnalogousArray();\n\n        if (this.state.startConvert &&\n            this.state.createPastel &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous)\n                arr = generatePastelArray();\n\n        if (this.state.startConvert &&\n            this.state.createCustom)\n                arr = generateCustomArray(this.state.customColor);\n\n        if (this.state.startBattle) {\n            this.state.round <= 2\n                ? arr = generateEasyArray()\n                : arr = generateTriadicArray()\n        }\n\n\n        if (!this.state.startBattle &&\n            !this.state.startConvert) {\n                arr = generateAnalogousArray()\n        }\n\n\n        if (this.state.startBattle) {\n            //display target value\n            const targetColor = arr[randomSix]\n            const firstSlice = (targetColor.background.slice(42))\n            let colorTarget = (firstSlice.slice(0, firstSlice.length -7))\n\n            this.setState({\n                coinArray: [true, true, true],\n                round: this.state.round + 1,\n                colorTargetId: targetId,\n                colorTarget: colorTarget,\n                gameOn: true,\n            })\n        }\n\n        this.setState({\n            colorArray: arr,\n        });\n\n        if (this.state.repeatRender) {\n            setTimeout(() => {\n                this.clearBoard();\n            }, 1100)\n            setTimeout(() => {\n                this.updateColorArrayContext();\n            }, 2200)\n        }\n    }\n\n    render() {\n        return (\n            <div className='gameBoardDiv' value={this.state}>\n                <ColorContext.Provider value={this.state}>\n                    <ModalProvider>\n                        <Backdrop />\n\n                        {/* Modal Control */}\n                        {this.state.MainModal &&\n                            <Modal >\n                                <MainModal />\n                            </Modal>\n                        }\n                        {this.state.loginModal &&\n                            <Modal>\n                                <LoginModal />\n                            </Modal>\n                        }\n                        {this.state.bioModal &&\n                            <Modal>\n                                <MyBioModal />\n                            </Modal>\n                        }\n                        {this.state.playerPageModal &&\n                            <Modal>\n                                <PlayerPageModal />\n                            </Modal>\n                        }\n                        {this.state.battleInstructionModal &&\n                            <Modal>\n                                <BattleInstructionModal />\n                            </Modal>\n                        }\n                        {this.state.convertInstructionModal &&\n                            <Modal>\n                                <ConvertInstructionModal />\n                            </Modal>\n                        }\n                        {this.state.scoringModal &&\n                            <Modal >\n                                <ScoringModal />\n                            </Modal>\n                        }\n                    </ModalProvider>\n                </ColorContext.Provider>\n            </div>\n        )\n    }\n}\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}