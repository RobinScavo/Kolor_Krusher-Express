{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js\";\nimport React from 'react';\nimport { generateEasyArray, generateTriadicArray, generateAnalogousArray, generateGhostArray, generatePastelArray, generateCustomArray } from './PureFunctions';\nimport Backdrop from './Components/Backdrop/Backdrop';\nimport ColorContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport BattleInstructionModal from './Components/Modals/BattleInstructionModal';\nimport ConvertInstructionModal from './Components/Modals/ConvertInstructionModal';\nimport ScoringModal from './Components/Modals/ScoringModal';\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n  constructor(props) {\n    const battleArray = generateAnalogousArray();\n    super(props);\n\n    this.toggleMainModal = () => {\n      this.setState({\n        repeatRender: false\n      });\n      this.setState({\n        MainModal: !this.state.MainModal\n      });\n    };\n\n    this.toggleLoginModal = () => this.setState({\n      loginModal: !this.state.loginModal\n    });\n\n    this.toggleBioModal = () => this.setState({\n      bioModal: !this.state.bioModal\n    });\n\n    this.togglePlayerPageModal = () => this.setState({\n      playerPageModal: !this.state.playerPageModal\n    });\n\n    this.toggleBattleInstructionModal = () => this.setState({\n      battleInstructionModal: !this.state.battleInstructionModal\n    });\n\n    this.toggleConvertInstructionModal = () => this.setState({\n      convertInstructionModal: !this.state.convertInstructionModal\n    });\n\n    this.toggleScoringModal = () => this.setState({\n      scoringModal: !this.state.scoringModal\n    });\n\n    this.toggleGameOn = () => this.setState({\n      gameOn: false\n    });\n\n    this.toggleRepeatRender = () => this.setState({\n      repeatRender: !this.state.repeatRender\n    });\n\n    this.toggleWindowDisplay = () => this.setState({\n      windowDisplayed: !this.state.windowDisplayed\n    });\n\n    this.clearRounds = () => this.setState({\n      round: 0\n    });\n\n    this.toggleCreateAnalogous = () => {\n      this.setState({\n        createAnalogous: true\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n\n        if (!this.state.repeatRender) {\n          this.setState({\n            createAnalogous: false\n          });\n        }\n      }, 1100);\n    };\n\n    this.toggleCreatePastel = () => {\n      this.setState({\n        createPastel: true\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n\n        if (!this.state.repeatRender) {\n          this.setState({\n            createPastel: false\n          });\n        }\n      }, 1100);\n    };\n\n    this.toggleCreateTriadic = () => {\n      this.setState({\n        createTriadic: true\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n\n        if (!this.state.repeatRender) {\n          this.setState({\n            createTriadic: false\n          });\n        }\n      }, 1100);\n    };\n\n    this.setCustomColor = custom => {\n      this.setState({\n        createCustom: true,\n        customColor: custom\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createCustom: false\n        });\n      }, 1100);\n    };\n\n    this.toggleStartBattle = () => {\n      if (this.state.startConvert) this.toggleStartConvert();\n      this.setState({\n        startBattle: !this.state.startBattle\n      });\n    };\n\n    this.toggleStartConvert = () => {\n      if (this.state.startBattle) this.toggleStartBattle();\n      this.setState({\n        startConvert: !this.state.startConvert\n      });\n    };\n\n    this.startGame = () => {\n      this.clearBoard();\n      this.timeout = setTimeout(() => {\n        this.setState({\n          gameOn: true\n        });\n        this.updateColorArrayContext();\n      }, 1100);\n    };\n\n    this.removeCoin = () => {\n      let tempArray = [];\n\n      if (this.state.coinArray[0]) {\n        tempArray = [false, true, true];\n      } else if (this.state.coinArray[1]) {\n        tempArray = [false, false, true];\n      } else {\n        tempArray = [false, false, false];\n      }\n\n      this.setState({\n        coinArray: tempArray\n      });\n    };\n\n    this.correctGuess = () => {\n      let coinCount = this.state.coins;\n\n      if (this.state.startBattle) {\n        for (let coin of this.state.coinArray) {\n          if (coin) coinCount++;\n        }\n\n        this.setState({\n          gameOn: false,\n          coins: coinCount\n        });\n      }\n\n      this.clearBoard();\n\n      if (this.state.round < 6) {\n        setTimeout(() => {\n          this.updateColorArrayContext();\n        }, 1500);\n      } else {\n        this.setState({\n          gameOn: false,\n          startBattle: false\n        });\n        setTimeout(() => {\n          this.toggleScoringModal();\n        }, 2000);\n      }\n    };\n\n    this.newGame = () => {\n      this.setState({\n        round: 0,\n        coins: 0,\n        score: 0,\n        timer: 15\n      });\n      this.toggleStartBattle();\n      this.startGame();\n    };\n\n    this.clearBoard = () => {\n      let clearArray = [];\n\n      for (let i = 0; i < 6; i++) {\n        clearArray.push({\n          background: `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n        });\n      }\n\n      this.setState({\n        colorArray: clearArray\n      });\n    };\n\n    this.updateTimerContext = seconds => {\n      this.setState({\n        timer: seconds,\n        score: this.state.score + seconds\n      });\n    };\n\n    this.updateColorArrayContext = () => {\n      let randomSix = Math.floor(Math.random() * 6);\n      let targetArray = ['colorOne', 'colorTwo', 'colorThree', 'colorFour', 'colorFive', 'colorSix'];\n      let targetId = targetArray[randomSix];\n      let arr = [];\n      if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateGhostArray();\n      if (this.state.startConvert && this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateTriadicArray();\n      if (this.state.startConvert && this.state.createAnalogous && !this.state.createTriadic && !this.state.createPastel) arr = generateAnalogousArray();\n      if (this.state.startConvert && this.state.createPastel && !this.state.createTriadic && !this.state.createAnalogous) arr = generatePastelArray();\n      if (this.state.startConvert && this.state.createCustom) arr = generateCustomArray(this.state.customColor);\n\n      if (this.state.startBattle) {\n        this.state.round <= 2 ? arr = generateEasyArray() : arr = generateTriadicArray();\n      } //display target value\n\n\n      const targetColor = arr[randomSix];\n      const firstSlice = targetColor.background.slice(42);\n      let colorTarget = firstSlice.slice(0, firstSlice.length - 7);\n\n      if (this.state.startBattle) {\n        this.setState({\n          coinArray: [true, true, true],\n          round: this.state.round + 1,\n          colorTargetId: targetId,\n          colorTarget: colorTarget\n        });\n      }\n\n      this.setState({\n        colorArray: arr,\n        gameOn: true\n      });\n\n      if (this.state.repeatRender) {\n        setTimeout(() => {\n          this.clearBoard();\n        }, 1100);\n        setTimeout(() => {\n          this.updateColorArrayContext();\n        }, 2200);\n      }\n    };\n\n    this.state = {\n      colorArray: battleArray,\n      colorTargetId: '',\n      colorTarget: null,\n      round: 0,\n      score: 0,\n      timer: 15,\n      coins: 0,\n      coinArray: [true, true, true],\n      gameOn: false,\n      windowDisplayed: false,\n      customColor: '255, 255, 255',\n      MainModal: false,\n      loginModal: false,\n      bioModal: false,\n      playerPageModal: false,\n      battleInstructionModal: false,\n      convertInstructionModal: false,\n      scoringModal: false,\n      repeatRender: true,\n      startBattle: false,\n      startConvert: false,\n      createTriadic: false,\n      createAnalogous: false,\n      createPastel: false,\n      createCustom: false,\n      toggleMainModal: this.toggleMainModal,\n      toggleLoginModal: this.toggleLoginModal,\n      toggleBioModal: this.toggleBioModal,\n      togglePlayerPageModal: this.togglePlayerPageModal,\n      toggleBattleInstructionModal: this.toggleBattleInstructionModal,\n      toggleConvertInstructionModal: this.toggleConvertInstructionModal,\n      toggleScoringModal: this.toggleScoringModal,\n      toggleWindowDisplay: this.toggleWindowDisplay,\n      toggleGameOn: this.toggleGameOn,\n      toggleStartBattle: this.toggleStartBattle,\n      toggleStartConvert: this.toggleStartConvert,\n      toggleRepeatRender: this.toggleRepeatRender,\n      toggleCreateTriadic: this.toggleCreateTriadic,\n      toggleCreateAnalogous: this.toggleCreateAnalogous,\n      toggleCreatePastel: this.toggleCreatePastel,\n      setCustomColor: this.setCustomColor,\n      startGame: this.startGame,\n      correctGuess: this.correctGuess,\n      updateTimer: this.updateTimerContext,\n      removeCoin: this.removeCoin,\n      clearRounds: this.clearRounds,\n      newGame: this.newGame\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBoardDiv\",\n      value: this.state,\n      children: /*#__PURE__*/_jsxDEV(ColorContext.Provider, {\n        value: this.state,\n        children: /*#__PURE__*/_jsxDEV(ModalProvider, {\n          children: [/*#__PURE__*/_jsxDEV(Backdrop, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 25\n          }, this), this.state.MainModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MainModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 29\n          }, this), this.state.loginModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(LoginModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 29\n          }, this), this.state.bioModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MyBioModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 29\n          }, this), this.state.playerPageModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(PlayerPageModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 29\n          }, this), this.state.battleInstructionModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(BattleInstructionModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 29\n          }, this), this.state.convertInstructionModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(ConvertInstructionModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 29\n          }, this), this.state.scoringModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(ScoringModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Controller;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js"],"names":["React","generateEasyArray","generateTriadicArray","generateAnalogousArray","generateGhostArray","generatePastelArray","generateCustomArray","Backdrop","ColorContext","MainModal","LoginModal","PlayerPageModal","MyBioModal","BattleInstructionModal","ConvertInstructionModal","ScoringModal","Modal","ModalProvider","Controller","Component","constructor","props","battleArray","toggleMainModal","setState","repeatRender","state","toggleLoginModal","loginModal","toggleBioModal","bioModal","togglePlayerPageModal","playerPageModal","toggleBattleInstructionModal","battleInstructionModal","toggleConvertInstructionModal","convertInstructionModal","toggleScoringModal","scoringModal","toggleGameOn","gameOn","toggleRepeatRender","toggleWindowDisplay","windowDisplayed","clearRounds","round","toggleCreateAnalogous","createAnalogous","clearBoard","setTimeout","updateColorArrayContext","toggleCreatePastel","createPastel","toggleCreateTriadic","createTriadic","setCustomColor","custom","createCustom","customColor","toggleStartBattle","startConvert","toggleStartConvert","startBattle","startGame","timeout","removeCoin","tempArray","coinArray","correctGuess","coinCount","coins","coin","newGame","score","timer","clearArray","i","push","background","colorArray","updateTimerContext","seconds","randomSix","Math","floor","random","targetArray","targetId","arr","targetColor","firstSlice","slice","colorTarget","length","colorTargetId","updateTimer","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n    generateEasyArray,\n    generateTriadicArray,\n    generateAnalogousArray,\n    generateGhostArray,\n    generatePastelArray,\n    generateCustomArray,\n} from './PureFunctions';\n\nimport Backdrop from './Components/Backdrop/Backdrop'\nimport ColorContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport BattleInstructionModal from './Components/Modals/BattleInstructionModal'\nimport ConvertInstructionModal from './Components/Modals/ConvertInstructionModal'\nimport ScoringModal from './Components/Modals/ScoringModal'\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n    constructor (props) {\n        const battleArray = generateAnalogousArray();\n\n        super (props);\n        this.state = {\n            colorArray: battleArray,\n            colorTargetId: '',\n            colorTarget: null,\n            round: 0,\n            score: 0,\n            timer: 15,\n            coins: 0,\n            coinArray: [true, true, true],\n            gameOn: false,\n            windowDisplayed: false,\n            customColor: '255, 255, 255',\n\n            MainModal: false,\n            loginModal: false,\n            bioModal: false,\n            playerPageModal: false,\n            battleInstructionModal: false,\n            convertInstructionModal: false,\n            scoringModal: false,\n            repeatRender: true,\n\n            startBattle: false,\n            startConvert: false,\n\n            createTriadic: false,\n            createAnalogous: false,\n            createPastel: false,\n            createCustom: false,\n\n            toggleMainModal: this.toggleMainModal,\n            toggleLoginModal: this.toggleLoginModal,\n            toggleBioModal: this.toggleBioModal,\n            togglePlayerPageModal: this.togglePlayerPageModal,\n            toggleBattleInstructionModal: this.toggleBattleInstructionModal,\n            toggleConvertInstructionModal: this.toggleConvertInstructionModal,\n            toggleScoringModal: this.toggleScoringModal,\n\n            toggleWindowDisplay: this.toggleWindowDisplay,\n\n            toggleGameOn: this.toggleGameOn,\n            toggleStartBattle: this.toggleStartBattle,\n            toggleStartConvert: this.toggleStartConvert,\n            toggleRepeatRender: this.toggleRepeatRender,\n\n            toggleCreateTriadic: this.toggleCreateTriadic,\n            toggleCreateAnalogous: this.toggleCreateAnalogous,\n            toggleCreatePastel: this.toggleCreatePastel,\n            setCustomColor: this.setCustomColor,\n\n            startGame: this.startGame,\n            correctGuess: this.correctGuess,\n            updateTimer: this.updateTimerContext,\n            removeCoin: this.removeCoin,\n            clearRounds: this.clearRounds,\n            newGame: this.newGame\n        }\n    }\n\n    toggleMainModal = () => {\n        this.setState({ repeatRender: false })\n        this.setState({ MainModal: !this.state.MainModal })\n    }\n    toggleLoginModal = () => this.setState({ loginModal: !this.state.loginModal })\n    toggleBioModal = () => this.setState({ bioModal: !this.state.bioModal })\n    togglePlayerPageModal = () => this.setState({ playerPageModal: !this.state.playerPageModal })\n    toggleBattleInstructionModal = () => this.setState({ battleInstructionModal: !this.state.battleInstructionModal })\n    toggleConvertInstructionModal = () => this.setState({ convertInstructionModal: !this.state.convertInstructionModal })\n    toggleScoringModal = () => this.setState({ scoringModal: !this.state.scoringModal});\n\n    toggleGameOn = () => this.setState({ gameOn: false })\n    toggleRepeatRender = () => this.setState({ repeatRender: !this.state.repeatRender })\n    toggleWindowDisplay = () => this.setState({ windowDisplayed: !this.state.windowDisplayed})\n    clearRounds = () => this.setState({ round: 0})\n\n    toggleCreateAnalogous = () => {\n        this.setState({ createAnalogous: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createAnalogous: false})\n            }\n        }, 1100)\n    }\n\n    toggleCreatePastel = () => {\n        this.setState({ createPastel: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createPastel: false})\n            }\n        }, 1100)\n    }\n\n    toggleCreateTriadic = () => {\n        this.setState({ createTriadic: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createTriadic: false});\n            }\n        }, 1100)\n    }\n\n    setCustomColor = (custom) => {\n        this.setState({\n            createCustom: true,\n            customColor: custom,\n        });\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createCustom: false});\n        }, 1100)\n    }\n\n    toggleStartBattle = () => {\n        if (this.state.startConvert) this.toggleStartConvert();\n        this.setState({ startBattle: !this.state.startBattle });\n    }\n\n    toggleStartConvert = () => {\n        if (this.state.startBattle) this.toggleStartBattle();\n        this.setState({ startConvert: !this.state.startConvert});\n    }\n\n    startGame = () => {\n        this.clearBoard();\n        this.timeout = setTimeout(() => {\n            this.setState({ gameOn: true })\n            this.updateColorArrayContext()\n        }, 1100)\n    }\n\n    removeCoin = () => {\n        let tempArray = [];\n        if (this.state.coinArray[0]) {\n            tempArray = [false, true, true]\n        } else if (this.state.coinArray[1]) {\n            tempArray = [false, false, true]\n        } else {\n            tempArray = [false, false, false]\n        }\n        this.setState ({ coinArray: tempArray })\n    }\n\n    correctGuess = () => {\n        let coinCount = this.state.coins;\n\n        if (this.state.startBattle) {\n            for (let coin of this.state.coinArray) {\n                if (coin) coinCount++\n            }\n\n            this.setState({\n                gameOn: false,\n                coins: coinCount,\n             });\n        }\n\n        this.clearBoard();\n        if (this.state.round < 6) {\n            setTimeout(() => {\n                this.updateColorArrayContext();\n            }, 1500)\n        } else {\n            this.setState({\n                gameOn: false,\n                startBattle: false\n            })\n            setTimeout(() => {\n                this.toggleScoringModal()\n            }, 2000)\n        }\n    }\n\n    newGame = () => {\n        this.setState({\n            round: 0,\n            coins: 0,\n            score: 0,\n            timer: 15,\n        })\n        this.toggleStartBattle();\n        this.startGame();\n    }\n\n    clearBoard = () => {\n        let clearArray = []\n        for (let i = 0; i < 6; i++) {\n            clearArray.push({ background:\n                `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n            })\n        }\n        this.setState({\n            colorArray: clearArray,\n        })\n    }\n\n    updateTimerContext = (seconds) => {\n        this.setState({\n            timer: seconds,\n            score: this.state.score + seconds,\n        })\n    }\n\n    updateColorArrayContext = () => {\n        let randomSix = Math.floor(Math.random() * 6)\n        let targetArray = [\n            'colorOne',\n            'colorTwo',\n            'colorThree',\n            'colorFour',\n            'colorFive',\n            'colorSix'\n        ]\n        let targetId = targetArray[randomSix];\n        let arr = [];\n\n        if (this.state.startConvert &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateGhostArray();\n\n        if (this.state.startConvert &&\n            this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateTriadicArray();\n\n        if (this.state.startConvert &&\n            this.state.createAnalogous &&\n            !this.state.createTriadic &&\n            !this.state.createPastel)\n                arr = generateAnalogousArray();\n\n        if (this.state.startConvert &&\n            this.state.createPastel &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous)\n                arr = generatePastelArray();\n\n        if (this.state.startConvert &&\n            this.state.createCustom)\n                arr = generateCustomArray(this.state.customColor);\n\n        if (this.state.startBattle) {\n            this.state.round <= 2\n                ? arr = generateEasyArray()\n                : arr = generateTriadicArray()\n            }\n\n        //display target value\n        const targetColor = arr[randomSix]\n        const firstSlice = (targetColor.background.slice(42))\n        let colorTarget = (firstSlice.slice(0, firstSlice.length -7))\n\n        if (this.state.startBattle) {\n            this.setState({\n                coinArray: [true, true, true],\n                round: this.state.round + 1,\n                colorTargetId: targetId,\n                colorTarget: colorTarget,\n            })\n        }\n\n        this.setState({\n            colorArray: arr,\n            gameOn: true,\n        });\n\n        if (this.state.repeatRender) {\n            setTimeout(() => {\n                this.clearBoard();\n            }, 1100)\n            setTimeout(() => {\n                this.updateColorArrayContext();\n            }, 2200)\n        }\n    }\n\n    render() {\n        return (\n            <div className='gameBoardDiv' value={this.state}>\n                <ColorContext.Provider value={this.state}>\n                    <ModalProvider>\n                        <Backdrop />\n\n                        {/* Modal Control */}\n                        {this.state.MainModal &&\n                            <Modal >\n                                <MainModal />\n                            </Modal>\n                        }\n                        {this.state.loginModal &&\n                            <Modal>\n                                <LoginModal />\n                            </Modal>\n                        }\n                        {this.state.bioModal &&\n                            <Modal>\n                                <MyBioModal />\n                            </Modal>\n                        }\n                        {this.state.playerPageModal &&\n                            <Modal>\n                                <PlayerPageModal />\n                            </Modal>\n                        }\n                        {this.state.battleInstructionModal &&\n                            <Modal>\n                                <BattleInstructionModal />\n                            </Modal>\n                        }\n                        {this.state.convertInstructionModal &&\n                            <Modal>\n                                <ConvertInstructionModal />\n                            </Modal>\n                        }\n                        {this.state.scoringModal &&\n                            <Modal >\n                                <ScoringModal />\n                            </Modal>\n                        }\n                    </ModalProvider>\n                </ColorContext.Provider>\n            </div>\n        )\n    }\n}\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}