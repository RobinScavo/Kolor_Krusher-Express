{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js\";\nimport React from 'react';\nimport { generateEasyColors, HSLtoRGB, generateBattleColors // generateZenColors,\n, generateGhostColors, generatePastelColors, generateCustomColors } from './PureFunctions';\nimport Backdrop from './Components/Backdrop/Backdrop';\nimport KarenContext from './KarenContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n  constructor(props) {\n    const battleArray = generateBattleColors();\n    super(props);\n\n    this.toggleMainModal = () => this.setState({\n      MainModal: !this.state.MainModal\n    });\n\n    this.toggleLoginModal = () => this.setState({\n      loginModal: !this.state.loginModal\n    });\n\n    this.toggleBioModal = () => this.setState({\n      bioModal: !this.state.bioModal\n    });\n\n    this.togglePlayerPageModal = () => this.setState({\n      playerPageModal: !this.state.playerPageModal\n    });\n\n    this.toggleGameOn = () => this.setState({\n      gameOn: false\n    });\n\n    this.toggleWindowDisplay = () => this.setState({\n      windowDisplayed: !this.state.windowDisplayed\n    });\n\n    this.clearRounds = () => this.setState({\n      round: 0\n    });\n\n    this.toggleCreateAnalogous = () => {\n      if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createAnalogous: true\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createAnalogous: false\n        });\n      }, delayOrNot);\n    };\n\n    this.toggleCreatePastel = () => {\n      if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createPastel: true\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createPastel: false\n        });\n      }, delayOrNot);\n    };\n\n    this.toggleCreateTriadic = () => {\n      if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createTriadic: true\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createTriadic: false\n        });\n      }, delayOrNot);\n    };\n\n    this.setCustomColor = custom => {\n      // if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createCustom: true,\n        customColor: custom\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createCustom: false\n        });\n      }, delayOrNot);\n    };\n\n    this.toggleStartBattle = () => {\n      // if (this.state.startZen) this.toggleStartZen();\n      if (this.state.startConvert) this.toggleStartConvert();\n      this.setState({\n        startBattle: !this.state.startBattle\n      });\n    };\n\n    this.toggleStartConvert = () => {\n      // if (this.state.startZen) this.toggleStartZen();\n      if (this.state.startBattle) this.toggleStartBattle();\n      this.setState({\n        startConvert: !this.state.startConvert\n      });\n    };\n\n    this.startGame = () => {\n      this.clearBoard();\n      this.timeout = setTimeout(() => {\n        this.setState({\n          gameOn: true\n        });\n        this.updateColorArrayContext();\n      }, 1100);\n    };\n\n    this.removeCoin = () => {\n      let tempArray = [];\n\n      if (this.state.coinArray[0]) {\n        tempArray = [false, true, true];\n      } else if (this.state.coinArray[1]) {\n        tempArray = [false, false, true];\n      } else {\n        tempArray = [false, false, false];\n      }\n\n      this.setState({\n        coinArray: tempArray\n      });\n    };\n\n    this.correctGuess = () => {\n      let coinCount = this.state.coins;\n\n      if (this.state.startBattle) {\n        for (let coin of this.state.coinArray) {\n          if (coin) coinCount++;\n        }\n\n        this.setState({\n          gameOn: false,\n          coins: coinCount\n        });\n      } // else if (this.state.startZen) {\n      //     this.setState({\n      //         kernelVisibility: true,\n      //         gameOn: false,\n      //     })\n      //     setTimeout(() => {\n      //         this.toggleKernelDisplay();\n      //     }, 4000)\n      // }\n\n\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n      }, 1500);\n    };\n\n    this.clearBoard = () => {\n      let clearArray = [];\n\n      for (let i = 0; i < 6; i++) {\n        clearArray.push({\n          background: `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n        });\n      }\n\n      this.setState({\n        colorArray: clearArray\n      });\n    };\n\n    this.updateTimerContext = seconds => {\n      this.setState({\n        timer: seconds,\n        score: this.state.score + seconds\n      });\n    };\n\n    this.updateColorArrayContext = () => {\n      console.log('update');\n      let randomSix = Math.floor(Math.random() * 6);\n      let targetArray = ['colorOne', 'colorTwo', 'colorThree', 'colorFour', 'colorFive', 'colorSix'];\n      let targetId = targetArray[randomSix];\n      let arr = []; // if (this.state.startZen) arr = generateZenColors();\n\n      if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateGhostColors();\n      if (this.state.startConvert && this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateBattleColors(); // if (this.state.startConvert && !this.state.createTriadic && this.state.createAnalogous && !this.state.createPastel)\n      //     arr = generateZenColors();\n\n      if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && this.state.createPastel) arr = generatePastelColors();\n      if (this.state.startConvert && this.state.createCustom) arr = generateCustomColors(this.state.customColor);\n\n      if (this.state.startBattle) {\n        this.state.round <= 2 ? arr = generateEasyColors() : arr = generateBattleColors();\n      }\n\n      const targetColor = arr[randomSix];\n      const firstSlice = targetColor.background.slice(42);\n      let colorTarget = firstSlice.slice(0, firstSlice.length - 7);\n      colorTarget = colorTarget.split(',');\n      let first = colorTarget[0];\n      let second = colorTarget[1];\n      let third = colorTarget[2];\n      let combined = `${first.slice(1)}, ${second.slice(0, second.length - 1)}, ${third.slice(0, third.length - 2)}`;\n      let converted = HSLtoRGB(combined);\n      console.log('combined:', combined, '   converted:', converted, 'target color', targetColor);\n      this.setState({\n        coinArray: [true, true, true],\n        colorArray: arr,\n        round: this.state.round + 1,\n        colorTargetId: targetId,\n        gameOn: true,\n        colorTarget: arr // colorTarget: converted,\n\n      });\n    };\n\n    this.state = {\n      colorArray: battleArray,\n      colorTargetId: '',\n      colorTarget: null,\n      round: 0,\n      score: 0,\n      timer: 15,\n      coins: 0,\n      coinArray: [true, true, true],\n      gameOn: false,\n      // zenKernel: '',\n      // kernelVisibility: false,\n      // zenObject: zenObject,\n      // mutableZen: zenObject,\n      windowDisplayed: false,\n      customColor: '255, 255, 255',\n      MainModal: false,\n      loginModal: false,\n      bioModal: false,\n      playerPageModal: false,\n      // startZen: false,\n      startBattle: false,\n      startConvert: false,\n      createTriadic: false,\n      createAnalogous: false,\n      createPastel: false,\n      createCustom: false,\n      toggleMainModal: this.toggleMainModal,\n      toggleLoginModal: this.toggleLoginModal,\n      toggleBioModal: this.toggleBioModal,\n      togglePlayerPageModal: this.togglePlayerPageModal,\n      toggleWindowDisplay: this.toggleWindowDisplay,\n      toggleGameOn: this.toggleGameOn,\n      // toggleStartZen: this.toggleStartZen,\n      toggleStartBattle: this.toggleStartBattle,\n      toggleStartConvert: this.toggleStartConvert,\n      toggleCreateTriadic: this.toggleCreateTriadic,\n      toggleCreateAnalogous: this.toggleCreateAnalogous,\n      toggleCreatePastel: this.toggleCreatePastel,\n      setCustomColor: this.setCustomColor,\n      startGame: this.startGame,\n      correctGuess: this.correctGuess,\n      updateTimer: this.updateTimerContext,\n      removeCoin: this.removeCoin,\n      clearRounds: this.clearRounds\n    };\n  }\n\n  // toggleKernelDisplay = () => {\n  //     let randomKernel = '';\n  //     if (Object.keys(this.state.mutableZen).length > 0) {\n  //         let kernelArray = Object.keys(this.state.mutableZen);\n  //         let randomNum = Math.random();\n  //         let kernelIndex = Math.floor(randomNum * kernelArray.length)\n  //         let randomKey = kernelArray[kernelIndex];\n  //         randomKernel = this.state.mutableZen[randomKey]\n  //         delete this.state.mutableZen[randomKey]\n  //     };\n  //     this.setState({\n  //         zenKernel: randomKernel,\n  //         kernelVisibility: false,\n  //     })\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBoardDiv\",\n      value: this.state,\n      children: /*#__PURE__*/_jsxDEV(KarenContext.Provider, {\n        value: this.state,\n        children: /*#__PURE__*/_jsxDEV(ModalProvider, {\n          children: [/*#__PURE__*/_jsxDEV(Backdrop, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 25\n          }, this), this.state.MainModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MainModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 29\n          }, this), this.state.loginModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(LoginModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 29\n          }, this), this.state.bioModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MyBioModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 29\n          }, this), this.state.playerPageModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(PlayerPageModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Controller;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js"],"names":["React","generateEasyColors","HSLtoRGB","generateBattleColors","generateGhostColors","generatePastelColors","generateCustomColors","Backdrop","KarenContext","MainModal","LoginModal","PlayerPageModal","MyBioModal","Modal","ModalProvider","Controller","Component","constructor","props","battleArray","toggleMainModal","setState","state","toggleLoginModal","loginModal","toggleBioModal","bioModal","togglePlayerPageModal","playerPageModal","toggleGameOn","gameOn","toggleWindowDisplay","windowDisplayed","clearRounds","round","toggleCreateAnalogous","createAnalogous","createPastel","createTriadic","delayOrNot","colorArray","class","clearBoard","setTimeout","updateColorArrayContext","toggleCreatePastel","toggleCreateTriadic","setCustomColor","custom","createCustom","customColor","toggleStartBattle","startConvert","toggleStartConvert","startBattle","startGame","timeout","removeCoin","tempArray","coinArray","correctGuess","coinCount","coins","coin","clearArray","i","push","background","updateTimerContext","seconds","timer","score","console","log","randomSix","Math","floor","random","targetArray","targetId","arr","targetColor","firstSlice","slice","colorTarget","length","split","first","second","third","combined","converted","colorTargetId","updateTimer","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,kBADJ,EAEIC,QAFJ,EAGIC,oBAHJ,CAII;AAJJ,EAKIC,mBALJ,EAMIC,oBANJ,EAOIC,oBAPJ,QAQO,iBARP;AAUA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,eAAP,MAA4B,qCAA5B;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SAASC,aAAT,QAA8B,sBAA9B;;AAEA,MAAMC,UAAN,SAAyBf,KAAK,CAACgB,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMC,WAAW,GAAGhB,oBAAoB,EAAxC;AAEA,UAAOe,KAAP;;AAHgB,SA2DpBE,eA3DoB,GA2DF,MAAM,KAAKC,QAAL,CAAc;AAAEZ,MAAAA,SAAS,EAAE,CAAC,KAAKa,KAAL,CAAWb;AAAzB,KAAd,CA3DJ;;AAAA,SA4DpBc,gBA5DoB,GA4DD,MAAM,KAAKF,QAAL,CAAc;AAAEG,MAAAA,UAAU,EAAE,CAAC,KAAKF,KAAL,CAAWE;AAA1B,KAAd,CA5DL;;AAAA,SA6DpBC,cA7DoB,GA6DH,MAAM,KAAKJ,QAAL,CAAc;AAAEK,MAAAA,QAAQ,EAAE,CAAC,KAAKJ,KAAL,CAAWI;AAAxB,KAAd,CA7DH;;AAAA,SA8DpBC,qBA9DoB,GA8DI,MAAM,KAAKN,QAAL,CAAc;AAAEO,MAAAA,eAAe,EAAE,CAAC,KAAKN,KAAL,CAAWM;AAA/B,KAAd,CA9DV;;AAAA,SA+DpBC,YA/DoB,GA+DL,MAAM,KAAKR,QAAL,CAAc;AAAES,MAAAA,MAAM,EAAE;AAAV,KAAd,CA/DD;;AAAA,SAgEpBC,mBAhEoB,GAgEE,MAAM,KAAKV,QAAL,CAAc;AAAEW,MAAAA,eAAe,EAAE,CAAC,KAAKV,KAAL,CAAWU;AAA/B,KAAd,CAhER;;AAAA,SAiEpBC,WAjEoB,GAiEN,MAAM,KAAKZ,QAAL,CAAc;AAAEa,MAAAA,KAAK,EAAE;AAAT,KAAd,CAjEA;;AAAA,SAmEpBC,qBAnEoB,GAmEI,MAAM;AAC1B,UAAI,KAAKb,KAAL,CAAWc,eAAX,IAA8B,KAAKd,KAAL,CAAWe,YAAzC,IAAyD,KAAKf,KAAL,CAAWgB,aAAxE,EAAuF;AACvF,WAAKjB,QAAL,CAAc;AAAEe,QAAAA,eAAe,EAAE;AAAnB,OAAd;AACA,UAAIG,UAAU,GAAG,CAAjB;AACC,WAAKjB,KAAL,CAAWkB,UAAX,CAAsB,CAAtB,EAAyBC,KAAzB,KAAmC,SAApC,GACMF,UAAU,GAAG,CADnB,GAEMA,UAAU,GAAG,IAFnB;AAGA,WAAKG,UAAL;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,uBAAL;AACA,aAAKvB,QAAL,CAAc;AAAEe,UAAAA,eAAe,EAAE;AAAnB,SAAd;AACH,OAHS,EAGPG,UAHO,CAAV;AAIH,KA/EmB;;AAAA,SAiFpBM,kBAjFoB,GAiFC,MAAM;AACvB,UAAI,KAAKvB,KAAL,CAAWc,eAAX,IAA8B,KAAKd,KAAL,CAAWe,YAAzC,IAAyD,KAAKf,KAAL,CAAWgB,aAAxE,EAAuF;AACvF,WAAKjB,QAAL,CAAc;AAAEgB,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACA,UAAIE,UAAU,GAAG,CAAjB;AACC,WAAKjB,KAAL,CAAWkB,UAAX,CAAsB,CAAtB,EAAyBC,KAAzB,KAAmC,SAApC,GACMF,UAAU,GAAG,CADnB,GAEMA,UAAU,GAAG,IAFnB;AAGA,WAAKG,UAAL;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,uBAAL;AACA,aAAKvB,QAAL,CAAc;AAAEgB,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACH,OAHS,EAGPE,UAHO,CAAV;AAIH,KA7FmB;;AAAA,SA+FpBO,mBA/FoB,GA+FE,MAAM;AACxB,UAAI,KAAKxB,KAAL,CAAWc,eAAX,IAA8B,KAAKd,KAAL,CAAWe,YAAzC,IAAyD,KAAKf,KAAL,CAAWgB,aAAxE,EAAuF;AACvF,WAAKjB,QAAL,CAAc;AAAEiB,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACA,UAAIC,UAAU,GAAG,CAAjB;AACC,WAAKjB,KAAL,CAAWkB,UAAX,CAAsB,CAAtB,EAAyBC,KAAzB,KAAmC,SAApC,GACMF,UAAU,GAAG,CADnB,GAEMA,UAAU,GAAG,IAFnB;AAGA,WAAKG,UAAL;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,uBAAL;AACA,aAAKvB,QAAL,CAAc;AAAEiB,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACH,OAHS,EAGPC,UAHO,CAAV;AAIH,KA3GmB;;AAAA,SA6GpBQ,cA7GoB,GA6GFC,MAAD,IAAY;AACzB;AACA,WAAK3B,QAAL,CAAc;AACV4B,QAAAA,YAAY,EAAE,IADJ;AAEVC,QAAAA,WAAW,EAAEF;AAFH,OAAd;AAIA,UAAIT,UAAU,GAAG,CAAjB;AACC,WAAKjB,KAAL,CAAWkB,UAAX,CAAsB,CAAtB,EAAyBC,KAAzB,KAAmC,SAApC,GACMF,UAAU,GAAG,CADnB,GAEMA,UAAU,GAAG,IAFnB;AAGA,WAAKG,UAAL;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,uBAAL;AACA,aAAKvB,QAAL,CAAc;AAAE4B,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACH,OAHS,EAGPV,UAHO,CAAV;AAIH,KA5HmB;;AAAA,SAmIpBY,iBAnIoB,GAmIA,MAAM;AACtB;AACA,UAAI,KAAK7B,KAAL,CAAW8B,YAAf,EAA6B,KAAKC,kBAAL;AAC7B,WAAKhC,QAAL,CAAc;AAAEiC,QAAAA,WAAW,EAAE,CAAC,KAAKhC,KAAL,CAAWgC;AAA3B,OAAd;AACH,KAvImB;;AAAA,SAyIpBD,kBAzIoB,GAyIC,MAAM;AACvB;AACA,UAAI,KAAK/B,KAAL,CAAWgC,WAAf,EAA4B,KAAKH,iBAAL;AAC5B,WAAK9B,QAAL,CAAc;AAAE+B,QAAAA,YAAY,EAAE,CAAC,KAAK9B,KAAL,CAAW8B;AAA5B,OAAd;AACH,KA7ImB;;AAAA,SA+IpBG,SA/IoB,GA+IR,MAAM;AACd,WAAKb,UAAL;AACA,WAAKc,OAAL,GAAeb,UAAU,CAAC,MAAM;AAC5B,aAAKtB,QAAL,CAAc;AAAES,UAAAA,MAAM,EAAE;AAAV,SAAd;AACA,aAAKc,uBAAL;AACH,OAHwB,EAGtB,IAHsB,CAAzB;AAIH,KArJmB;;AAAA,SAuJpBa,UAvJoB,GAuJP,MAAM;AACf,UAAIC,SAAS,GAAG,EAAhB;;AACA,UAAI,KAAKpC,KAAL,CAAWqC,SAAX,CAAqB,CAArB,CAAJ,EAA6B;AACzBD,QAAAA,SAAS,GAAG,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,CAAZ;AACH,OAFD,MAEO,IAAI,KAAKpC,KAAL,CAAWqC,SAAX,CAAqB,CAArB,CAAJ,EAA6B;AAChCD,QAAAA,SAAS,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,CAAZ;AACH,OAFM,MAEA;AACHA,QAAAA,SAAS,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAZ;AACH;;AACD,WAAKrC,QAAL,CAAe;AAAEsC,QAAAA,SAAS,EAAED;AAAb,OAAf;AACH,KAjKmB;;AAAA,SAqKpBE,YArKoB,GAqKL,MAAM;AACjB,UAAIC,SAAS,GAAG,KAAKvC,KAAL,CAAWwC,KAA3B;;AAEA,UAAI,KAAKxC,KAAL,CAAWgC,WAAf,EAA4B;AACxB,aAAK,IAAIS,IAAT,IAAiB,KAAKzC,KAAL,CAAWqC,SAA5B,EAAuC;AACnC,cAAII,IAAJ,EAAUF,SAAS;AACtB;;AAED,aAAKxC,QAAL,CAAc;AACVS,UAAAA,MAAM,EAAE,KADE;AAEVgC,UAAAA,KAAK,EAAED;AAFG,SAAd;AAIH,OAZgB,CAajB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAKnB,UAAL;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,uBAAL;AACH,OAFS,EAEP,IAFO,CAAV;AAGH,KA/LmB;;AAAA,SAiMpBF,UAjMoB,GAiMP,MAAM;AACf,UAAIsB,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBD,QAAAA,UAAU,CAACE,IAAX,CAAgB;AAAEC,UAAAA,UAAU,EACvB;AADW,SAAhB;AAGH;;AACD,WAAK9C,QAAL,CAAc;AACVmB,QAAAA,UAAU,EAAEwB;AADF,OAAd;AAGH,KA3MmB;;AAAA,SA6MpBI,kBA7MoB,GA6MEC,OAAD,IAAa;AAC9B,WAAKhD,QAAL,CAAc;AACViD,QAAAA,KAAK,EAAED,OADG;AAEVE,QAAAA,KAAK,EAAE,KAAKjD,KAAL,CAAWiD,KAAX,GAAmBF;AAFhB,OAAd;AAIH,KAlNmB;;AAAA,SAoNpBzB,uBApNoB,GAoNM,MAAM;AAC5B4B,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAhB;AACA,UAAIC,WAAW,GAAG,CACd,UADc,EAEd,UAFc,EAGd,YAHc,EAId,WAJc,EAKd,WALc,EAMd,UANc,CAAlB;AAQA,UAAIC,QAAQ,GAAGD,WAAW,CAACJ,SAAD,CAA1B;AACA,UAAIM,GAAG,GAAG,EAAV,CAZ4B,CAc5B;;AAEA,UAAI,KAAK1D,KAAL,CAAW8B,YAAX,IAA2B,CAAC,KAAK9B,KAAL,CAAWgB,aAAvC,IAAwD,CAAC,KAAKhB,KAAL,CAAWc,eAApE,IAAuF,CAAC,KAAKd,KAAL,CAAWe,YAAvG,EACI2C,GAAG,GAAG5E,mBAAmB,EAAzB;AACJ,UAAI,KAAKkB,KAAL,CAAW8B,YAAX,IAA2B,KAAK9B,KAAL,CAAWgB,aAAtC,IAAuD,CAAC,KAAKhB,KAAL,CAAWc,eAAnE,IAAsF,CAAC,KAAKd,KAAL,CAAWe,YAAtG,EACI2C,GAAG,GAAG7E,oBAAoB,EAA1B,CAnBwB,CAoB5B;AACA;;AACA,UAAI,KAAKmB,KAAL,CAAW8B,YAAX,IAA2B,CAAC,KAAK9B,KAAL,CAAWgB,aAAvC,IAAwD,CAAC,KAAKhB,KAAL,CAAWc,eAApE,IAAuF,KAAKd,KAAL,CAAWe,YAAtG,EACI2C,GAAG,GAAG3E,oBAAoB,EAA1B;AACJ,UAAI,KAAKiB,KAAL,CAAW8B,YAAX,IAA2B,KAAK9B,KAAL,CAAW2B,YAA1C,EACI+B,GAAG,GAAG1E,oBAAoB,CAAC,KAAKgB,KAAL,CAAW4B,WAAZ,CAA1B;;AAEJ,UAAI,KAAK5B,KAAL,CAAWgC,WAAf,EAA4B;AACxB,aAAKhC,KAAL,CAAWY,KAAX,IAAoB,CAApB,GACM8C,GAAG,GAAG/E,kBAAkB,EAD9B,GAEM+E,GAAG,GAAG7E,oBAAoB,EAFhC;AAGC;;AAEL,YAAM8E,WAAW,GAAGD,GAAG,CAACN,SAAD,CAAvB;AACA,YAAMQ,UAAU,GAAID,WAAW,CAACd,UAAZ,CAAuBgB,KAAvB,CAA6B,EAA7B,CAApB;AACA,UAAIC,WAAW,GAAIF,UAAU,CAACC,KAAX,CAAiB,CAAjB,EAAoBD,UAAU,CAACG,MAAX,GAAmB,CAAvC,CAAnB;AACAD,MAAAA,WAAW,GAAGA,WAAW,CAACE,KAAZ,CAAkB,GAAlB,CAAd;AACA,UAAIC,KAAK,GAAGH,WAAW,CAAC,CAAD,CAAvB;AACA,UAAII,MAAM,GAAGJ,WAAW,CAAC,CAAD,CAAxB;AACA,UAAIK,KAAK,GAAGL,WAAW,CAAC,CAAD,CAAvB;AACA,UAAIM,QAAQ,GAAI,GAAEH,KAAK,CAACJ,KAAN,CAAY,CAAZ,CAAe,KAAIK,MAAM,CAACL,KAAP,CAAa,CAAb,EAAgBK,MAAM,CAACH,MAAP,GAAe,CAA/B,CAAkC,KAAII,KAAK,CAACN,KAAN,CAAY,CAAZ,EAAeM,KAAK,CAACJ,MAAN,GAAa,CAA5B,CAA+B,EAA1G;AACA,UAAIM,SAAS,GAAGzF,QAAQ,CAACwF,QAAD,CAAxB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBiB,QAAzB,EAAmC,eAAnC,EAAoDC,SAApD,EAA+D,cAA/D,EAA+EV,WAA/E;AACA,WAAK5D,QAAL,CAAc;AACVsC,QAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADD;AAEVnB,QAAAA,UAAU,EAAEwC,GAFF;AAGV9C,QAAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWY,KAAX,GAAmB,CAHhB;AAIV0D,QAAAA,aAAa,EAAEb,QAJL;AAKVjD,QAAAA,MAAM,EAAE,IALE;AAMVsD,QAAAA,WAAW,EAAEJ,GANH,CAOV;;AAPU,OAAd;AASH,KAxQmB;;AAIhB,SAAK1D,KAAL,GAAa;AACTkB,MAAAA,UAAU,EAAErB,WADH;AAETyE,MAAAA,aAAa,EAAE,EAFN;AAGTR,MAAAA,WAAW,EAAE,IAHJ;AAITlD,MAAAA,KAAK,EAAE,CAJE;AAKTqC,MAAAA,KAAK,EAAE,CALE;AAMTD,MAAAA,KAAK,EAAE,EANE;AAOTR,MAAAA,KAAK,EAAE,CAPE;AAQTH,MAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CARF;AAST7B,MAAAA,MAAM,EAAE,KATC;AAUT;AACA;AACA;AACA;AACAE,MAAAA,eAAe,EAAE,KAdR;AAeTkB,MAAAA,WAAW,EAAE,eAfJ;AAiBTzC,MAAAA,SAAS,EAAE,KAjBF;AAkBTe,MAAAA,UAAU,EAAE,KAlBH;AAmBTE,MAAAA,QAAQ,EAAE,KAnBD;AAoBTE,MAAAA,eAAe,EAAE,KApBR;AAsBT;AACA0B,MAAAA,WAAW,EAAE,KAvBJ;AAwBTF,MAAAA,YAAY,EAAE,KAxBL;AA0BTd,MAAAA,aAAa,EAAE,KA1BN;AA2BTF,MAAAA,eAAe,EAAE,KA3BR;AA4BTC,MAAAA,YAAY,EAAE,KA5BL;AA6BTY,MAAAA,YAAY,EAAE,KA7BL;AA+BT7B,MAAAA,eAAe,EAAE,KAAKA,eA/Bb;AAgCTG,MAAAA,gBAAgB,EAAE,KAAKA,gBAhCd;AAiCTE,MAAAA,cAAc,EAAE,KAAKA,cAjCZ;AAkCTE,MAAAA,qBAAqB,EAAE,KAAKA,qBAlCnB;AAmCTI,MAAAA,mBAAmB,EAAE,KAAKA,mBAnCjB;AAqCTF,MAAAA,YAAY,EAAE,KAAKA,YArCV;AAsCT;AACAsB,MAAAA,iBAAiB,EAAE,KAAKA,iBAvCf;AAwCTE,MAAAA,kBAAkB,EAAE,KAAKA,kBAxChB;AA0CTP,MAAAA,mBAAmB,EAAE,KAAKA,mBA1CjB;AA2CTX,MAAAA,qBAAqB,EAAE,KAAKA,qBA3CnB;AA4CTU,MAAAA,kBAAkB,EAAE,KAAKA,kBA5ChB;AA6CTE,MAAAA,cAAc,EAAE,KAAKA,cA7CZ;AA+CTQ,MAAAA,SAAS,EAAE,KAAKA,SA/CP;AAgDTK,MAAAA,YAAY,EAAE,KAAKA,YAhDV;AAiDTiC,MAAAA,WAAW,EAAE,KAAKzB,kBAjDT;AAkDTX,MAAAA,UAAU,EAAE,KAAKA,UAlDR;AAmDTxB,MAAAA,WAAW,EAAE,KAAKA;AAnDT,KAAb;AAqDH;;AAiND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA6D,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,KAAK,EAAE,KAAKxE,KAA1C;AAAA,6BACI,QAAC,YAAD,CAAc,QAAd;AAAuB,QAAA,KAAK,EAAE,KAAKA,KAAnC;AAAA,+BACI,QAAC,aAAD;AAAA,kCACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,kBADJ,EAIK,KAAKA,KAAL,CAAWb,SAAX,iBACG,QAAC,KAAD;AAAA,mCACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBALR,EASK,KAAKa,KAAL,CAAWE,UAAX,iBACG,QAAC,KAAD;AAAA,mCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAVR,EAcK,KAAKF,KAAL,CAAWI,QAAX,iBACG,QAAC,KAAD;AAAA,mCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAfR,EAmBK,KAAKJ,KAAL,CAAWM,eAAX,iBACG,QAAC,KAAD;AAAA,mCACI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBApBR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AA+BH;;AA7ToC;;AAgUzC,eAAeb,UAAf","sourcesContent":["import React from 'react'\n\nimport {\n    generateEasyColors,\n    HSLtoRGB,\n    generateBattleColors,\n    // generateZenColors,\n    generateGhostColors,\n    generatePastelColors,\n    generateCustomColors,\n} from './PureFunctions';\n\nimport Backdrop from './Components/Backdrop/Backdrop'\nimport KarenContext from './KarenContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n    constructor (props) {\n        const battleArray = generateBattleColors();\n\n        super (props);\n        this.state = {\n            colorArray: battleArray,\n            colorTargetId: '',\n            colorTarget: null,\n            round: 0,\n            score: 0,\n            timer: 15,\n            coins: 0,\n            coinArray: [true, true, true],\n            gameOn: false,\n            // zenKernel: '',\n            // kernelVisibility: false,\n            // zenObject: zenObject,\n            // mutableZen: zenObject,\n            windowDisplayed: false,\n            customColor: '255, 255, 255',\n\n            MainModal: false,\n            loginModal: false,\n            bioModal: false,\n            playerPageModal: false,\n\n            // startZen: false,\n            startBattle: false,\n            startConvert: false,\n\n            createTriadic: false,\n            createAnalogous: false,\n            createPastel: false,\n            createCustom: false,\n\n            toggleMainModal: this.toggleMainModal,\n            toggleLoginModal: this.toggleLoginModal,\n            toggleBioModal: this.toggleBioModal,\n            togglePlayerPageModal: this.togglePlayerPageModal,\n            toggleWindowDisplay: this.toggleWindowDisplay,\n\n            toggleGameOn: this.toggleGameOn,\n            // toggleStartZen: this.toggleStartZen,\n            toggleStartBattle: this.toggleStartBattle,\n            toggleStartConvert: this.toggleStartConvert,\n\n            toggleCreateTriadic: this.toggleCreateTriadic,\n            toggleCreateAnalogous: this.toggleCreateAnalogous,\n            toggleCreatePastel: this.toggleCreatePastel,\n            setCustomColor: this.setCustomColor,\n\n            startGame: this.startGame,\n            correctGuess: this.correctGuess,\n            updateTimer: this.updateTimerContext,\n            removeCoin: this.removeCoin,\n            clearRounds: this.clearRounds,\n        }\n    }\n\n    toggleMainModal = () => this.setState({ MainModal: !this.state.MainModal })\n    toggleLoginModal = () => this.setState({ loginModal: !this.state.loginModal })\n    toggleBioModal = () => this.setState({ bioModal: !this.state.bioModal })\n    togglePlayerPageModal = () => this.setState({ playerPageModal: !this.state.playerPageModal })\n    toggleGameOn = () => this.setState({ gameOn: false })\n    toggleWindowDisplay = () => this.setState({ windowDisplayed: !this.state.windowDisplayed})\n    clearRounds = () => this.setState({ round: 0})\n\n    toggleCreateAnalogous = () => {\n        if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({ createAnalogous: true});\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createAnalogous: false})\n        }, delayOrNot)\n    }\n\n    toggleCreatePastel = () => {\n        if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({ createPastel: true});\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createPastel: false})\n        }, delayOrNot)\n    }\n\n    toggleCreateTriadic = () => {\n        if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({ createTriadic: true});\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createTriadic: false});\n        }, delayOrNot)\n    }\n\n    setCustomColor = (custom) => {\n        // if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({\n            createCustom: true,\n            customColor: custom,\n        });\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createCustom: false});\n        }, delayOrNot)\n    }\n\n    // toggleStartZen = () => {\n    //     if (this.state.startBattle) this.toggleStartBattle();\n    //     if (this.state.startConvert) this.toggleStartConvert();\n    //     this.setState({ startZen: !this.state.startZen });\n    // }\n    toggleStartBattle = () => {\n        // if (this.state.startZen) this.toggleStartZen();\n        if (this.state.startConvert) this.toggleStartConvert();\n        this.setState({ startBattle: !this.state.startBattle });\n    }\n\n    toggleStartConvert = () => {\n        // if (this.state.startZen) this.toggleStartZen();\n        if (this.state.startBattle) this.toggleStartBattle();\n        this.setState({ startConvert: !this.state.startConvert});\n    }\n\n    startGame = () => {\n        this.clearBoard();\n        this.timeout = setTimeout(() => {\n            this.setState({ gameOn: true })\n            this.updateColorArrayContext()\n        }, 1100)\n    }\n\n    removeCoin = () => {\n        let tempArray = [];\n        if (this.state.coinArray[0]) {\n            tempArray = [false, true, true]\n        } else if (this.state.coinArray[1]) {\n            tempArray = [false, false, true]\n        } else {\n            tempArray = [false, false, false]\n        }\n        this.setState ({ coinArray: tempArray })\n    }\n\n\n    //refactor this\n    correctGuess = () => {\n        let coinCount = this.state.coins;\n\n        if (this.state.startBattle) {\n            for (let coin of this.state.coinArray) {\n                if (coin) coinCount++\n            }\n\n            this.setState({\n                gameOn: false,\n                coins: coinCount,\n             });\n        }\n        // else if (this.state.startZen) {\n        //     this.setState({\n        //         kernelVisibility: true,\n        //         gameOn: false,\n        //     })\n        //     setTimeout(() => {\n        //         this.toggleKernelDisplay();\n        //     }, 4000)\n        // }\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n        }, 1500)\n    }\n\n    clearBoard = () => {\n        let clearArray = []\n        for (let i = 0; i < 6; i++) {\n            clearArray.push({ background:\n                `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n            })\n        }\n        this.setState({\n            colorArray: clearArray,\n        })\n    }\n\n    updateTimerContext = (seconds) => {\n        this.setState({\n            timer: seconds,\n            score: this.state.score + seconds,\n        })\n    }\n\n    updateColorArrayContext = () => {\n        console.log('update')\n        let randomSix = Math.floor(Math.random() * 6)\n        let targetArray = [\n            'colorOne',\n            'colorTwo',\n            'colorThree',\n            'colorFour',\n            'colorFive',\n            'colorSix'\n        ]\n        let targetId = targetArray[randomSix];\n        let arr = [];\n\n        // if (this.state.startZen) arr = generateZenColors();\n\n        if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel)\n            arr = generateGhostColors();\n        if (this.state.startConvert && this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel)\n            arr = generateBattleColors();\n        // if (this.state.startConvert && !this.state.createTriadic && this.state.createAnalogous && !this.state.createPastel)\n        //     arr = generateZenColors();\n        if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && this.state.createPastel)\n            arr = generatePastelColors();\n        if (this.state.startConvert && this.state.createCustom)\n            arr = generateCustomColors(this.state.customColor);\n\n        if (this.state.startBattle) {\n            this.state.round <= 2\n                ? arr = generateEasyColors()\n                : arr = generateBattleColors()\n            }\n\n        const targetColor = arr[randomSix]\n        const firstSlice = (targetColor.background.slice(42))\n        let colorTarget = (firstSlice.slice(0, firstSlice.length -7))\n        colorTarget = colorTarget.split(',')\n        let first = colorTarget[0]\n        let second = colorTarget[1]\n        let third = colorTarget[2]\n        let combined = `${first.slice(1)}, ${second.slice(0, second.length -1)}, ${third.slice(0, third.length-2)}`\n        let converted = HSLtoRGB(combined)\n        console.log('combined:', combined, '   converted:', converted, 'target color', targetColor)\n        this.setState({\n            coinArray: [true, true, true],\n            colorArray: arr,\n            round: this.state.round + 1,\n            colorTargetId: targetId,\n            gameOn: true,\n            colorTarget: arr,\n            // colorTarget: converted,\n        })\n    }\n\n    // toggleKernelDisplay = () => {\n    //     let randomKernel = '';\n    //     if (Object.keys(this.state.mutableZen).length > 0) {\n    //         let kernelArray = Object.keys(this.state.mutableZen);\n    //         let randomNum = Math.random();\n    //         let kernelIndex = Math.floor(randomNum * kernelArray.length)\n    //         let randomKey = kernelArray[kernelIndex];\n    //         randomKernel = this.state.mutableZen[randomKey]\n    //         delete this.state.mutableZen[randomKey]\n    //     };\n\n    //     this.setState({\n    //         zenKernel: randomKernel,\n    //         kernelVisibility: false,\n    //     })\n    // }\n\n\n    render() {\n        return (\n            <div className='gameBoardDiv' value={this.state}>\n                <KarenContext.Provider value={this.state}>\n                    <ModalProvider>\n                        <Backdrop />\n\n                        {/* Modal Control */}\n                        {this.state.MainModal &&\n                            <Modal >\n                                <MainModal />\n                            </Modal>\n                        }\n                        {this.state.loginModal &&\n                            <Modal>\n                                <LoginModal />\n                            </Modal>\n                        }\n                        {this.state.bioModal &&\n                            <Modal>\n                                <MyBioModal />\n                            </Modal>\n                        }\n                        {this.state.playerPageModal &&\n                            <Modal>\n                                <PlayerPageModal />\n                            </Modal>\n                        }\n                    </ModalProvider>\n                </KarenContext.Provider>\n            </div>\n        )\n    }\n}\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}