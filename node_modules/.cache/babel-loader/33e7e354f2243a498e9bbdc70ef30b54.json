{"ast":null,"code":"import _slicedToArray from\"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useState,useEffect}from'react';// import './ConvertContainer.css';\nimport'./LeftConvertPanel.css';var LeftConvertPanel=function LeftConvertPanel(props){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),topValue=_useState2[0],setTopValue=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),middleValue=_useState4[0],setMiddleValue=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),bottomValue=_useState6[0],setBottomValue=_useState6[1];var stringVal=[\"\".concat(topValue),\"\".concat(middleValue),\"\".concat(bottomValue)];useEffect(function(){setTopValue(props.fromTopInput);setMiddleValue(props.fromMiddleInput);setBottomValue(props.fromBottomInput);},[props]);return/*#__PURE__*/_jsxs(\"div\",{className:\"convertDiv\",id:\"leftConvert\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"convertButtonDiv leftButtonDiv\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"upperButtonDiv\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"convertTextDiv\",children:\"Convert From\"}),/*#__PURE__*/_jsx(\"button\",{className:\"convertButton \".concat(props.fromRgbButton?'activeConvert':'hiddenConvert'),onClick:props.toggleFromRgbButton,children:\"RGB\"}),/*#__PURE__*/_jsx(\"button\",{className:\"convertButton \".concat(props.fromHslButton?'activeConvert':'hiddenConvert'),onClick:props.toggleFromHslButton,children:\"HSL\"}),/*#__PURE__*/_jsx(\"button\",{className:\"convertButton \".concat(props.fromHexButton?'activeConvert':'hiddenConvert'),onClick:props.toggleFromHexButton,children:\"HEX\"}),/*#__PURE__*/_jsx(\"div\",{className:\"convertTextDiv\",children:\"Convert To\"}),/*#__PURE__*/_jsx(\"button\",{className:\"convertButton \".concat(props.toRgbButton?'activeConvert':'hiddenConvert'),onClick:props.toggleToRgbButton,children:\"RGB\"}),/*#__PURE__*/_jsx(\"button\",{className:\"convertButton \".concat(props.toHslButton?'activeConvert':'hiddenConvert'),onClick:props.toggleToHslButton,children:\"HSL\"}),/*#__PURE__*/_jsx(\"button\",{className:\"convertButton \".concat(props.toHexButton?'activeConvert':'hiddenConvert'),onClick:props.toggleToHexButton,children:\"HEX\"})]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"convertInputDiv\",children:[/*#__PURE__*/_jsxs(\"label\",{className:\"convertLabel\",children:[props.fromTopLabel,/*#__PURE__*/_jsx(\"input\",{className:\"convertInput\",type:\"text\",value:topValue,placeholder:props.fromTopInput,maxLength:\"3\",onChange:function onChange(e){return setTopValue(e.target.value);},onFocus:function onFocus(){if(props.repeatRender){props.toggleRepeatRender();props.toggleTogglePosition();}setTopValue('');}})]}),/*#__PURE__*/_jsxs(\"label\",{className:\"convertLabel\",children:[props.fromMiddleLabel,/*#__PURE__*/_jsx(\"input\",{className:\"convertInput\",type:\"text\",value:middleValue,placeholder:props.fromMiddleInput,maxLength:\"3\",onChange:function onChange(e){return setMiddleValue(e.target.value);},onFocus:function onFocus(){if(props.repeatRender){props.toggleRepeatRender();props.toggleTogglePosition();}setMiddleValue('');}})]}),/*#__PURE__*/_jsxs(\"label\",{className:\"convertLabel\",children:[props.fromBottomLabel,/*#__PURE__*/_jsx(\"input\",{className:\"convertInput\",type:\"text\",value:bottomValue,placeholder:props.fromBottomInput,maxLength:\"3\",onChange:function onChange(e){return setBottomValue(e.target.value);},onFocus:function onFocus(){if(props.repeatRender){props.toggleRepeatRender();props.toggleTogglePosition();}setBottomValue('');}})]}),/*#__PURE__*/_jsx(\"button\",{className:\"submitButton\",onClick:function onClick(){props.playerSubmit(stringVal);},children:\"Convert\"})]})})]});};export default LeftConvertPanel;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Components/Footer/LeftConvertPanel.js"],"names":["React","useState","useEffect","LeftConvertPanel","props","topValue","setTopValue","middleValue","setMiddleValue","bottomValue","setBottomValue","stringVal","fromTopInput","fromMiddleInput","fromBottomInput","fromRgbButton","toggleFromRgbButton","fromHslButton","toggleFromHslButton","fromHexButton","toggleFromHexButton","toRgbButton","toggleToRgbButton","toHslButton","toggleToHslButton","toHexButton","toggleToHexButton","fromTopLabel","e","target","value","repeatRender","toggleRepeatRender","toggleTogglePosition","fromMiddleLabel","fromBottomLabel","playerSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\n// import './ConvertContainer.css';\nimport './LeftConvertPanel.css';\n\nconst LeftConvertPanel = (props) => {\n    const [topValue, setTopValue] = useState('');\n    const [middleValue, setMiddleValue] = useState('');\n    const [bottomValue, setBottomValue] = useState('');\n    const stringVal = [`${topValue}`, `${middleValue}`, `${bottomValue}`]\n\n    useEffect(() => {\n        setTopValue(props.fromTopInput)\n        setMiddleValue(props.fromMiddleInput)\n        setBottomValue(props.fromBottomInput)\n    }, [props])\n\n    return (\n        <div className='convertDiv' id='leftConvert'>\n            <div className={`convertButtonDiv leftButtonDiv`} >\n                <div className='upperButtonDiv'>\n\n                    <div className='convertTextDiv'>Convert From</div>\n                    <button className={`convertButton ${props.fromRgbButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleFromRgbButton}\n                        >RGB</button>\n                    <button className={`convertButton ${props.fromHslButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleFromHslButton}\n                        >HSL</button>\n                    <button className={`convertButton ${props.fromHexButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleFromHexButton}\n                        >HEX</button>\n\n                    <div className={`convertTextDiv`}>Convert To</div>\n                    <button className={`convertButton ${props.toRgbButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleToRgbButton}\n                        >RGB</button>\n                    <button className={`convertButton ${props.toHslButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleToHslButton}\n                        >HSL</button>\n                    <button className={`convertButton ${props.toHexButton ? 'activeConvert' : 'hiddenConvert'}`} onClick={props.toggleToHexButton}\n                        >HEX</button>\n                </div>\n            </div>\n            <div >\n                <div className='convertInputDiv'>\n                    <label className='convertLabel'>\n                        {props.fromTopLabel}\n                        <input\n                            className='convertInput'\n                            type='text'\n                            value={topValue}\n                            placeholder={props.fromTopInput}\n                            maxLength='3'\n                            onChange={(e) => setTopValue(e.target.value)}\n                            onFocus={() => {\n                                if (props.repeatRender) {\n                                    props.toggleRepeatRender()\n                                    props.toggleTogglePosition()\n                                }\n                                setTopValue('')\n                            }}\n                        />\n                    </label>\n                    <label className='convertLabel'>\n                        {props.fromMiddleLabel}\n                        <input\n                            className='convertInput'\n                            type='text'\n                            value={middleValue}\n                            placeholder={props.fromMiddleInput}\n                            maxLength='3'\n                            onChange={e => setMiddleValue(e.target.value)}\n                            onFocus={() => {\n                                if (props.repeatRender) {\n                                    props.toggleRepeatRender()\n                                    props.toggleTogglePosition()\n                                }\n                                setMiddleValue('')\n                            }}\n                        />\n                    </label>\n                    <label className='convertLabel'>\n                        {props.fromBottomLabel}\n                        <input\n                            className='convertInput'\n                            type='text'\n                            value={bottomValue}\n                            placeholder={props.fromBottomInput}\n                            maxLength='3'\n                            onChange={e => setBottomValue(e.target.value)}\n                            onFocus={() => {\n                                if (props.repeatRender) {\n                                    props.toggleRepeatRender()\n                                    props.toggleTogglePosition()\n                                }\n                                setBottomValue('')\n                            }}\n                        />\n                    </label>\n                    <button className='submitButton' onClick={() => {\n                        props.playerSubmit(stringVal)\n                    }}>Convert</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default LeftConvertPanel;\n"]},"metadata":{},"sourceType":"module"}