{"ast":null,"code":"import { fetch } from './csrf';\nconst SET_USER = 'session/setUser';\nconst REMOVE_USER = 'session/removeUser';\n\nconst setUser = user => {\n  return {\n    type: SET_USER,\n    payload: user\n  };\n};\n\nconst removeUser = () => {\n  return {\n    type: REMOVE_USER\n  };\n};\n\nexport const restoreUser = () => async dispatch => {\n  const res = await fetch('/api/session');\n  dispatch(setUser(res.data.user));\n  return res;\n};\nexport const login = user => async dispatch => {\n  const {\n    credential,\n    password\n  } = user;\n  const response = await fetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify({\n      credential,\n      password\n    })\n  });\n  dispatch(setUser(response.data.user));\n  return response;\n};\nexport const logout = () => async dispatch => {\n  const response = await fetch('/api/session', {\n    method: 'DELETE'\n  });\n  dispatch(removeUser());\n  return response;\n};\nexport const signup = user => async dispatch => {\n  const {\n    username,\n    email,\n    password\n  } = user;\n  const response = await fetch('/api/users', {\n    method: 'POST',\n    body: JSON.stringify({\n      username,\n      email,\n      password\n    })\n  });\n  dispatch(setUser(response.data.user));\n  return response;\n};\nconst initialState = {\n  user: null\n};\n\nconst sessionReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case SET_USER:\n      newState = Object.assign({}, state);\n      newState.user = action.payload;\n      return newState;\n\n    case REMOVE_USER:\n      newState = Object.assign({}, state);\n      newState.user = null;\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default sessionReducer;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/store/session.js"],"names":["fetch","SET_USER","REMOVE_USER","setUser","user","type","payload","removeUser","restoreUser","dispatch","res","data","login","credential","password","response","method","body","JSON","stringify","logout","signup","username","email","initialState","sessionReducer","state","action","newState","Object","assign"],"mappings":"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","sourcesContent":["import { fetch } from './csrf';\n\nconst SET_USER = 'session/setUser';\nconst REMOVE_USER = 'session/removeUser';\n\nconst setUser = (user) => {\n  return {\n    type: SET_USER,\n    payload: user,\n  };\n};\n\nconst removeUser = () => {\n  return {\n    type: REMOVE_USER,\n  };\n};\n\nexport const restoreUser = () => async dispatch => {\n    const res = await fetch('/api/session');\n    dispatch(setUser(res.data.user));\n    return res;\n}\n\nexport const login = (user) => async (dispatch) => {\n  const { credential, password } = user;\n  const response = await fetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify({\n      credential,\n      password,\n    }),\n  });\n  dispatch(setUser(response.data.user));\n  return response;\n};\n\nexport const logout = () => async (dispatch) => {\n    const response = await fetch ('/api/session', {\n        method: 'DELETE',\n    });\n    dispatch(removeUser());\n    return response;\n}\n\nexport const signup = (user) => async (dispatch) => {\n    const { username, email, password } =user;\n    const response = await fetch('/api/users', {\n        method: 'POST',\n        body: JSON.stringify({\n            username,\n            email,\n            password,\n        })\n    });\n    dispatch(setUser(response.data.user));\n    return response;\n};\n\nconst initialState = { user: null };\n\nconst sessionReducer = (state = initialState, action) => {\n  let newState;\n  switch (action.type) {\n    case SET_USER:\n      newState = Object.assign({}, state);\n      newState.user = action.payload;\n      return newState;\n    case REMOVE_USER:\n      newState = Object.assign({}, state);\n      newState.user = null;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default sessionReducer;\n"]},"metadata":{},"sourceType":"module"}