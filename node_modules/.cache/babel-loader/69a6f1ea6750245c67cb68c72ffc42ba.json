{"ast":null,"code":"//Add 3D effect\nfunction addStyleString(arr){var newArray=[];//iterate through the given array of colors and add the 3-D effect\nfor(var i=0;i<arr.length;i++){newArray.push({background:\"radial-gradient(circle at 100px 100px, rgb(\".concat(arr[i],\"), #000)\")});}return newArray;}//Color value array factories:\nexport function generateEasyArray(){//Array of all possible 'easy ' colors (all values either 0 or 255)\nvar arr=[\"0, 0, 0\",\"0, 0, 255\",\"255, 0, 255\",\"255, 255, 255\",\"0, 255, 255\",\"255, 0, 0\",\"0, 255, 0\",\"255, 255, 0\"];var returnArr=[];//fill returnArr array with random easy colors\nwhile(returnArr.length!==6){var randomNum=Math.floor(Math.random()*8);var _randomColor=arr[randomNum];if(!returnArr.includes(_randomColor)){returnArr.push(_randomColor);}}//Add 3D effect\nvar newArray=addStyleString(returnArr);return newArray;}export function generateGhostArray(){var arr=[];for(var i=0;i<6;i++){// let temp = randomColor();\n// let sliced = temp.slice(0)\narr.push('255, 255, 255, 0.1');}var newArray=addStyleString(arr);// const blurredArray = addBlurClass(newArray)\nreturn newArray;// return arr;\n}function randomColor(){//pick a \"red\" from 0 to 255\nvar r=Math.floor(Math.random()*256);//pick a \"green\" from 0 to 255\nvar g=Math.floor(Math.random()*256);//pick a \"blue\" from 0 to 255\nvar b=Math.floor(Math.random()*256);// return RGBtoHSL(`(${r}, ${g}, ${b})`);\n//make sure not too white or black\nvar difference=Math.abs(Math.abs(r-g)+Math.abs(r-b)+Math.abs(g-b));if(difference<80){return randomColor();}return\"\".concat(r,\", \").concat(g,\", \").concat(b);}//find high numbers\nfunction randomPastelColor(){//pick a \"red\" from 76 to 180\nvar r=Math.floor(Math.random()*76)+180;//pick a \"green\" from 76 to 180\nvar g=Math.floor(Math.random()*76)+180;//pick a \"blue\" from 76 to 180\nvar b=Math.floor(Math.random()*76)+180;//make sure its not too white\nif(r+g+b>700||r+g+b<600||Math.abs(r-g)+Math.abs(g-b)<40){return randomPastelColor();}// console.log(r, g, b)\nreturn\"\".concat(r,\", \").concat(g,\", \").concat(b);}export function generateTriadicArray(){var arr=[];//Pick Random RGB color\nvar ranColor=randomColor();arr.push(ranColor);//Find compliment\nvar compliment=findComplement(ranColor);//find triadic compliments\nvar triOne=findTriadics(ranColor).RGBtriOneColor;var triTwo=findTriadics(ranColor).RGBtriTwoColor;//Find triadic compliments of compliment\nvar triCompOne=findTriadics(compliment).RGBtriOneColor;var triCompTwo=findTriadics(compliment).RGBtriTwoColor;arr.push(triCompOne,triTwo,compliment,triOne,triCompTwo);// console.log(arr)\nreturn addStyleString(arr);}export function generateAnalogousArray(){var arr=[];//Pick Random RGB color\nvar ranColor=randomColor();arr.push(ranColor);//Find compliment\nvar compliment=findComplement(ranColor);//find analogous compliments\nvar triOne=findAnalogous(ranColor).RGBanalogousOne;var triTwo=findAnalogous(ranColor).RGBanalogousTwo;//Find analogous compliments of compliment\nvar analogousOne=findAnalogous(compliment).RGBanalogousOne;var analogousTwo=findAnalogous(compliment).RGBanalogousTwo;arr.push(analogousOne,triOne,compliment,triTwo,analogousTwo);return addStyleString(arr);}export function generatePastelArray(){var arr=[];//Pick Random RGB color\nvar ranColor=randomPastelColor();// console.log('TTTTTTT', ranColor)\narr.push(ranColor);//Find compliment\nvar compliment=findComplement(ranColor);//find split compliments\nvar splitCompOne=findAnalogous(ranColor).RGBanalogousOne;var splitCompTwo=findAnalogous(ranColor).RGBanalogousTwo;//Find analogous compliments\nvar analogousOne=findAnalogous(compliment).RGBanalogousOne;var analogousTwo=findAnalogous(compliment).RGBanalogousTwo;arr.push(analogousOne,splitCompOne,compliment,splitCompTwo,analogousTwo);return addStyleString(arr);}export function generateCustomArray(playerColor){var arr=[];//Pick Random RGB color\narr.push(playerColor);//Find compliment\nvar compliment=findComplement(playerColor);//find analogous compliments\nvar triOne=findAnalogous(playerColor).RGBanalogousOne;var triTwo=findAnalogous(playerColor).RGBanalogousTwo;//Find analogous compliments of compliment\nvar analogousOne=findAnalogous(compliment).RGBanalogousOne;var analogousTwo=findAnalogous(compliment).RGBanalogousTwo;arr.push(analogousOne,triOne,compliment,triTwo,analogousTwo);return addStyleString(arr);}//Find compliment colors:\nfunction findComplement(color){var convertedColor=RGBtoHSL(color);var splitColor=convertedColor.split(',');var hue=Number(splitColor[0]);var satch=splitColor[1];var light=splitColor[2];var complimentHue=0;if(hue>=180){complimentHue=hue-180;}else{complimentHue=hue+180;}var compHSL=\"\".concat(complimentHue,\",\").concat(satch,\",\").concat(light);// console.log('complement', compHSL, HSLtoRGB(compHSL))\nreturn HSLtoRGB(compHSL);}function findTriadics(rgbValue){var convertedColor=RGBtoHSL(rgbValue);var splitColor=convertedColor.split(',');var hue=Number(splitColor[0]);var satch=splitColor[1];var light=splitColor[2];var triOne=0;var triTwo=0;// console.log('triadics', rgbValue, convertedColor, hue, satch, light)\nif(hue<120){triOne=hue+120;triTwo=hue+240;}else if(hue>=120&&hue<240){triOne=hue+120;triTwo=hue-120;}else{triOne=hue-240;triTwo=hue-120;}var triOneColor=\"\".concat(triOne,\",\").concat(satch,\",\").concat(light);var triTwoColor=\"\".concat(triTwo,\",\").concat(satch,\",\").concat(light);// console.log('triadics', triOneColor)\nvar RGBtriOneColor=HSLtoRGB(triOneColor);var RGBtriTwoColor=HSLtoRGB(triTwoColor);return{RGBtriOneColor:RGBtriOneColor,RGBtriTwoColor:RGBtriTwoColor};}function findAnalogous(rgbValue){var convertedColor=RGBtoHSL(rgbValue);var splitColor=convertedColor.split(',');var hue=Number(splitColor[0]);var satch=splitColor[1];var light=splitColor[2];var triOne=0;var triTwo=0;if(hue<150){triOne=hue+150;triTwo=hue+210;}else if(hue>=150&&hue<210){triOne=hue+150;triTwo=hue-150;}else{triOne=hue-210;triTwo=hue-150;}var analogousOneColor=\"\".concat(triOne,\",\").concat(satch,\",\").concat(light);var analogousTwoColor=\"\".concat(triTwo,\",\").concat(satch,\",\").concat(light);var RGBanalogousOne=HSLtoRGB(analogousOneColor);var RGBanalogousTwo=HSLtoRGB(analogousTwoColor);return{RGBanalogousOne:RGBanalogousOne,RGBanalogousTwo:RGBanalogousTwo};}//Color value conversions:\nexport function RGBtoHSL(rgbValue){//slice -n- dice\n// let sliced = rgbValue.slice(1, rgbValue.length -1);\nvar split=rgbValue.split(',');var red=Number(split[0]);var green=Number(split[1]);var blue=Number(split[2]);//Make red, green, blue fractions of 1\nred/=255;green/=255;blue/=255;//Find greatest and smallest channel values\nvar cmin=Math.min(red,green,blue);var cmax=Math.max(red,green,blue);var delta=cmax-cmin;//calculate hue\n//no difference\nvar h=0;var s=0;var l=0;if(delta===0){h=0;}//Red is max\nelse if(cmax===red){h=(green-blue)/delta%6;}//Green is max\nelse if(cmax===green){h=(blue-red)/delta+2;}//Blue is max\nelse{h=(red-green)/delta+4;}h=Math.round(h*60);//Make negative hues positive behind 360 degrees\nif(h<0){h+=360;}//Calculate lightness\nl=(cmax+cmin)/2;//Calculate saturation\ns=delta===0?0:delta/(1-Math.abs(2*l-1));// Multiply by 100\ns=+(s*100).toFixed(1);l=+(l*100).toFixed(1);// console.log(`${h}, ${s}%, ${l}%`)\nreturn\"\".concat(h,\", \").concat(s,\"%, \").concat(l,\"%\");}export function HSLtoRGB(hslValue){//expected input format: '222, 22%, 22%'\nvar split=hslValue.split(',');//slice off '%' and convert to numbers\nvar h=Number(split[0]);var s=Number(split[1].substr(0,split[1].length-1));var l=Number(split[2].substr(0,split[2].length-1));s/=100;l/=100;var c=(1-Math.abs(2*l-1))*s;var x=c*(1-Math.abs(h/60%2-1));var m=l-c/2;var r=0;var g=0;var b=0;if(0<=h&&h<60){r=c;g=x;b=0;}else if(60<=h&&h<120){r=x;g=c;b=0;}else if(120<=h&&h<180){r=0;g=c;b=x;}else if(180<=h&&h<240){r=0;g=x;b=c;}else if(240<=h&&h<300){r=x;g=0;b=c;}else if(300<=h&&h<360){r=c;g=0;b=x;}r=Math.round((r+m)*255);g=Math.round((g+m)*255);b=Math.round((b+m)*255);// console.log('WWWWWWWWW', hslValue, `${r}, ${g}, ${b}`)\n// console.log(`${r}, ${g}, ${b}`)\n//output format: '11, 22, 33's\nreturn\"\".concat(r,\", \").concat(g,\", \").concat(b);}export function HEXtoRGB(hex){var r=0;var g=0;var b=0;if(hex.length===4){r=parseInt(hex[1]+hex[1],16);g=parseInt(hex[2]+hex[2],16);b=parseInt(hex[3]+hex[3],16);}else if(hex.length===7){r=parseInt(hex[1]+hex[2],16);g=parseInt(hex[3]+hex[4],16);b=parseInt(hex[5]+hex[6],16);}return\"\".concat(r,\", \").concat(g,\", \").concat(b);}export function RGBtoHEX(rgb){var tempArray=rgb.split(',');var r=Number(tempArray[0]);var g=Number(tempArray[1]);var b=Number(tempArray[2]);r=r.toString(16);g=g.toString(16);b=b.toString(16);if(r.length===1){r=0+r;}if(g.length===1){g=0+g;}if(b.length===1){b=0+b;}// console.log('CCCCCCCC', `${r}, ${g}, ${b}`)\nreturn\"\".concat(r,\", \").concat(g,\", \").concat(b);}//Console greeting\nvar style=\"font-size: 14px;\"+\"background: #67b26f;\"+\"background: -webkit-linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\"+\"background: linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\"+\"color: white;\"+\"text-align: center;\"+\"padding: 10px 15px;\"+\"width: 100%;\"+\"border-radius: 20px;\";var text=\"%cLet's talk!ðŸ™‚ sirscavo@gmail.com\";console.log(text,style);// export const zenObject = {\n//     0: \"Trust is good... control is better.\",\n//     1: \"I've never known a thing in my life.\",\n//     2: \"Nothing is something worth doing.\",\n//     3: \"Sleep is the best meditation.\",\n//     4: \"Everything has a crack in it, that's how the light gets in.\",\n//     5: \"These mountains that you carry, you were only meant to climb.\",\n//     6: \"Let go or be dragged.\",\n//     7: \"Transcend the bullshit.\",\n//     8: \"And when they played they really played. And when they worked they really worked.\",\n//     9: \"Relax. Nothing is under control.\",\n//     10: \"If you chase two rabbits, you catch none.\",\n//     11: \"Don't be afraid to just sit and watch.\",\n//     12: \"Become comfortable with not knowing.\",\n//     13: \"Life begins where fear ends.\",\n//     14: \"Don't curse the darkness, light a candle.\",\n//     15: \"This will never come again.\",\n//     16: \"Nothing is what you want.\",\n//     17: \"I have lived with several Zen masters - all of them cats.\",\n//     18: \"Matters of great concern should be treated lightly. Matters of small concerns should be treated seriously.\",\n//     19: \"Obstacles don't block the path, they are the path.\",\n//     20: \"If it is to be, it must be me.\",\n//     21: \"Don't enable the scumbags.\",\n//     22: \"The first draft of everything is crap.\",\n//     23: \"When action grows unprofitable, gather information. When information grows unprofitable, sleep.\"\n// }\n// export function generateHardColors() {\n//     const arr = [];\n//     for (let i = 0; i < 6; i++) {\n//         arr.push(randomColor());\n//     }\n//     console.log('generate hard colors', arr)\n//     const newArray = addStyleString(arr);\n//     return newArray;\n// }\n// function addBlurClass(arr) {\n//     const blurredArray = [];\n//     for (let i = 0; i < arr.length; i++) {\n//         let object = arr[i];\n//         object.class = 'blurred';\n//         blurredArray.push(object)\n//     }\n//     return blurredArray;\n// }\nexport function RGBtoHSLvalue(rgbValue){//     //slice -n- dice\n//     let sliced = rgbValue.slice(1, rgbValue.length -1);\n//     let split = sliced.split(',');\n//     let red = Number(split[0]);\n//     let green = Number(split[1]);\n//     let blue = Number(split[2]);\n//     //Make red, green, blue fractions of 1\n//     red /= 255;\n//     green /= 255;\n//     blue /= 255;\n//     //Find greatest and smallest channel values\n//     let cmin = Math.min(red, green, blue);\n//     let cmax = Math.max(red, green, blue);\n//     let delta = cmax - cmin;\n//     //calculate hue\n//     //no difference\n//     let h = 0;\n//     let s = 0;\n//     let l = 0;\n//     if (delta === 0) {\n//         h = 0;\n//     }\n//     //Red is max\n//     else if (cmax === red) {\n//         h = ((green - blue) / delta) % 6;\n//     }\n//     //Green is max\n//     else if (cmax === green) {\n//         h = (blue - red) / delta + 2;\n//     }\n//     //Blue is max\n//     else {\n//         h = (red - green) / delta + 4;\n//     }\n//     h = Math.round(h * 60);\n//     //Make negative hues positive behind 360 degrees\n//     if (h < 0) {\n//         h += 360\n//     }\n//     //Calculate lightness\n//     l = (cmax + cmin) / 2;\n//     //Calculate saturation\n//     s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n//     // Multiply by 100\n//     s = +(s * 100).toFixed(1);\n//     l = +(l * 100).toFixed(1);\n//     return [`${h}`, `${s}`, `${l}`]\n}","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/PureFunctions.js"],"names":["addStyleString","arr","newArray","i","length","push","background","generateEasyArray","returnArr","randomNum","Math","floor","random","randomColor","includes","generateGhostArray","r","g","b","difference","abs","randomPastelColor","generateTriadicArray","ranColor","compliment","findComplement","triOne","findTriadics","RGBtriOneColor","triTwo","RGBtriTwoColor","triCompOne","triCompTwo","generateAnalogousArray","findAnalogous","RGBanalogousOne","RGBanalogousTwo","analogousOne","analogousTwo","generatePastelArray","splitCompOne","splitCompTwo","generateCustomArray","playerColor","color","convertedColor","RGBtoHSL","splitColor","split","hue","Number","satch","light","complimentHue","compHSL","HSLtoRGB","rgbValue","triOneColor","triTwoColor","analogousOneColor","analogousTwoColor","red","green","blue","cmin","min","cmax","max","delta","h","s","l","round","toFixed","hslValue","substr","c","x","m","HEXtoRGB","hex","parseInt","RGBtoHEX","rgb","tempArray","toString","style","text","console","log","RGBtoHSLvalue"],"mappings":"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","sourcesContent":["//Add 3D effect\nfunction addStyleString (arr) {\n    const newArray = []\n\n    //iterate through the given array of colors and add the 3-D effect\n    for (let i = 0; i < arr.length; i++) {\n        newArray.push({ background: `radial-gradient(circle at 100px 100px, rgb(${arr[i]}), #000)` })\n    }\n    return newArray\n}\n\n//Color value array factories:\nexport function generateEasyArray() {\n    //Array of all possible 'easy ' colors (all values either 0 or 255)\n    let arr = [\n        \"0, 0, 0\",\n        \"0, 0, 255\",\n        \"255, 0, 255\",\n        \"255, 255, 255\",\n        \"0, 255, 255\",\n        \"255, 0, 0\",\n        \"0, 255, 0\",\n        \"255, 255, 0\"\n    ];\n\n    let returnArr = []\n    //fill returnArr array with random easy colors\n    while (returnArr.length !== 6) {\n        let randomNum = Math.floor(Math.random() *8);\n        let randomColor = arr[randomNum]\n        if(!returnArr.includes(randomColor)){\n            returnArr.push(randomColor)\n        }\n    }\n    //Add 3D effect\n    const newArray = addStyleString(returnArr)\n    return newArray\n}\n\nexport function generateGhostArray() {\n    const arr = [];\n\n    for (let i = 0; i < 6; i++) {\n        // let temp = randomColor();\n        // let sliced = temp.slice(0)\n        arr.push('255, 255, 255, 0.1');\n    }\n\n    const newArray = addStyleString(arr);\n    // const blurredArray = addBlurClass(newArray)\n    return newArray;\n    // return arr;\n}\n\nfunction randomColor() {\n    //pick a \"red\" from 0 to 255\n    const r = Math.floor(Math.random() * 256);\n    //pick a \"green\" from 0 to 255\n    const g = Math.floor(Math.random() * 256);\n    //pick a \"blue\" from 0 to 255\n    const b = Math.floor(Math.random() * 256);\n    // return RGBtoHSL(`(${r}, ${g}, ${b})`);\n\n    //make sure not too white or black\n    let difference = Math.abs(Math.abs(r - g) + Math.abs(r - b) + Math.abs(g - b))\n    if (difference < 80) {\n        return randomColor()\n    }\n\n    return `${r}, ${g}, ${b}`;\n}\n\n//find high numbers\nfunction randomPastelColor() {\n    //pick a \"red\" from 76 to 180\n    const r = Math.floor(Math.random() * 76) + 180;\n    //pick a \"green\" from 76 to 180\n    const g = Math.floor(Math.random() * 76) + 180;\n    //pick a \"blue\" from 76 to 180\n    const b = Math.floor(Math.random() * 76) + 180;\n\n    //make sure its not too white\n    if ((r+g+b) > 700 || (r+g+b) < 600  || ((Math.abs(r - g)) + (Math.abs(g - b))) < 40) {\n        return randomPastelColor()\n    }\n    // console.log(r, g, b)\n    return `${r}, ${g}, ${b}`;\n}\n\nexport function generateTriadicArray() {\n    const arr = []\n\n    //Pick Random RGB color\n    const ranColor = randomColor()\n    arr.push(ranColor);\n\n    //Find compliment\n    const compliment = findComplement(ranColor)\n\n    //find triadic compliments\n    const triOne = findTriadics(ranColor).RGBtriOneColor;\n    const triTwo = findTriadics(ranColor).RGBtriTwoColor;\n\n    //Find triadic compliments of compliment\n    const triCompOne  = findTriadics(compliment).RGBtriOneColor;\n    const triCompTwo  = findTriadics(compliment).RGBtriTwoColor;\n\n    arr.push(triCompOne, triTwo, compliment, triOne, triCompTwo)\n\n    // console.log(arr)\n    return addStyleString(arr)\n}\n\nexport function generateAnalogousArray() {\n    const arr = []\n    //Pick Random RGB color\n    const ranColor = randomColor()\n    arr.push(ranColor);\n    //Find compliment\n    const compliment = findComplement(ranColor)\n    //find analogous compliments\n    const triOne = findAnalogous(ranColor).RGBanalogousOne;\n    const triTwo = findAnalogous(ranColor).RGBanalogousTwo;\n    //Find analogous compliments of compliment\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo)\n\n    return addStyleString(arr)\n}\n\nexport function generatePastelArray() {\n    const arr = []\n    //Pick Random RGB color\n    const ranColor = randomPastelColor()\n    // console.log('TTTTTTT', ranColor)\n    arr.push(ranColor);\n    //Find compliment\n    const compliment = findComplement(ranColor)\n    //find split compliments\n    const splitCompOne = findAnalogous(ranColor).RGBanalogousOne;\n    const splitCompTwo = findAnalogous(ranColor).RGBanalogousTwo;\n    //Find analogous compliments\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, splitCompOne, compliment, splitCompTwo, analogousTwo)\n    return addStyleString(arr)\n}\n\nexport function generateCustomArray(playerColor) {\n    const arr = []\n    //Pick Random RGB color\n    arr.push(playerColor);\n    //Find compliment\n    const compliment = findComplement(playerColor)\n    //find analogous compliments\n    const triOne = findAnalogous(playerColor).RGBanalogousOne;\n    const triTwo = findAnalogous(playerColor).RGBanalogousTwo;\n    //Find analogous compliments of compliment\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo)\n\n    return addStyleString(arr)\n}\n\n//Find compliment colors:\n\nfunction findComplement (color) {\n    let convertedColor = (RGBtoHSL(color))\n\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n    let complimentHue = 0;\n\n    if (hue >= 180) {\n        complimentHue = hue - 180;\n    } else {\n        complimentHue = hue + 180;\n    }\n\n    let compHSL = (`${complimentHue},${satch},${light}`)\n    // console.log('complement', compHSL, HSLtoRGB(compHSL))\n    return HSLtoRGB(compHSL);\n}\n\nfunction findTriadics (rgbValue) {\n    let convertedColor = RGBtoHSL(rgbValue)\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n\n    let triOne = 0;\n    let triTwo = 0;\n    // console.log('triadics', rgbValue, convertedColor, hue, satch, light)\n    if (hue < 120) {\n        triOne = hue + 120;\n        triTwo = hue + 240;\n    } else if (hue >= 120 && hue < 240) {\n        triOne = hue + 120;\n        triTwo = hue - 120;\n    } else {\n        triOne = hue - 240;\n        triTwo = hue - 120;\n    }\n    let triOneColor = (`${triOne},${satch},${light}`)\n    let triTwoColor = (`${triTwo},${satch},${light}`)\n    // console.log('triadics', triOneColor)\n    let RGBtriOneColor = HSLtoRGB(triOneColor);\n    let RGBtriTwoColor = HSLtoRGB(triTwoColor);\n\n    return {RGBtriOneColor, RGBtriTwoColor}\n}\n\nfunction findAnalogous (rgbValue) {\n    let convertedColor = RGBtoHSL(rgbValue)\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n\n    let triOne = 0;\n    let triTwo = 0;\n\n    if (hue < 150) {\n        triOne = hue + 150;\n        triTwo = hue + 210;\n    } else if (hue >= 150 && hue < 210) {\n        triOne = hue + 150;\n        triTwo = hue - 150;\n    } else {\n        triOne = hue - 210;\n        triTwo = hue - 150;\n    }\n    let analogousOneColor = (`${triOne},${satch},${light}`)\n    let analogousTwoColor = (`${triTwo},${satch},${light}`)\n    let RGBanalogousOne = HSLtoRGB(analogousOneColor)\n    let RGBanalogousTwo = HSLtoRGB(analogousTwoColor)\n\n    return {RGBanalogousOne, RGBanalogousTwo}\n}\n\n\n//Color value conversions:\n\nexport function RGBtoHSL (rgbValue) {\n    //slice -n- dice\n    // let sliced = rgbValue.slice(1, rgbValue.length -1);\n    let split = rgbValue.split(',');\n    let red = Number(split[0]);\n    let green = Number(split[1]);\n    let blue = Number(split[2]);\n\n    //Make red, green, blue fractions of 1\n    red /= 255;\n    green /= 255;\n    blue /= 255;\n\n    //Find greatest and smallest channel values\n    let cmin = Math.min(red, green, blue);\n    let cmax = Math.max(red, green, blue);\n    let delta = cmax - cmin;\n\n    //calculate hue\n    //no difference\n    let h = 0;\n    let s = 0;\n    let l = 0;\n    if (delta === 0) {\n        h = 0;\n    }\n    //Red is max\n    else if (cmax === red) {\n        h = ((green - blue) / delta) % 6;\n    }\n    //Green is max\n    else if (cmax === green) {\n        h = (blue - red) / delta + 2;\n    }\n    //Blue is max\n    else {\n        h = (red - green) / delta + 4;\n    }\n    h = Math.round(h * 60);\n    //Make negative hues positive behind 360 degrees\n    if (h < 0) {\n        h += 360\n    }\n    //Calculate lightness\n    l = (cmax + cmin) / 2;\n    //Calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    // Multiply by 100\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    // console.log(`${h}, ${s}%, ${l}%`)\n    return(`${h}, ${s}%, ${l}%`)\n}\n\nexport function HSLtoRGB (hslValue) {\n    //expected input format: '222, 22%, 22%'\n    let split = hslValue.split(',');\n\n    //slice off '%' and convert to numbers\n    let h = Number(split[0]);\n    let s = Number(split[1].substr(0,split[1].length -1));\n    let l = Number(split[2].substr(0,split[2].length -1));\n\n    s /= 100;\n    l /= 100;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s;\n    let x = c * (1 - Math.abs((h / 60) % 2 - 1));\n    let m = l - c/2;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n\n    if (0 <= h && h < 60) {\n        r = c; g = x; b = 0;\n    } else if (60 <= h && h < 120) {\n        r = x; g = c; b = 0;\n    } else if (120 <= h && h < 180) {\n        r = 0; g = c; b = x;\n    } else if (180 <= h && h < 240) {\n        r = 0; g = x; b = c;\n    } else if (240 <= h && h < 300) {\n        r = x; g = 0; b = c;\n    } else if (300 <= h && h < 360) {\n        r = c; g = 0; b = x;\n    }\n\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    // console.log('WWWWWWWWW', hslValue, `${r}, ${g}, ${b}`)\n    // console.log(`${r}, ${g}, ${b}`)\n    //output format: '11, 22, 33's\n    return `${r}, ${g}, ${b}`;\n}\n\nexport function HEXtoRGB (hex) {\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n    if (hex.length === 4) {\n        r = parseInt(hex[1] + hex[1], 16);\n        g = parseInt(hex[2] + hex[2], 16);\n        b = parseInt(hex[3] + hex[3], 16);\n    } else if (hex.length === 7) {\n        r = parseInt(hex[1] + hex[2], 16)\n        g = parseInt(hex[3] + hex[4], 16);\n        b = parseInt(hex[5] + hex[6], 16);\n    }\n    return `${r}, ${g}, ${b}`\n}\n\nexport function RGBtoHEX (rgb) {\n    let tempArray = rgb.split(',')\n    let r = Number(tempArray[0])\n    let g = Number(tempArray[1])\n    let b = Number(tempArray[2])\n    r = r.toString(16)\n    g = g.toString(16)\n    b = b.toString(16)\n\n    if (r.length ===1)  {r = 0 + r}\n    if (g.length ===1)  {g = 0 + g}\n    if (b.length ===1)  {b = 0 + b}\n\n    // console.log('CCCCCCCC', `${r}, ${g}, ${b}`)\n    return `${r}, ${g}, ${b}`\n}\n\n\n//Console greeting\nconst style = \"font-size: 14px;\" +\n  \"background: #67b26f;\" +\n  \"background: -webkit-linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" +\n  \"background: linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" +\n  \"color: white;\" +\n  \"text-align: center;\" +\n  \"padding: 10px 15px;\" +\n  \"width: 100%;\" +\n  \"border-radius: 20px;\";\n\nconst text = \"%cLet's talk!ðŸ™‚ sirscavo@gmail.com\";\n\nconsole.log(text, style);\n\n// export const zenObject = {\n//     0: \"Trust is good... control is better.\",\n//     1: \"I've never known a thing in my life.\",\n//     2: \"Nothing is something worth doing.\",\n//     3: \"Sleep is the best meditation.\",\n//     4: \"Everything has a crack in it, that's how the light gets in.\",\n//     5: \"These mountains that you carry, you were only meant to climb.\",\n//     6: \"Let go or be dragged.\",\n//     7: \"Transcend the bullshit.\",\n//     8: \"And when they played they really played. And when they worked they really worked.\",\n//     9: \"Relax. Nothing is under control.\",\n//     10: \"If you chase two rabbits, you catch none.\",\n//     11: \"Don't be afraid to just sit and watch.\",\n//     12: \"Become comfortable with not knowing.\",\n//     13: \"Life begins where fear ends.\",\n//     14: \"Don't curse the darkness, light a candle.\",\n//     15: \"This will never come again.\",\n//     16: \"Nothing is what you want.\",\n//     17: \"I have lived with several Zen masters - all of them cats.\",\n//     18: \"Matters of great concern should be treated lightly. Matters of small concerns should be treated seriously.\",\n//     19: \"Obstacles don't block the path, they are the path.\",\n//     20: \"If it is to be, it must be me.\",\n//     21: \"Don't enable the scumbags.\",\n//     22: \"The first draft of everything is crap.\",\n//     23: \"When action grows unprofitable, gather information. When information grows unprofitable, sleep.\"\n// }\n\n\n// export function generateHardColors() {\n//     const arr = [];\n\n//     for (let i = 0; i < 6; i++) {\n//         arr.push(randomColor());\n//     }\n//     console.log('generate hard colors', arr)\n\n//     const newArray = addStyleString(arr);\n//     return newArray;\n// }\n\n// function addBlurClass(arr) {\n//     const blurredArray = [];\n\n//     for (let i = 0; i < arr.length; i++) {\n//         let object = arr[i];\n//         object.class = 'blurred';\n//         blurredArray.push(object)\n//     }\n//     return blurredArray;\n// }\n\nexport function RGBtoHSLvalue (rgbValue) {\n    //     //slice -n- dice\n    //     let sliced = rgbValue.slice(1, rgbValue.length -1);\n    //     let split = sliced.split(',');\n    //     let red = Number(split[0]);\n    //     let green = Number(split[1]);\n    //     let blue = Number(split[2]);\n\n    //     //Make red, green, blue fractions of 1\n    //     red /= 255;\n    //     green /= 255;\n    //     blue /= 255;\n\n    //     //Find greatest and smallest channel values\n    //     let cmin = Math.min(red, green, blue);\n    //     let cmax = Math.max(red, green, blue);\n    //     let delta = cmax - cmin;\n\n    //     //calculate hue\n    //     //no difference\n    //     let h = 0;\n    //     let s = 0;\n    //     let l = 0;\n    //     if (delta === 0) {\n    //         h = 0;\n    //     }\n    //     //Red is max\n    //     else if (cmax === red) {\n    //         h = ((green - blue) / delta) % 6;\n    //     }\n    //     //Green is max\n    //     else if (cmax === green) {\n    //         h = (blue - red) / delta + 2;\n    //     }\n    //     //Blue is max\n    //     else {\n    //         h = (red - green) / delta + 4;\n    //     }\n    //     h = Math.round(h * 60);\n    //     //Make negative hues positive behind 360 degrees\n    //     if (h < 0) {\n    //         h += 360\n    //     }\n    //     //Calculate lightness\n    //     l = (cmax + cmin) / 2;\n    //     //Calculate saturation\n    //     s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    //     // Multiply by 100\n    //     s = +(s * 100).toFixed(1);\n    //     l = +(l * 100).toFixed(1);\n\n    //     return [`${h}`, `${s}`, `${l}`]\n}\n"]},"metadata":{},"sourceType":"module"}