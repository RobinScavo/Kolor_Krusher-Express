{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/src/Controller.js\";\nimport React from 'react';\nimport { generateEasyArray, generateTriadicArray, generateAnalogousArray, generateGhostArray, generatePastelArray, generateCustomArray } from './pureFunctions';\nimport ColorContext from './context/ColorContext';\nimport Backdrop from './Components/Backdrop/Backdrop';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport BattleInstructionModal from './Components/Modals/BattleInstructionModal';\nimport ConvertInstructionModal from './Components/Modals/ConvertInstructionModal';\nimport ScoringModal from './Components/Modals/ScoringModal';\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nvar Controller = /*#__PURE__*/function (_React$Component) {\n  _inherits(Controller, _React$Component);\n\n  var _super = _createSuper(Controller);\n\n  function Controller(props) {\n    var _this;\n\n    _classCallCheck(this, Controller);\n\n    var battleArray = generateAnalogousArray();\n    _this = _super.call(this, props);\n\n    _this.toggleMainModal = function () {\n      _this.setState({\n        repeatRender: false,\n        createAnalogous: false,\n        MainModal: !_this.state.MainModal,\n        coinArray: [true, true, true],\n        round: 0,\n        coins: 0,\n        score: 0,\n        timer: 15\n      });\n    };\n\n    _this.toggleLoginModal = function () {\n      return _this.setState({\n        loginModal: !_this.state.loginModal\n      });\n    };\n\n    _this.toggleBioModal = function () {\n      return _this.setState({\n        bioModal: !_this.state.bioModal\n      });\n    };\n\n    _this.togglePlayerPageModal = function () {\n      return _this.setState({\n        playerPageModal: !_this.state.playerPageModal\n      });\n    };\n\n    _this.toggleBattleInstructionModal = function () {\n      return _this.setState({\n        battleInstructionModal: !_this.state.battleInstructionModal\n      });\n    };\n\n    _this.toggleConvertInstructionModal = function () {\n      return _this.setState({\n        convertInstructionModal: !_this.state.convertInstructionModal\n      });\n    };\n\n    _this.toggleScoringModal = function () {\n      return _this.setState({\n        scoringModal: !_this.state.scoringModal\n      });\n    };\n\n    _this.toggleGameOn = function () {\n      return _this.setState({\n        gameOn: false\n      });\n    };\n\n    _this.toggleWindowDisplay = function () {\n      return _this.setState({\n        windowDisplayed: !_this.state.windowDisplayed\n      });\n    };\n\n    _this.toggleCustomDisplay = function () {\n      return _this.setState({\n        customDisplayed: !_this.state.customDisplayed\n      });\n    };\n\n    _this.clearRounds = function () {\n      return _this.setState({\n        round: 0\n      });\n    };\n\n    _this.toggleRepeatRender = function () {\n      if (_this.state.repeatRender) {\n        _this.setState({\n          createPastel: false,\n          createTriadic: false,\n          createAnalogous: false,\n          repeatRender: false\n        });\n      } else {\n        _this.setState({\n          repeatRender: true\n        });\n      }\n    };\n\n    _this.toggleCreateAnalogous = function () {\n      _this.setState({\n        createAnalogous: true\n      });\n\n      _this.clearBoard();\n\n      setTimeout(function () {\n        _this.updateColorArrayContext();\n\n        if (!_this.state.repeatRender) {\n          _this.setState({\n            createAnalogous: false\n          });\n        }\n      }, 1100);\n    };\n\n    _this.toggleCreatePastel = function () {\n      _this.setState({\n        createPastel: true\n      });\n\n      _this.clearBoard();\n\n      setTimeout(function () {\n        _this.updateColorArrayContext();\n\n        if (!_this.state.repeatRender) {\n          _this.setState({\n            createPastel: false\n          });\n        }\n      }, 1100);\n    };\n\n    _this.toggleCreateTriadic = function () {\n      _this.setState({\n        createTriadic: true\n      });\n\n      _this.clearBoard();\n\n      setTimeout(function () {\n        _this.updateColorArrayContext();\n\n        if (!_this.state.repeatRender) {\n          _this.setState({\n            createTriadic: false\n          });\n        }\n      }, 1100);\n    };\n\n    _this.setCustomColor = function (custom) {\n      _this.setState({\n        createCustom: true,\n        customColor: custom\n      });\n\n      _this.clearBoard();\n\n      setTimeout(function () {\n        _this.updateColorArrayContext();\n\n        _this.setState({\n          customDisplayed: true,\n          createCustom: false\n        });\n      }, 1100);\n      setTimeout(function () {\n        _this.setState({\n          customDisplayed: false\n        });\n      }, 3100);\n    };\n\n    _this.toggleStartBattle = function () {\n      if (_this.state.startConvert) _this.toggleStartConvert();\n\n      _this.setState({\n        startBattle: !_this.state.startBattle\n      });\n    };\n\n    _this.toggleStartConvert = function () {\n      if (_this.state.startBattle) _this.toggleStartBattle();\n\n      _this.setState({\n        startConvert: !_this.state.startConvert\n      });\n    };\n\n    _this.startGame = function () {\n      _this.clearBoard();\n\n      _this.timeout = setTimeout(function () {\n        _this.setState({\n          gameOn: true\n        });\n\n        _this.updateColorArrayContext();\n      }, 1100);\n    };\n\n    _this.removeCoin = function () {\n      var tempArray = [];\n\n      if (_this.state.coinArray[0]) {\n        tempArray = [false, true, true];\n      } else if (_this.state.coinArray[1]) {\n        tempArray = [false, false, true];\n      } else {\n        tempArray = [false, false, false];\n      }\n\n      _this.setState({\n        coinArray: tempArray\n      });\n    };\n\n    _this.correctGuess = function () {\n      var coinCount = _this.state.coins;\n\n      if (_this.state.startBattle) {\n        var _iterator = _createForOfIteratorHelper(_this.state.coinArray),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var coin = _step.value;\n            if (coin) coinCount++;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        _this.setState({\n          gameOn: false\n        });\n\n        setTimeout(function () {\n          _this.setState({\n            coins: coinCount\n          });\n        }, 2700);\n      }\n\n      _this.clearBoard();\n\n      if (_this.state.round < 6) {\n        setTimeout(function () {\n          _this.updateColorArrayContext();\n        }, 1500);\n      } else {\n        _this.setState({\n          gameOn: false,\n          startBattle: false\n        });\n\n        setTimeout(function () {\n          _this.toggleScoringModal();\n        }, 2000);\n      }\n    };\n\n    _this.newGame = function () {\n      _this.setState({\n        round: 0,\n        coins: 0,\n        score: 0,\n        timer: 15,\n        coinArray: [true, true, true]\n      });\n\n      _this.toggleStartBattle();\n\n      _this.startGame();\n    };\n\n    _this.clearBoard = function () {\n      var clearArray = [];\n\n      for (var i = 0; i < 6; i++) {\n        clearArray.push({\n          background: \"radial-gradient(circle at 100px 100px, rgb(255, 255, 255, 0.1), #000)\"\n        });\n      }\n\n      _this.setState({\n        colorArray: clearArray\n      });\n    };\n\n    _this.updateTimerContext = function (seconds) {\n      _this.setState({\n        timer: seconds\n      });\n\n      setTimeout(function () {\n        _this.setState({\n          score: _this.state.score + seconds\n        });\n      }, 1700);\n    };\n\n    _this.updateColorArrayContext = function () {\n      var randomSix = Math.floor(Math.random() * 6);\n      var targetArray = ['colorOne', 'colorTwo', 'colorThree', 'colorFour', 'colorFive', 'colorSix'];\n      var targetId = targetArray[randomSix];\n      var arr = [];\n      if (_this.state.startConvert && !_this.state.createTriadic && !_this.state.createAnalogous && !_this.state.createPastel) arr = generateGhostArray();\n      if (_this.state.startConvert && _this.state.createTriadic && !_this.state.createAnalogous && !_this.state.createPastel) arr = generateTriadicArray();\n      if (_this.state.startConvert && _this.state.createAnalogous && !_this.state.createTriadic && !_this.state.createPastel) arr = generateAnalogousArray();\n      if (_this.state.startConvert && _this.state.createPastel && !_this.state.createTriadic && !_this.state.createAnalogous) arr = generatePastelArray();\n      if (_this.state.startConvert && _this.state.createCustom) arr = generateCustomArray(_this.state.customColor);\n\n      if (_this.state.startBattle) {\n        _this.state.round <= 2 ? arr = generateEasyArray() : arr = generateTriadicArray();\n      }\n\n      if (!_this.state.startBattle && !_this.state.startConvert) {\n        arr = generateAnalogousArray();\n      }\n\n      if (_this.state.startBattle) {\n        //display target value\n        var targetColor = arr[randomSix];\n        var firstSlice = targetColor.background.slice(42);\n        var colorTarget = firstSlice.slice(0, firstSlice.length - 7);\n\n        _this.setState({\n          coinArray: [true, true, true],\n          round: _this.state.round + 1,\n          colorTargetId: targetId,\n          colorTarget: colorTarget,\n          gameOn: true\n        });\n      }\n\n      _this.setState({\n        colorArray: arr\n      });\n\n      if (_this.state.repeatRender) {\n        setTimeout(function () {\n          _this.clearBoard();\n        }, 1100);\n        setTimeout(function () {\n          _this.updateColorArrayContext();\n        }, 2200);\n      }\n    };\n\n    _this.state = {\n      colorArray: battleArray,\n      colorTargetId: '',\n      colorTarget: null,\n      round: 0,\n      score: 0,\n      timer: 15,\n      coins: 0,\n      coinArray: [true, true, true],\n      gameOn: false,\n      windowDisplayed: false,\n      customDisplayed: false,\n      customColor: '255, 255, 255',\n      // onLogin: props.onLogin,\n      MainModal: false,\n      loginModal: false,\n      bioModal: false,\n      playerPageModal: false,\n      battleInstructionModal: false,\n      convertInstructionModal: false,\n      scoringModal: false,\n      repeatRender: true,\n      startBattle: false,\n      startConvert: false,\n      createTriadic: false,\n      createAnalogous: false,\n      createPastel: false,\n      createCustom: false,\n      toggleMainModal: _this.toggleMainModal,\n      toggleLoginModal: _this.toggleLoginModal,\n      toggleBioModal: _this.toggleBioModal,\n      togglePlayerPageModal: _this.togglePlayerPageModal,\n      toggleBattleInstructionModal: _this.toggleBattleInstructionModal,\n      toggleConvertInstructionModal: _this.toggleConvertInstructionModal,\n      toggleScoringModal: _this.toggleScoringModal,\n      toggleWindowDisplay: _this.toggleWindowDisplay,\n      toggleGameOn: _this.toggleGameOn,\n      toggleStartBattle: _this.toggleStartBattle,\n      toggleStartConvert: _this.toggleStartConvert,\n      toggleRepeatRender: _this.toggleRepeatRender,\n      toggleCreateTriadic: _this.toggleCreateTriadic,\n      toggleCreateAnalogous: _this.toggleCreateAnalogous,\n      toggleCreatePastel: _this.toggleCreatePastel,\n      setCustomColor: _this.setCustomColor,\n      startGame: _this.startGame,\n      correctGuess: _this.correctGuess,\n      updateTimer: _this.updateTimerContext,\n      removeCoin: _this.removeCoin,\n      clearRounds: _this.clearRounds,\n      newGame: _this.newGame\n    };\n    return _this;\n  }\n\n  _createClass(Controller, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.toggleCreateAnalogous();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameBoardDiv\",\n        value: this.state,\n        children: /*#__PURE__*/_jsxDEV(ColorContext.Provider, {\n          value: this.state,\n          children: /*#__PURE__*/_jsxDEV(ModalProvider, {\n            children: [/*#__PURE__*/_jsxDEV(Backdrop, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 25\n            }, this), this.state.MainModal && /*#__PURE__*/_jsxDEV(Modal, {\n              children: /*#__PURE__*/_jsxDEV(MainModal, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 29\n            }, this), this.state.loginModal && /*#__PURE__*/_jsxDEV(Modal, {\n              children: /*#__PURE__*/_jsxDEV(LoginModal, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 29\n            }, this), this.state.bioModal && /*#__PURE__*/_jsxDEV(Modal, {\n              children: /*#__PURE__*/_jsxDEV(MyBioModal, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 29\n            }, this), this.state.playerPageModal && /*#__PURE__*/_jsxDEV(Modal, {\n              children: /*#__PURE__*/_jsxDEV(PlayerPageModal, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 29\n            }, this), this.state.battleInstructionModal && /*#__PURE__*/_jsxDEV(Modal, {\n              children: /*#__PURE__*/_jsxDEV(BattleInstructionModal, {\n                toggleBattleInstructionModal: this.state.toggleBattleInstructionModal,\n                newGame: this.state.newGame\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 29\n            }, this), this.state.convertInstructionModal && /*#__PURE__*/_jsxDEV(Modal, {\n              children: /*#__PURE__*/_jsxDEV(ConvertInstructionModal, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 29\n            }, this), this.state.scoringModal && /*#__PURE__*/_jsxDEV(Modal, {\n              children: /*#__PURE__*/_jsxDEV(ScoringModal, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return Controller;\n}(React.Component);\n\nexport default Controller;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/src/Controller.js"],"names":["React","generateEasyArray","generateTriadicArray","generateAnalogousArray","generateGhostArray","generatePastelArray","generateCustomArray","ColorContext","Backdrop","MainModal","LoginModal","PlayerPageModal","MyBioModal","BattleInstructionModal","ConvertInstructionModal","ScoringModal","Modal","ModalProvider","Controller","props","battleArray","toggleMainModal","setState","repeatRender","createAnalogous","state","coinArray","round","coins","score","timer","toggleLoginModal","loginModal","toggleBioModal","bioModal","togglePlayerPageModal","playerPageModal","toggleBattleInstructionModal","battleInstructionModal","toggleConvertInstructionModal","convertInstructionModal","toggleScoringModal","scoringModal","toggleGameOn","gameOn","toggleWindowDisplay","windowDisplayed","toggleCustomDisplay","customDisplayed","clearRounds","toggleRepeatRender","createPastel","createTriadic","toggleCreateAnalogous","clearBoard","setTimeout","updateColorArrayContext","toggleCreatePastel","toggleCreateTriadic","setCustomColor","custom","createCustom","customColor","toggleStartBattle","startConvert","toggleStartConvert","startBattle","startGame","timeout","removeCoin","tempArray","correctGuess","coinCount","coin","newGame","clearArray","i","push","background","colorArray","updateTimerContext","seconds","randomSix","Math","floor","random","targetArray","targetId","arr","targetColor","firstSlice","slice","colorTarget","length","colorTargetId","updateTimer","Component"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n    generateEasyArray,\n    generateTriadicArray,\n    generateAnalogousArray,\n    generateGhostArray,\n    generatePastelArray,\n    generateCustomArray,\n} from './pureFunctions';\n\nimport ColorContext from './context/ColorContext';\n\nimport Backdrop from './Components/Backdrop/Backdrop'\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport BattleInstructionModal from './Components/Modals/BattleInstructionModal'\nimport ConvertInstructionModal from './Components/Modals/ConvertInstructionModal'\nimport ScoringModal from './Components/Modals/ScoringModal'\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n    constructor (props) {\n        const battleArray = generateAnalogousArray();\n\n        super (props);\n        this.state = {\n            colorArray: battleArray,\n            colorTargetId: '',\n            colorTarget: null,\n            round: 0,\n            score: 0,\n            timer: 15,\n            coins: 0,\n            coinArray: [true, true, true],\n            gameOn: false,\n            windowDisplayed: false,\n            customDisplayed: false,\n            customColor: '255, 255, 255',\n\n            // onLogin: props.onLogin,\n            MainModal: false,\n            loginModal: false,\n            bioModal: false,\n            playerPageModal: false,\n            battleInstructionModal: false,\n            convertInstructionModal: false,\n            scoringModal: false,\n            repeatRender: true,\n\n            startBattle: false,\n            startConvert: false,\n\n            createTriadic: false,\n            createAnalogous: false,\n            createPastel: false,\n            createCustom: false,\n\n            toggleMainModal: this.toggleMainModal,\n            toggleLoginModal: this.toggleLoginModal,\n            toggleBioModal: this.toggleBioModal,\n            togglePlayerPageModal: this.togglePlayerPageModal,\n            toggleBattleInstructionModal: this.toggleBattleInstructionModal,\n            toggleConvertInstructionModal: this.toggleConvertInstructionModal,\n            toggleScoringModal: this.toggleScoringModal,\n\n            toggleWindowDisplay: this.toggleWindowDisplay,\n\n            toggleGameOn: this.toggleGameOn,\n            toggleStartBattle: this.toggleStartBattle,\n            toggleStartConvert: this.toggleStartConvert,\n            toggleRepeatRender: this.toggleRepeatRender,\n\n            toggleCreateTriadic: this.toggleCreateTriadic,\n            toggleCreateAnalogous: this.toggleCreateAnalogous,\n            toggleCreatePastel: this.toggleCreatePastel,\n            setCustomColor: this.setCustomColor,\n\n            startGame: this.startGame,\n            correctGuess: this.correctGuess,\n            updateTimer: this.updateTimerContext,\n            removeCoin: this.removeCoin,\n            clearRounds: this.clearRounds,\n            newGame: this.newGame\n        }\n    }\n\n    componentDidMount() {this.toggleCreateAnalogous()}\n\n    toggleMainModal = () => {\n        this.setState({\n            repeatRender: false,\n            createAnalogous: false,\n            MainModal: !this.state.MainModal,\n            coinArray: [true, true, true],\n            round: 0,\n            coins: 0,\n            score: 0,\n            timer: 15\n        })\n    }\n\n    toggleLoginModal = () => this.setState({ loginModal: !this.state.loginModal })\n    toggleBioModal = () => this.setState({ bioModal: !this.state.bioModal })\n    togglePlayerPageModal = () => this.setState({ playerPageModal: !this.state.playerPageModal })\n    toggleBattleInstructionModal = () => this.setState({ battleInstructionModal: !this.state.battleInstructionModal })\n    toggleConvertInstructionModal = () => this.setState({ convertInstructionModal: !this.state.convertInstructionModal })\n    toggleScoringModal = () => this.setState({ scoringModal: !this.state.scoringModal});\n\n    toggleGameOn = () => this.setState({ gameOn: false })\n    toggleWindowDisplay = () => this.setState({ windowDisplayed: !this.state.windowDisplayed})\n    toggleCustomDisplay = () => this.setState({ customDisplayed: !this.state.customDisplayed})\n    clearRounds = () => this.setState({ round: 0})\n\n    toggleRepeatRender = () => {\n        if (this.state.repeatRender) {\n            this.setState({\n                createPastel: false,\n                createTriadic: false,\n                createAnalogous: false,\n                repeatRender: false\n            })\n        } else {\n            this.setState({\n                repeatRender: true\n            })\n        }\n    }\n\n    toggleCreateAnalogous = () => {\n        this.setState({ createAnalogous: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createAnalogous: false})\n            }\n        }, 1100)\n    }\n\n    toggleCreatePastel = () => {\n        this.setState({ createPastel: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createPastel: false})\n            }\n        }, 1100)\n    }\n\n    toggleCreateTriadic = () => {\n        this.setState({ createTriadic: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createTriadic: false});\n            }\n        }, 1100)\n    }\n\n    setCustomColor = (custom) => {\n        this.setState({\n            createCustom: true,\n            customColor: custom,\n        });\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({\n                customDisplayed: true,\n                createCustom: false\n            });\n        }, 1100)\n        setTimeout(() => {\n            this.setState({\n                customDisplayed: false\n            })\n        }, 3100)\n    }\n\n    toggleStartBattle = () => {\n        if (this.state.startConvert) this.toggleStartConvert();\n        this.setState({ startBattle: !this.state.startBattle });\n    }\n\n    toggleStartConvert = () => {\n        if (this.state.startBattle) this.toggleStartBattle();\n        this.setState({ startConvert: !this.state.startConvert});\n    }\n\n    startGame = () => {\n        this.clearBoard();\n        this.timeout = setTimeout(() => {\n            this.setState({ gameOn: true })\n            this.updateColorArrayContext()\n        }, 1100)\n    }\n\n    removeCoin = () => {\n        let tempArray = [];\n        if (this.state.coinArray[0]) {\n            tempArray = [false, true, true]\n        } else if (this.state.coinArray[1]) {\n            tempArray = [false, false, true]\n        } else {\n            tempArray = [false, false, false]\n        }\n        this.setState ({ coinArray: tempArray })\n    }\n\n    correctGuess = () => {\n        let coinCount = this.state.coins;\n\n        if (this.state.startBattle) {\n            for (let coin of this.state.coinArray) {\n                if (coin) coinCount++\n            }\n\n            this.setState({ gameOn: false });\n            setTimeout(() => {\n                this.setState({ coins: coinCount })\n            }, 2700)\n        }\n\n        this.clearBoard();\n        if (this.state.round < 6) {\n            setTimeout(() => {\n                this.updateColorArrayContext();\n            }, 1500)\n        } else {\n            this.setState({\n                gameOn: false,\n                startBattle: false\n            })\n            setTimeout(() => {\n                this.toggleScoringModal()\n            }, 2000)\n        }\n    }\n\n    newGame = () => {\n        this.setState({\n            round: 0,\n            coins: 0,\n            score: 0,\n            timer: 15,\n            coinArray: [true, true, true]\n        })\n        this.toggleStartBattle();\n        this.startGame();\n    }\n\n    clearBoard = () => {\n        let clearArray = []\n        for (let i = 0; i < 6; i++) {\n            clearArray.push({ background:\n                `radial-gradient(circle at 100px 100px, rgb(255, 255, 255, 0.1), #000)`\n            })\n        }\n        this.setState({\n            colorArray: clearArray,\n        })\n    }\n\n    updateTimerContext = (seconds) => {\n        this.setState({ timer: seconds })\n        setTimeout(() => {\n            this.setState({ score: this.state.score + seconds })\n        }, 1700)\n    }\n\n    updateColorArrayContext = () => {\n        let randomSix = Math.floor(Math.random() * 6)\n        let targetArray = [\n            'colorOne',\n            'colorTwo',\n            'colorThree',\n            'colorFour',\n            'colorFive',\n            'colorSix'\n        ]\n        let targetId = targetArray[randomSix];\n        let arr = [];\n\n        if (this.state.startConvert &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateGhostArray();\n\n        if (this.state.startConvert &&\n            this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateTriadicArray();\n\n        if (this.state.startConvert &&\n            this.state.createAnalogous &&\n            !this.state.createTriadic &&\n            !this.state.createPastel)\n                arr = generateAnalogousArray();\n\n        if (this.state.startConvert &&\n            this.state.createPastel &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous)\n                arr = generatePastelArray();\n\n        if (this.state.startConvert &&\n            this.state.createCustom)\n                arr = generateCustomArray(this.state.customColor);\n\n        if (this.state.startBattle) {\n            this.state.round <= 2\n                ? arr = generateEasyArray()\n                : arr = generateTriadicArray()\n        }\n\n\n        if (!this.state.startBattle &&\n            !this.state.startConvert) {\n                arr = generateAnalogousArray()\n        }\n\n\n        if (this.state.startBattle) {\n            //display target value\n            const targetColor = arr[randomSix]\n            const firstSlice = (targetColor.background.slice(42))\n            let colorTarget = (firstSlice.slice(0, firstSlice.length -7))\n\n            this.setState({\n                coinArray: [true, true, true],\n                round: this.state.round + 1,\n                colorTargetId: targetId,\n                colorTarget: colorTarget,\n                gameOn: true,\n            })\n        }\n\n        this.setState({\n            colorArray: arr,\n        });\n\n        if (this.state.repeatRender) {\n            setTimeout(() => {\n                this.clearBoard();\n            }, 1100)\n            setTimeout(() => {\n                this.updateColorArrayContext();\n            }, 2200)\n        }\n    }\n\n    render() {\n        return (\n            <div className='gameBoardDiv' value={this.state}>\n                <ColorContext.Provider value={this.state}>\n                    <ModalProvider>\n                        <Backdrop />\n\n                        {/* Modal Control */}\n                        {this.state.MainModal &&\n                            <Modal >\n                                <MainModal />\n                            </Modal>\n                        }\n                        {this.state.loginModal &&\n                            <Modal>\n                                <LoginModal />\n                            </Modal>\n                        }\n                        {this.state.bioModal &&\n                            <Modal>\n                                <MyBioModal />\n                            </Modal>\n                        }\n                        {this.state.playerPageModal &&\n                            <Modal>\n                                <PlayerPageModal />\n                            </Modal>\n                        }\n                        {this.state.battleInstructionModal &&\n                            <Modal>\n                                <BattleInstructionModal\n                                    toggleBattleInstructionModal={this.state.toggleBattleInstructionModal}\n                                    newGame={this.state.newGame}\n                                />\n                            </Modal>\n                        }\n                        {this.state.convertInstructionModal &&\n                            <Modal>\n                                <ConvertInstructionModal />\n                            </Modal>\n                        }\n                        {this.state.scoringModal &&\n                            <Modal >\n                                <ScoringModal />\n                            </Modal>\n                        }\n                    </ModalProvider>\n                </ColorContext.Provider>\n            </div>\n        )\n    }\n}\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}