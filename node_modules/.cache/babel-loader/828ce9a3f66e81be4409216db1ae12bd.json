{"ast":null,"code":"// import React from 'react'\n// import {\n//     generateEasyArray,\n//     generateTriadicArray,\n//     generateAnalogousArray,\n//     generateGhostArray,\n//     generatePastelArray,\n//     generateCustomArray,\n// } from './PureFunctions';\n// import Backdrop from './Components/Backdrop/Backdrop'\n// import ColorContext from './ColorContext';\n// import MainModal from './Components/Modals/MainModal';\n// import LoginModal from './Components/Modals/LoginFormModal';\n// import PlayerPageModal from './Components/Modals/PlayerPageModal';\n// import MyBioModal from './Components/Modals/MyBioModal';\n// import { Modal } from './ModalContext/Modal';\n// import { ModalProvider } from './ModalContext/Modal';\n// class Controller extends React.Component {\n//     constructor (props) {\n//         const battleArray = generateAnalogousArray();\n//         super (props);\n//         this.state = {\n//             colorArray: battleArray,\n//             colorTargetId: '',\n//             colorTarget: null,\n//             round: 0,\n//             score: 0,\n//             timer: 15,\n//             coins: 0,\n//             coinArray: [true, true, true],\n//             gameOn: false,\n//             windowDisplayed: false,\n//             customColor: '255, 255, 255',\n//             MainModal: false,\n//             loginModal: false,\n//             bioModal: false,\n//             playerPageModal: false,\n//             // repeatRender: true,\n//             startBattle: false,\n//             startConvert: false,\n//             createTriadic: false,\n//             createAnalogous: false,\n//             createPastel: false,\n//             createCustom: false,\n//             toggleMainModal: this.toggleMainModal,\n//             toggleLoginModal: this.toggleLoginModal,\n//             toggleBioModal: this.toggleBioModal,\n//             togglePlayerPageModal: this.togglePlayerPageModal,\n//             toggleWindowDisplay: this.toggleWindowDisplay,\n//             toggleGameOn: this.toggleGameOn,\n//             toggleStartBattle: this.toggleStartBattle,\n//             toggleStartConvert: this.toggleStartConvert,\n//             toggleCreateTriadic: this.toggleCreateTriadic,\n//             toggleCreateAnalogous: this.toggleCreateAnalogous,\n//             toggleCreatePastel: this.toggleCreatePastel,\n//             setCustomColor: this.setCustomColor,\n//             startGame: this.startGame,\n//             correctGuess: this.correctGuess,\n//             updateTimer: this.updateTimerContext,\n//             removeCoin: this.removeCoin,\n//             clearRounds: this.clearRounds,\n//         }\n//     }\n//     toggleMainModal = () => this.setState({ MainModal: !this.state.MainModal })\n//     toggleLoginModal = () => this.setState({ loginModal: !this.state.loginModal })\n//     toggleBioModal = () => this.setState({ bioModal: !this.state.bioModal })\n//     togglePlayerPageModal = () => this.setState({ playerPageModal: !this.state.playerPageModal })\n//     toggleGameOn = () => this.setState({ gameOn: false })\n//     toggleWindowDisplay = () => this.setState({ windowDisplayed: !this.state.windowDisplayed})\n//     clearRounds = () => this.setState({ round: 0})\n//     toggleCreateAnalogous = () => {\n//         if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n//         this.setState({ createAnalogous: true});\n//         let delayOrNot = 0;\n//         (this.state.colorArray[0].class === 'blurred')\n//             ? delayOrNot = 0\n//             : delayOrNot = 1500\n//         this.clearBoard();\n//         setTimeout(() => {\n//             this.updateColorArrayContext();\n//             this.setState({ createAnalogous: false})\n//         }, delayOrNot)\n//     }\n//     toggleCreatePastel = () => {\n//         if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n//         this.setState({ createPastel: true});\n//         let delayOrNot = 0;\n//         (this.state.colorArray[0].class === 'blurred')\n//             ? delayOrNot = 0\n//             : delayOrNot = 1500\n//         this.clearBoard();\n//         setTimeout(() => {\n//             this.updateColorArrayContext();\n//             this.setState({ createPastel: false})\n//         }, delayOrNot)\n//     }\n//     toggleCreateTriadic = () => {\n//         if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n//         this.setState({ createTriadic: true});\n//         let delayOrNot = 0;\n//         (this.state.colorArray[0].class === 'blurred')\n//             ? delayOrNot = 0\n//             : delayOrNot = 1500\n//         this.clearBoard();\n//         setTimeout(() => {\n//             this.updateColorArrayContext();\n//             this.setState({ createTriadic: false});\n//         }, delayOrNot)\n//     }\n//     setCustomColor = (custom) => {\n//         // if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n//         this.setState({\n//             createCustom: true,\n//             customColor: custom,\n//         });\n//         let delayOrNot = 0;\n//         (this.state.colorArray[0].class === 'blurred')\n//             ? delayOrNot = 0\n//             : delayOrNot = 1500\n//         this.clearBoard();\n//         setTimeout(() => {\n//             this.updateColorArrayContext();\n//             this.setState({ createCustom: false});\n//         }, delayOrNot)\n//     }\n//     toggleStartBattle = () => {\n//         if (this.state.startConvert) this.toggleStartConvert();\n//         this.setState({ startBattle: !this.state.startBattle });\n//     }\n//     toggleStartConvert = () => {\n//         if (this.state.startBattle) this.toggleStartBattle();\n//         this.setState({ startConvert: !this.state.startConvert});\n//     }\n//     startGame = () => {\n//         this.clearBoard();\n//         this.timeout = setTimeout(() => {\n//             this.setState({ gameOn: true })\n//             this.updateColorArrayContext()\n//         }, 1100)\n//     }\n//     removeCoin = () => {\n//         let tempArray = [];\n//         if (this.state.coinArray[0]) {\n//             tempArray = [false, true, true]\n//         } else if (this.state.coinArray[1]) {\n//             tempArray = [false, false, true]\n//         } else {\n//             tempArray = [false, false, false]\n//         }\n//         this.setState ({ coinArray: tempArray })\n//     }\n//     correctGuess = () => {\n//         let coinCount = this.state.coins;\n//         if (this.state.startBattle) {\n//             for (let coin of this.state.coinArray) {\n//                 if (coin) coinCount++\n//             }\n//             this.setState({\n//                 gameOn: false,\n//                 coins: coinCount,\n//              });\n//         }\n//         this.clearBoard();\n//         setTimeout(() => {\n//             this.updateColorArrayContext();\n//         }, 1500)\n//     }\n//     clearBoard = () => {\n//         let clearArray = []\n//         for (let i = 0; i < 6; i++) {\n//             clearArray.push({ background:\n//                 `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n//             })\n//         }\n//         this.setState({\n//             colorArray: clearArray,\n//         })\n//     }\n//     updateTimerContext = (seconds) => {\n//         this.setState({\n//             timer: seconds,\n//             score: this.state.score + seconds,\n//         })\n//     }\n//     updateColorArrayContext = () => {\n//         let randomSix = Math.floor(Math.random() * 6)\n//         let targetArray = [\n//             'colorOne',\n//             'colorTwo',\n//             'colorThree',\n//             'colorFour',\n//             'colorFive',\n//             'colorSix'\n//         ]\n//         let targetId = targetArray[randomSix];\n//         let arr = [];\n//         if (this.state.startConvert &&\n//             !this.state.createTriadic &&\n//             !this.state.createAnalogous &&\n//             !this.state.createPastel)\n//                 arr = generateGhostArray();\n//         if (this.state.startConvert &&\n//             this.state.createTriadic &&\n//             !this.state.createAnalogous &&\n//             !this.state.createPastel)\n//                 arr = generateTriadicArray();\n//         if (this.state.startConvert &&\n//             this.state.createAnalogous &&\n//             !this.state.createTriadic &&\n//             !this.state.createPastel)\n//                 arr = generateAnalogousArray();\n//         if (this.state.startConvert &&\n//             this.state.createPastel &&\n//             !this.state.createTriadic &&\n//             !this.state.createAnalogous)\n//                 arr = generatePastelArray();\n//         if (this.state.startConvert &&\n//             this.state.createCustom)\n//                 arr = generateCustomArray(this.state.customColor);\n//         if (this.state.startBattle) {\n//             this.state.round <= 2\n//                 ? arr = generateEasyArray()\n//                 : arr = generateTriadicArray()\n//             }\n//         //display target value\n//         const targetColor = arr[randomSix]\n//         const firstSlice = (targetColor.background.slice(42))\n//         let colorTarget = (firstSlice.slice(0, firstSlice.length -7))\n//         this.setState({\n//             coinArray: [true, true, true],\n//             colorArray: arr,\n//             round: this.state.round + 1,\n//             colorTargetId: targetId,\n//             gameOn: true,\n//             colorTarget: colorTarget,\n//         });\n//     }\n//     render() {\n//         return (\n//             <div className='gameBoardDiv' value={this.state}>\n//                 <ColorContext.Provider value={this.state}>\n//                     <ModalProvider>\n//                         <Backdrop />\n//                         {/* Modal Control */}\n//                         {this.state.MainModal &&\n//                             <Modal >\n//                                 <MainModal />\n//                             </Modal>\n//                         }\n//                         {this.state.loginModal &&\n//                             <Modal>\n//                                 <LoginModal />\n//                             </Modal>\n//                         }\n//                         {this.state.bioModal &&\n//                             <Modal>\n//                                 <MyBioModal />\n//                             </Modal>\n//                         }\n//                         {this.state.playerPageModal &&\n//                             <Modal>\n//                                 <PlayerPageModal />\n//                             </Modal>\n//                         }\n//                     </ModalProvider>\n//                 </ColorContext.Provider>\n//             </div>\n//         )\n//     }\n// }\n// export default Controller;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js"],"names":[],"mappingssourcesContent":["// import React from 'react'\n\n// import {\n//     generateEasyArray,\n//     generateTriadicArray,\n//     generateAnalogousArray,\n//     generateGhostArray,\n//     generatePastelArray,\n//     generateCustomArray,\n// } from './PureFunctions';\n\n// import Backdrop from './Components/Backdrop/Backdrop'\n// import ColorContext from './ColorContext';\n// import MainModal from './Components/Modals/MainModal';\n// import LoginModal from './Components/Modals/LoginFormModal';\n// import PlayerPageModal from './Components/Modals/PlayerPageModal';\n// import MyBioModal from './Components/Modals/MyBioModal';\n// import { Modal } from './ModalContext/Modal';\n// import { ModalProvider } from './ModalContext/Modal';\n\n// class Controller extends React.Component {\n//     constructor (props) {\n//         const battleArray = generateAnalogousArray();\n\n//         super (props);\n//         this.state = {\n//             colorArray: battleArray,\n//             colorTargetId: '',\n//             colorTarget: null,\n//             round: 0,\n//             score: 0,\n//             timer: 15,\n//             coins: 0,\n//             coinArray: [true, true, true],\n//             gameOn: false,\n//             windowDisplayed: false,\n//             customColor: '255, 255, 255',\n\n//             MainModal: false,\n//             loginModal: false,\n//             bioModal: false,\n//             playerPageModal: false,\n//             // repeatRender: true,\n\n//             startBattle: false,\n//             startConvert: false,\n\n//             createTriadic: false,\n//             createAnalogous: false,\n//             createPastel: false,\n//             createCustom: false,\n\n//             toggleMainModal: this.toggleMainModal,\n//             toggleLoginModal: this.toggleLoginModal,\n//             toggleBioModal: this.toggleBioModal,\n//             togglePlayerPageModal: this.togglePlayerPageModal,\n//             toggleWindowDisplay: this.toggleWindowDisplay,\n\n//             toggleGameOn: this.toggleGameOn,\n//             toggleStartBattle: this.toggleStartBattle,\n//             toggleStartConvert: this.toggleStartConvert,\n\n//             toggleCreateTriadic: this.toggleCreateTriadic,\n//             toggleCreateAnalogous: this.toggleCreateAnalogous,\n//             toggleCreatePastel: this.toggleCreatePastel,\n//             setCustomColor: this.setCustomColor,\n\n//             startGame: this.startGame,\n//             correctGuess: this.correctGuess,\n//             updateTimer: this.updateTimerContext,\n//             removeCoin: this.removeCoin,\n//             clearRounds: this.clearRounds,\n//         }\n//     }\n\n//     toggleMainModal = () => this.setState({ MainModal: !this.state.MainModal })\n//     toggleLoginModal = () => this.setState({ loginModal: !this.state.loginModal })\n//     toggleBioModal = () => this.setState({ bioModal: !this.state.bioModal })\n//     togglePlayerPageModal = () => this.setState({ playerPageModal: !this.state.playerPageModal })\n//     toggleGameOn = () => this.setState({ gameOn: false })\n//     toggleWindowDisplay = () => this.setState({ windowDisplayed: !this.state.windowDisplayed})\n//     clearRounds = () => this.setState({ round: 0})\n\n//     toggleCreateAnalogous = () => {\n//         if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n//         this.setState({ createAnalogous: true});\n//         let delayOrNot = 0;\n//         (this.state.colorArray[0].class === 'blurred')\n//             ? delayOrNot = 0\n//             : delayOrNot = 1500\n//         this.clearBoard();\n//         setTimeout(() => {\n//             this.updateColorArrayContext();\n//             this.setState({ createAnalogous: false})\n//         }, delayOrNot)\n//     }\n\n//     toggleCreatePastel = () => {\n//         if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n//         this.setState({ createPastel: true});\n//         let delayOrNot = 0;\n//         (this.state.colorArray[0].class === 'blurred')\n//             ? delayOrNot = 0\n//             : delayOrNot = 1500\n//         this.clearBoard();\n//         setTimeout(() => {\n//             this.updateColorArrayContext();\n//             this.setState({ createPastel: false})\n//         }, delayOrNot)\n//     }\n\n//     toggleCreateTriadic = () => {\n//         if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n//         this.setState({ createTriadic: true});\n//         let delayOrNot = 0;\n//         (this.state.colorArray[0].class === 'blurred')\n//             ? delayOrNot = 0\n//             : delayOrNot = 1500\n//         this.clearBoard();\n//         setTimeout(() => {\n//             this.updateColorArrayContext();\n//             this.setState({ createTriadic: false});\n//         }, delayOrNot)\n//     }\n\n//     setCustomColor = (custom) => {\n//         // if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n//         this.setState({\n//             createCustom: true,\n//             customColor: custom,\n//         });\n//         let delayOrNot = 0;\n//         (this.state.colorArray[0].class === 'blurred')\n//             ? delayOrNot = 0\n//             : delayOrNot = 1500\n//         this.clearBoard();\n//         setTimeout(() => {\n//             this.updateColorArrayContext();\n//             this.setState({ createCustom: false});\n//         }, delayOrNot)\n//     }\n\n//     toggleStartBattle = () => {\n//         if (this.state.startConvert) this.toggleStartConvert();\n//         this.setState({ startBattle: !this.state.startBattle });\n//     }\n\n//     toggleStartConvert = () => {\n//         if (this.state.startBattle) this.toggleStartBattle();\n//         this.setState({ startConvert: !this.state.startConvert});\n//     }\n\n//     startGame = () => {\n//         this.clearBoard();\n//         this.timeout = setTimeout(() => {\n//             this.setState({ gameOn: true })\n//             this.updateColorArrayContext()\n//         }, 1100)\n//     }\n\n//     removeCoin = () => {\n//         let tempArray = [];\n//         if (this.state.coinArray[0]) {\n//             tempArray = [false, true, true]\n//         } else if (this.state.coinArray[1]) {\n//             tempArray = [false, false, true]\n//         } else {\n//             tempArray = [false, false, false]\n//         }\n//         this.setState ({ coinArray: tempArray })\n//     }\n\n//     correctGuess = () => {\n//         let coinCount = this.state.coins;\n\n//         if (this.state.startBattle) {\n//             for (let coin of this.state.coinArray) {\n//                 if (coin) coinCount++\n//             }\n\n//             this.setState({\n//                 gameOn: false,\n//                 coins: coinCount,\n//              });\n//         }\n\n//         this.clearBoard();\n//         setTimeout(() => {\n//             this.updateColorArrayContext();\n//         }, 1500)\n//     }\n\n//     clearBoard = () => {\n//         let clearArray = []\n//         for (let i = 0; i < 6; i++) {\n//             clearArray.push({ background:\n//                 `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n//             })\n//         }\n//         this.setState({\n//             colorArray: clearArray,\n//         })\n//     }\n\n//     updateTimerContext = (seconds) => {\n//         this.setState({\n//             timer: seconds,\n//             score: this.state.score + seconds,\n//         })\n//     }\n\n//     updateColorArrayContext = () => {\n//         let randomSix = Math.floor(Math.random() * 6)\n//         let targetArray = [\n//             'colorOne',\n//             'colorTwo',\n//             'colorThree',\n//             'colorFour',\n//             'colorFive',\n//             'colorSix'\n//         ]\n//         let targetId = targetArray[randomSix];\n//         let arr = [];\n\n//         if (this.state.startConvert &&\n//             !this.state.createTriadic &&\n//             !this.state.createAnalogous &&\n//             !this.state.createPastel)\n//                 arr = generateGhostArray();\n\n//         if (this.state.startConvert &&\n//             this.state.createTriadic &&\n//             !this.state.createAnalogous &&\n//             !this.state.createPastel)\n//                 arr = generateTriadicArray();\n\n//         if (this.state.startConvert &&\n//             this.state.createAnalogous &&\n//             !this.state.createTriadic &&\n//             !this.state.createPastel)\n//                 arr = generateAnalogousArray();\n\n//         if (this.state.startConvert &&\n//             this.state.createPastel &&\n//             !this.state.createTriadic &&\n//             !this.state.createAnalogous)\n//                 arr = generatePastelArray();\n\n//         if (this.state.startConvert &&\n//             this.state.createCustom)\n//                 arr = generateCustomArray(this.state.customColor);\n\n//         if (this.state.startBattle) {\n//             this.state.round <= 2\n//                 ? arr = generateEasyArray()\n//                 : arr = generateTriadicArray()\n//             }\n\n//         //display target value\n//         const targetColor = arr[randomSix]\n//         const firstSlice = (targetColor.background.slice(42))\n//         let colorTarget = (firstSlice.slice(0, firstSlice.length -7))\n\n//         this.setState({\n//             coinArray: [true, true, true],\n//             colorArray: arr,\n//             round: this.state.round + 1,\n//             colorTargetId: targetId,\n//             gameOn: true,\n//             colorTarget: colorTarget,\n//         });\n//     }\n\n//     render() {\n//         return (\n//             <div className='gameBoardDiv' value={this.state}>\n//                 <ColorContext.Provider value={this.state}>\n//                     <ModalProvider>\n//                         <Backdrop />\n\n//                         {/* Modal Control */}\n//                         {this.state.MainModal &&\n//                             <Modal >\n//                                 <MainModal />\n//                             </Modal>\n//                         }\n//                         {this.state.loginModal &&\n//                             <Modal>\n//                                 <LoginModal />\n//                             </Modal>\n//                         }\n//                         {this.state.bioModal &&\n//                             <Modal>\n//                                 <MyBioModal />\n//                             </Modal>\n//                         }\n//                         {this.state.playerPageModal &&\n//                             <Modal>\n//                                 <PlayerPageModal />\n//                             </Modal>\n//                         }\n//                     </ModalProvider>\n//                 </ColorContext.Provider>\n//             </div>\n//         )\n//     }\n// }\n\n// export default Controller;\n"]},"metadata":{},"sourceType":"module"}