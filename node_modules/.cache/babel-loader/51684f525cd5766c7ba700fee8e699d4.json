{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/ControllerContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { generateEasyArray, generateTriadicArray, generateAnalogousArray, generateGhostArray, generatePastelArray, generateCustomArray } from './PureFunctions';\nimport { ModalProvider } from './ModalContext/Modal';\nimport { Modal } from './ModalContext/Modal';\nimport Backdrop from './Components/Backdrop/Backdrop';\nimport ColorContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal'; // import ConvertContainer from './Components/Footer/ConvertContainer';\n\nconst ControllerContainer = () => {\n  _s();\n\n  const battleArray = generateAnalogousArray();\n  const [colorArray, setColorArray] = useState(battleArray);\n  const [colorTargetId, setColorTargetId] = useState('');\n  const [colorTarget, setColorTarget] = useState(null);\n  const [round, setRound] = useState(0);\n  const [score, setScore] = useState(0);\n  const [timer, setTimer] = useState(15);\n  const [coins, setCoins] = useState(0);\n  const [coinArray, setCoinArray] = useState([true, true, true]);\n  const [gameOn, setGameOn] = useState(false);\n  const [windowDisplayed, setWindowDisplayed] = useState(false);\n  const [customColor, setCustomColor] = useState('255, 255, 255');\n  const [mainModal, setMainModal] = useState(false);\n  const [loginModal, setLoginModal] = useState(false);\n  const [bioModal, setBioModal] = useState(false);\n  const [playerPageModal, setPlayerPageModal] = useState(false);\n  const [startBattle, setStartBattle] = useState(false);\n  const [startConvert, setStartConvert] = useState(false);\n  const [createTriadic, setCreateTriadic] = useState(false);\n  const [createAnalogous, setCreateAnalogous] = useState(false);\n  const [createPastel, setCreatePastel] = useState(false);\n  const [createCustom, setCreateCustom] = useState(false);\n\n  const toggleMainModal = () => setMainModal(!mainModal);\n\n  const toggleLoginModal = () => setLoginModal(!loginModal);\n\n  const toggleBioModal = () => setBioModal(!bioModal);\n\n  const togglePlayerPageModal = () => setPlayerPageModal(!playerPageModal);\n\n  const toggleGameOn = () => setGameOn(false);\n\n  const toggleWindowDisplay = () => setWindowDisplayed(!windowDisplayed);\n\n  const clearRounds = () => setRound(0);\n\n  const toggleCreateAnalogous = () => {\n    if (createAnalogous || createPastel || createTriadic) return;\n    setCreateAnalogous(true);\n    clearBoard();\n    setTimeout(() => {\n      updateColorArrayContext();\n      setCreateAnalogous(false);\n    }, 1500);\n  };\n\n  const toggleCreatePastel = () => {\n    if (createAnalogous || createPastel || createTriadic) return;\n    setCreatePastel(true);\n    clearBoard();\n    setTimeout(() => {\n      updateColorArrayContext();\n      setCreatePastel(false);\n    }, 1500);\n  };\n\n  const toggleCreateTriadic = () => {\n    if (createAnalogous || createPastel || createTriadic) return;\n    setCreateAnalogous(true);\n    clearBoard();\n    setTimeout(() => {\n      updateColorArrayContext();\n      setCreateTriadic(false);\n    }, 1500);\n  };\n\n  const createCustomColor = custom => {\n    setCreateCustom(true);\n    setCustomColor(custom);\n    clearBoard();\n    setTimeout(() => {\n      updateColorArrayContext();\n      setCreateCustom(false);\n    }, 1500);\n  };\n\n  const toggleStartBattle = () => {\n    if (startConvert) toggleStartConvert();\n    console.log('TTTTTTTTT', startBattle);\n    setStartBattle(!startBattle);\n    console.log('YYYYYYYY', startBattle);\n  };\n\n  const toggleStartConvert = () => {\n    if (startBattle) toggleStartBattle();\n    setStartConvert(!startConvert);\n  };\n\n  const startGame = () => {\n    clearBoard();\n    setTimeout(() => {\n      setGameOn(true);\n      updateColorArrayContext();\n    }, 1100);\n  };\n\n  const removeCoin = () => {\n    let tempArray = [];\n\n    if (coinArray[0]) {\n      tempArray = [false, true, true];\n    } else if (coinArray[1]) {\n      tempArray = [false, false, true];\n    } else {\n      tempArray = [false, false, false];\n    }\n\n    setCoinArray(tempArray);\n  };\n\n  const correctGuess = () => {\n    let coinCoint = coins;\n\n    if (startBattle) {\n      for (let coin of coinArray) {\n        if (coin) coinCoint++;\n      }\n\n      setGameOn(false);\n      setCoins(coinCoint);\n    }\n\n    clearBoard();\n    setTimeout(() => {\n      updateColorArrayContext();\n    }, 1500);\n  };\n\n  const clearBoard = () => {\n    let clearArray = [];\n\n    for (let i = 0; i < 6; i++) {\n      clearArray.push({\n        background: `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n      });\n    }\n\n    setColorArray(clearArray);\n  };\n\n  const updateTimer = seconds => {\n    setTimer(seconds);\n    setScore(score + seconds);\n  };\n\n  const updateColorArrayContext = () => {\n    let randomSix = Math.floor(Math.random() * 6);\n    let targetArray = ['colorOne', 'colorTwo', 'colorThree', 'colorFour', 'colorFive', 'colorSix'];\n    let targetId = targetArray[randomSix]; //build appropriate color value array\n\n    let arr = [];\n\n    if (startConvert && !createTriadic && !createAnalogous && !createPastel) {\n      arr = generateGhostArray();\n    }\n\n    if (startConvert && createTriadic && !createAnalogous && !createPastel) {\n      arr = generateTriadicArray();\n    }\n\n    if (startConvert && !createTriadic && createAnalogous && !createPastel) {\n      arr = generateAnalogousArray();\n    }\n\n    if (startConvert && !createTriadic && !createAnalogous && createPastel) {\n      arr = generatePastelArray();\n    }\n\n    if (startConvert && createCustom) {\n      arr = generateCustomArray(customColor);\n    }\n\n    if (startBattle) {\n      round <= 2 ? arr = generateEasyArray() : arr = generateTriadicArray();\n    } //prep target value for display (refactor this with substr)\n\n\n    console.log('uuuuuuuuuu', arr, startBattle, startConvert);\n    const targetColor = arr[randomSix];\n    const firstSlice = targetColor.background.slice(42);\n    const colorTarget = firstSlice.slice(0, firstSlice.length - 7);\n    setCoinArray([true, true, true]);\n    setColorArray(arr);\n    setRound(round + 1);\n    setColorTargetId(targetId);\n    setGameOn(true);\n    setColorTarget(colorTarget);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameBoardDiv\",\n    children: /*#__PURE__*/_jsxDEV(ColorContext.Provider, {\n      value: {\n        colorArray,\n        colorTargetId,\n        colorTarget,\n        round,\n        score,\n        timer,\n        coins,\n        coinArray,\n        gameOn,\n        windowDisplayed,\n        customColor,\n        mainModal,\n        loginModal,\n        bioModal,\n        playerPageModal,\n        startBattle,\n        startConvert,\n        createTriadic,\n        createAnalogous,\n        createPastel,\n        createCustom,\n        toggleMainModal,\n        toggleLoginModal,\n        toggleBioModal,\n        togglePlayerPageModal,\n        toggleWindowDisplay,\n        toggleGameOn,\n        toggleStartBattle,\n        toggleStartConvert,\n        toggleCreateTriadic,\n        toggleCreateAnalogous,\n        toggleCreatePastel,\n        createCustomColor,\n        startGame,\n        correctGuess,\n        updateTimer,\n        removeCoin,\n        clearRounds\n      },\n      children: /*#__PURE__*/_jsxDEV(ModalProvider, {\n        children: [/*#__PURE__*/_jsxDEV(Backdrop, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), mainModal && /*#__PURE__*/_jsxDEV(Modal, {\n          children: /*#__PURE__*/_jsxDEV(MainModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 25\n        }, this), loginModal && /*#__PURE__*/_jsxDEV(Modal, {\n          children: /*#__PURE__*/_jsxDEV(LoginModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 25\n        }, this), bioModal && /*#__PURE__*/_jsxDEV(Modal, {\n          children: /*#__PURE__*/_jsxDEV(MyBioModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 25\n        }, this), playerPageModal && /*#__PURE__*/_jsxDEV(Modal, {\n          children: /*#__PURE__*/_jsxDEV(PlayerPageModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ControllerContainer, \"r/t+t/eS5E8DYDwCEmiUASw4M0w=\");\n\n_c = ControllerContainer;\nexport default ControllerContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControllerContainer\");","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/ControllerContainer.js"],"names":["React","useState","generateEasyArray","generateTriadicArray","generateAnalogousArray","generateGhostArray","generatePastelArray","generateCustomArray","ModalProvider","Modal","Backdrop","ColorContext","MainModal","LoginModal","PlayerPageModal","MyBioModal","ControllerContainer","battleArray","colorArray","setColorArray","colorTargetId","setColorTargetId","colorTarget","setColorTarget","round","setRound","score","setScore","timer","setTimer","coins","setCoins","coinArray","setCoinArray","gameOn","setGameOn","windowDisplayed","setWindowDisplayed","customColor","setCustomColor","mainModal","setMainModal","loginModal","setLoginModal","bioModal","setBioModal","playerPageModal","setPlayerPageModal","startBattle","setStartBattle","startConvert","setStartConvert","createTriadic","setCreateTriadic","createAnalogous","setCreateAnalogous","createPastel","setCreatePastel","createCustom","setCreateCustom","toggleMainModal","toggleLoginModal","toggleBioModal","togglePlayerPageModal","toggleGameOn","toggleWindowDisplay","clearRounds","toggleCreateAnalogous","clearBoard","setTimeout","updateColorArrayContext","toggleCreatePastel","toggleCreateTriadic","createCustomColor","custom","toggleStartBattle","toggleStartConvert","console","log","startGame","removeCoin","tempArray","correctGuess","coinCoint","coin","clearArray","i","push","background","updateTimer","seconds","randomSix","Math","floor","random","targetArray","targetId","arr","targetColor","firstSlice","slice","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport {\n    generateEasyArray,\n    generateTriadicArray,\n    generateAnalogousArray,\n    generateGhostArray,\n    generatePastelArray,\n    generateCustomArray,\n} from './PureFunctions';\n\nimport { ModalProvider } from './ModalContext/Modal';\nimport { Modal } from './ModalContext/Modal';\nimport Backdrop from './Components/Backdrop/Backdrop'\nimport ColorContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\n// import ConvertContainer from './Components/Footer/ConvertContainer';\n\nconst ControllerContainer = () => {\n    const battleArray = generateAnalogousArray();\n\n    const [colorArray, setColorArray] = useState(battleArray)\n    const [colorTargetId, setColorTargetId] = useState('')\n    const [colorTarget, setColorTarget] = useState(null)\n    const [round, setRound] = useState(0)\n    const [score, setScore] = useState(0)\n    const [timer, setTimer] = useState(15)\n    const [coins, setCoins] = useState(0)\n    const [coinArray, setCoinArray] = useState([true, true, true])\n    const [gameOn, setGameOn] = useState(false)\n    const [windowDisplayed, setWindowDisplayed] = useState(false)\n    const [customColor, setCustomColor] = useState('255, 255, 255')\n\n    const [mainModal, setMainModal] = useState(false)\n    const [loginModal, setLoginModal] = useState(false)\n    const [bioModal, setBioModal] = useState(false)\n    const [playerPageModal, setPlayerPageModal] = useState(false)\n\n    const [startBattle, setStartBattle] = useState(false)\n    const [startConvert, setStartConvert] = useState(false)\n\n    const [createTriadic, setCreateTriadic] = useState(false)\n    const [createAnalogous, setCreateAnalogous] = useState(false)\n    const [createPastel, setCreatePastel] = useState(false)\n    const [createCustom, setCreateCustom] = useState(false)\n\n    const toggleMainModal = () => setMainModal(!mainModal)\n    const toggleLoginModal = () => setLoginModal(!loginModal)\n    const toggleBioModal = () => setBioModal(!bioModal)\n    const togglePlayerPageModal = () => setPlayerPageModal(!playerPageModal)\n    const toggleGameOn = () => setGameOn(false)\n    const toggleWindowDisplay = () => setWindowDisplayed(!windowDisplayed)\n    const clearRounds = () => setRound(0)\n\n    const toggleCreateAnalogous = () => {\n        if (createAnalogous || createPastel || createTriadic) return\n        setCreateAnalogous(true)\n        clearBoard();\n        setTimeout(() => {\n            updateColorArrayContext();\n            setCreateAnalogous(false)\n        }, 1500)\n    }\n\n    const toggleCreatePastel = () => {\n        if (createAnalogous || createPastel || createTriadic) return\n        setCreatePastel(true)\n        clearBoard();\n        setTimeout(() => {\n            updateColorArrayContext();\n            setCreatePastel(false)\n        }, 1500)\n    }\n\n    const toggleCreateTriadic = () => {\n        if (createAnalogous || createPastel || createTriadic) return\n        setCreateAnalogous(true)\n        clearBoard();\n        setTimeout(() => {\n            updateColorArrayContext();\n            setCreateTriadic(false)\n        }, 1500)\n    }\n\n    const createCustomColor = (custom) => {\n        setCreateCustom(true)\n        setCustomColor(custom)\n        clearBoard();\n        setTimeout(() => {\n            updateColorArrayContext();\n            setCreateCustom(false);\n        }, 1500)\n    }\n\n    const toggleStartBattle = () => {\n        if (startConvert) toggleStartConvert();\n        console.log('TTTTTTTTT', startBattle)\n        setStartBattle(!startBattle)\n        console.log('YYYYYYYY', startBattle)\n    }\n\n    const toggleStartConvert = () => {\n        if (startBattle) toggleStartBattle();\n        setStartConvert(!startConvert)\n    }\n\n    const startGame = () => {\n        clearBoard();\n        setTimeout(() => {\n            setGameOn(true);\n            updateColorArrayContext();\n        }, 1100)\n    }\n\n    const removeCoin = () => {\n        let tempArray = [];\n        if (coinArray[0]) {\n            tempArray = [false, true, true]\n        } else if (coinArray[1]) {\n            tempArray = [false, false, true]\n        } else {\n            tempArray = [false, false, false]\n        }\n        setCoinArray(tempArray)\n    }\n\n    const correctGuess = () => {\n        let coinCoint = coins;\n\n        if (startBattle) {\n            for (let coin of coinArray) {\n                if (coin) coinCoint++\n            }\n\n            setGameOn(false);\n            setCoins(coinCoint)\n        }\n        clearBoard()\n        setTimeout(() => {\n            updateColorArrayContext();\n        }, 1500)\n    }\n\n    const clearBoard = () => {\n        let clearArray = [];\n        for (let i = 0; i < 6; i++) {\n            clearArray.push({ background:\n                `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n            })\n        }\n        setColorArray(clearArray);\n    }\n\n    const updateTimer = (seconds) => {\n        setTimer(seconds);\n        setScore(score + seconds)\n    }\n\n    const updateColorArrayContext = () => {\n        let randomSix = Math.floor(Math.random() * 6)\n        let targetArray = [\n            'colorOne',\n            'colorTwo',\n            'colorThree',\n            'colorFour',\n            'colorFive',\n            'colorSix'\n        ]\n        let targetId = targetArray[randomSix];\n\n        //build appropriate color value array\n        let arr = [];\n        if (startConvert && !createTriadic &&\n           !createAnalogous && !createPastel) {\n               arr = generateGhostArray();\n           }\n        if (startConvert && createTriadic &&\n           !createAnalogous && !createPastel) {\n               arr = generateTriadicArray();\n           }\n        if (startConvert && !createTriadic &&\n           createAnalogous && !createPastel) {\n               arr = generateAnalogousArray();\n           }\n        if (startConvert && !createTriadic &&\n           !createAnalogous && createPastel) {\n               arr = generatePastelArray();\n           }\n        if (startConvert && createCustom) {\n            arr = generateCustomArray(customColor);\n        }\n        if (startBattle) {\n            round <= 2\n                ? arr = generateEasyArray()\n                : arr = generateTriadicArray()\n        }\n\n        //prep target value for display (refactor this with substr)\n        console.log('uuuuuuuuuu', arr, startBattle, startConvert)\n        const targetColor = arr[randomSix];\n        const firstSlice = (targetColor.background.slice(42));\n        const colorTarget = (firstSlice.slice(0, firstSlice.length -7));\n\n        setCoinArray([true, true, true])\n        setColorArray(arr)\n        setRound(round +1)\n        setColorTargetId(targetId);\n        setGameOn(true);\n        setColorTarget(colorTarget)\n    }\n\n    return (\n        <div className='gameBoardDiv'>\n            <ColorContext.Provider\n                value={{\n                    colorArray,\n                    colorTargetId,\n                    colorTarget,\n                    round,\n                    score,\n                    timer,\n                    coins,\n                    coinArray,\n                    gameOn,\n                    windowDisplayed,\n                    customColor,\n                    mainModal,\n                    loginModal,\n                    bioModal,\n                    playerPageModal,\n                    startBattle,\n                    startConvert,\n                    createTriadic,\n                    createAnalogous,\n                    createPastel,\n                    createCustom,\n                    toggleMainModal,\n                    toggleLoginModal,\n                    toggleBioModal,\n                    togglePlayerPageModal,\n                    toggleWindowDisplay,\n                    toggleGameOn,\n                    toggleStartBattle,\n                    toggleStartConvert,\n                    toggleCreateTriadic,\n                    toggleCreateAnalogous,\n                    toggleCreatePastel,\n                    createCustomColor,\n                    startGame,\n                    correctGuess,\n                    updateTimer,\n                    removeCoin,\n                    clearRounds\n                }}>\n                <ModalProvider>\n                    <Backdrop />\n\n                    {/* Modal Control */}\n                    {mainModal &&\n                        <Modal >\n                            <MainModal />\n                        </Modal>\n                    }\n                    {loginModal &&\n                        <Modal>\n                            <LoginModal />\n                        </Modal>\n                    }\n                    {bioModal &&\n                        <Modal>\n                            <MyBioModal />\n                        </Modal>\n                    }\n                    {playerPageModal &&\n                        <Modal>\n                            <PlayerPageModal />\n                        </Modal>\n                    }\n                </ModalProvider>\n            </ColorContext.Provider>\n        </div>\n    )\n}\n\nexport default ControllerContainer;\n"]},"metadata":{},"sourceType":"module"}