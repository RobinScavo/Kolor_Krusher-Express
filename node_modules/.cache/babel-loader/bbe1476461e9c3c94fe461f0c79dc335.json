{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/src/Components/Footer/ConvertContainer.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport ColorContext from '../../context/ColorContext';\nimport { HSLtoRGB, RGBtoHEX, HEXtoRGB, RGBtoHSL } from '../../pureFunctions';\nimport LeftConvertPanel from './LeftConvertPanel';\nimport RightConvertPanel from './RightConvertPanel';\n\nvar ConvertContainer = function ConvertContainer() {\n  _s();\n\n  var values = useContext(ColorContext);\n  var rgbLabelArray = ['Red', 'Green', 'Blue'];\n  var rgbInputArray = ['From 0 to 255', 'From 0 to 255', 'From 0 to 255'];\n  var hslLabelArray = ['Hue', 'Saturation', 'Light'];\n  var hslInputArray = ['From 0 to 360', 'From 0 to 100', 'From 0 to 100'];\n  var hexLabelArray = ['Red', 'Green', 'Blue'];\n  var hexInputArray = ['From 00 to FF', 'From 00 to FF', 'From 00 to FF'];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      togglePosition = _useState2[0],\n      setTogglePosition = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fromRgbButton = _useState4[0],\n      setFromRgbButton = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fromHslButton = _useState6[0],\n      setFromHslButton = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      fromHexButton = _useState8[0],\n      setFromHexButton = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      toRgbButton = _useState10[0],\n      setToRgbButton = _useState10[1];\n\n  var _useState11 = useState(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      toHslButton = _useState12[0],\n      setToHslButton = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      toHexButton = _useState14[0],\n      setToHexButton = _useState14[1];\n\n  var _useState15 = useState(rgbLabelArray[0]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      fromTopLabel = _useState16[0],\n      setFromTopLabel = _useState16[1];\n\n  var _useState17 = useState(rgbLabelArray[1]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      fromMiddleLabel = _useState18[0],\n      setFromMiddleLabel = _useState18[1];\n\n  var _useState19 = useState(rgbLabelArray[2]),\n      _useState20 = _slicedToArray(_useState19, 2),\n      fromBottomLabel = _useState20[0],\n      setFromBottomLabel = _useState20[1];\n\n  var _useState21 = useState(rgbInputArray[0]),\n      _useState22 = _slicedToArray(_useState21, 2),\n      fromTopInput = _useState22[0],\n      setFromTopInput = _useState22[1];\n\n  var _useState23 = useState(rgbInputArray[1]),\n      _useState24 = _slicedToArray(_useState23, 2),\n      fromMiddleInput = _useState24[0],\n      setFromMiddleInput = _useState24[1];\n\n  var _useState25 = useState(rgbInputArray[2]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      fromBottomInput = _useState26[0],\n      setFromBottomInput = _useState26[1];\n\n  var _useState27 = useState(hslLabelArray[0]),\n      _useState28 = _slicedToArray(_useState27, 2),\n      toTopLabel = _useState28[0],\n      setToTopLabel = _useState28[1];\n\n  var _useState29 = useState(hslLabelArray[1]),\n      _useState30 = _slicedToArray(_useState29, 2),\n      toMiddleLabel = _useState30[0],\n      setToMiddleLabel = _useState30[1];\n\n  var _useState31 = useState(hslLabelArray[2]),\n      _useState32 = _slicedToArray(_useState31, 2),\n      toBottomLabel = _useState32[0],\n      setToBottomLabel = _useState32[1];\n\n  var _useState33 = useState(hslInputArray[0]),\n      _useState34 = _slicedToArray(_useState33, 2),\n      toTopInput = _useState34[0],\n      setToTopInput = _useState34[1];\n\n  var _useState35 = useState(hslInputArray[1]),\n      _useState36 = _slicedToArray(_useState35, 2),\n      toMiddleInput = _useState36[0],\n      setToMiddleInput = _useState36[1];\n\n  var _useState37 = useState(hslInputArray[2]),\n      _useState38 = _slicedToArray(_useState37, 2),\n      toBottomInput = _useState38[0],\n      setToBottomInput = _useState38[1];\n\n  var toggleTogglePosition = function toggleTogglePosition() {\n    setTogglePosition(!togglePosition);\n  };\n\n  var toggleFromRgbButton = function toggleFromRgbButton() {\n    if (toRgbButton) {\n      setToRgbButton(false);\n      setToHslButton(true);\n    }\n\n    if (fromRgbButton) return;\n    if (fromHslButton) setFromHslButton(false);\n    if (fromHexButton) setFromHexButton(false);\n    setFromRgbButton(true);\n    setFromTopLabel(rgbLabelArray[0]);\n    setFromMiddleLabel(rgbLabelArray[1]);\n    setFromBottomLabel(rgbLabelArray[2]);\n    setFromTopInput(rgbInputArray[0]);\n    setFromMiddleInput(rgbInputArray[1]);\n    setFromBottomInput(rgbInputArray[2]);\n  };\n\n  var toggleFromHslButton = function toggleFromHslButton() {\n    if (toHslButton) {\n      setToHslButton(false);\n      setToRgbButton(true);\n    }\n\n    if (fromRgbButton) setFromRgbButton(false);\n    if (fromHexButton) setFromHexButton(false);\n    setFromHslButton(true);\n    setFromTopLabel(hslLabelArray[0]);\n    setFromMiddleLabel(hslLabelArray[1]);\n    setFromBottomLabel(hslLabelArray[2]);\n    setFromTopInput(hslInputArray[0]);\n    setFromMiddleInput(hslInputArray[1]);\n    setFromBottomInput(hslInputArray[2]);\n  };\n\n  var toggleFromHexButton = function toggleFromHexButton() {\n    if (toHexButton) {\n      setToHexButton(false);\n      setToRgbButton(true);\n    }\n\n    if (fromHslButton) setFromHslButton(false);\n    if (fromRgbButton) setFromRgbButton(false);\n    setFromHexButton(true);\n    setFromTopLabel(hexLabelArray[0]);\n    setFromMiddleLabel(hexLabelArray[1]);\n    setFromBottomLabel(hexLabelArray[2]);\n    setFromTopInput(hexInputArray[0]);\n    setFromMiddleInput(hexInputArray[1]);\n    setFromBottomInput(hexInputArray[2]);\n  };\n\n  var toggleToRgbButton = function toggleToRgbButton() {\n    if (fromRgbButton) return;\n    if (toHexButton) setToHexButton(false);\n    if (toHslButton) setToHslButton(false);\n    setToRgbButton(true);\n    setToTopLabel(rgbLabelArray[0]);\n    setToMiddleLabel(rgbLabelArray[1]);\n    setToBottomLabel(rgbLabelArray[2]);\n    setToTopInput(rgbInputArray[0]);\n    setToMiddleInput(rgbInputArray[1]);\n    setToBottomInput(rgbInputArray[2]);\n  };\n\n  var toggleToHslButton = function toggleToHslButton() {\n    if (fromHslButton) return;\n    if (toHexButton) setToHexButton(false);\n    if (toRgbButton) setToRgbButton(false);\n    setToHslButton(true);\n    setToTopLabel(hslLabelArray[0]);\n    setToMiddleLabel(hslLabelArray[1]);\n    setToBottomLabel(hslLabelArray[2]);\n    setToTopInput(hslInputArray[0]);\n    setToMiddleInput(hslInputArray[1]);\n    setToBottomInput(hslInputArray[2]);\n  };\n\n  var toggleToHexButton = function toggleToHexButton() {\n    if (fromHexButton) return;\n    if (toRgbButton) setToRgbButton(false);\n    if (toHslButton) setToHslButton(false);\n    setToHexButton(true);\n    setToTopLabel(hexLabelArray[0]);\n    setToMiddleLabel(hexLabelArray[1]);\n    setToBottomLabel(hexLabelArray[2]);\n    setToTopInput(hexInputArray[0]);\n    setToMiddleInput(hexInputArray[1]);\n    setToBottomInput(hexInputArray[2]);\n  };\n\n  var playerSubmit = function playerSubmit(playerInput) {\n    //if they missed a field then exit function\n    var _iterator = _createForOfIteratorHelper(playerInput),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var input = _step.value;\n        if (input.includes('From')) return;\n      } //validate input\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var tempInput = checkInput(playerInput); //display any input errors while retaining good ones\n\n    setFromTopInput(\"\".concat(tempInput[0]));\n    setFromMiddleInput(\"\".concat(tempInput[1]));\n    setFromBottomInput(\"\".concat(tempInput[2]));\n    var renderedColor = '';\n    var displayedValue = ''; //RGB to HSL\n\n    if (fromRgbButton && toHslButton) {\n      renderedColor = tempInput.join(', ');\n      displayedValue = RGBtoHSL(renderedColor); //HSL to RGB\n    } else if (fromHslButton && toRgbButton) {\n      var stringHSL = \"\".concat(tempInput[0], \", \").concat(tempInput[1], \"%, \").concat(tempInput[2], \"%\");\n      renderedColor = HSLtoRGB(stringHSL);\n      displayedValue = renderedColor; //Hex to RGB\n    } else if (fromHexButton && toRgbButton) {\n      renderedColor = HEXtoRGB(\"#\".concat(tempInput.join('')));\n      displayedValue = renderedColor; //RGB to HEX\n    } else if (fromRgbButton && toHexButton) {\n      renderedColor = tempInput.join(', ');\n      displayedValue = RGBtoHEX(tempInput.join(',')); //HSL to HEX\n    } else if (fromHslButton && toHexButton) {\n      var _stringHSL = \"\".concat(tempInput[0], \", \").concat(tempInput[1], \"%, \").concat(tempInput[2], \"%\");\n\n      renderedColor = HSLtoRGB(_stringHSL);\n      displayedValue = RGBtoHEX(renderedColor); //HEX to HSL\n    } else if (fromHexButton && toHslButton) {\n      renderedColor = HEXtoRGB(\"#\".concat(tempInput.join('')));\n      displayedValue = RGBtoHSL(renderedColor);\n    } //display converted values\n\n\n    var displayArray = displayedValue.split(',');\n    setToTopInput(\"\".concat(displayArray[0]));\n    setToMiddleInput(\"\".concat(displayArray[1]));\n    setToBottomInput(\"\".concat(displayArray[2])); //render player color with compliments\n\n    values.setCustomColor(renderedColor);\n  };\n\n  var checkInput = function checkInput(playerInput) {\n    var result = []; //RGB input\n\n    if (fromRgbButton) {\n      for (var i = 0; i < 3; i++) {\n        if (!Number(playerInput[i]) && Number(playerInput[i]) !== 0) {\n          result.push('From 0 to 255!');\n        } else if (playerInput[i] < 0 || playerInput[i] > 255) {\n          result.push('From 0 to 255!');\n        } else {\n          result.push(playerInput[i]);\n        }\n      }\n    } //HSL input\n\n\n    if (fromHslButton) {\n      if (playerInput[0] < 0 || playerInput[0] > 360 || !Number(playerInput[0])) {\n        result.push('From 0 to 360');\n      } else {\n        result.push(playerInput[0]);\n      }\n\n      if (playerInput[1] < 0 || playerInput[1] > 100 || !Number(playerInput[1])) {\n        result.push('From 0 to 100');\n      } else {\n        result.push(playerInput[1]);\n      }\n\n      if (playerInput[2] < 0 || playerInput[2] > 100 || !Number(playerInput[2])) {\n        result.push('From 0 to 100');\n      } else {\n        result.push(playerInput[2]);\n      }\n    } //HEX input\n\n\n    if (fromHexButton) {\n      var validNumberInputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n      var validLetterInputs = ['A', 'B', 'C', 'D', 'E', 'F'];\n\n      for (var _i = 0; _i < 3; _i++) {\n        if (playerInput[_i].length !== 2) {\n          result.push('From 00 to FF');\n          continue;\n        }\n\n        if ((validNumberInputs.includes(Number(playerInput[_i][0])) || validLetterInputs.includes(playerInput[_i][0])) && (validNumberInputs.includes(Number(playerInput[_i][1])) || validLetterInputs.includes(playerInput[_i][1]))) {\n          result.push(playerInput[_i]);\n        } else {\n          result.push('From 00 to FF');\n        }\n      }\n    }\n\n    return result;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LeftConvertPanel, {\n      fromRgbButton: fromRgbButton,\n      fromHslButton: fromHslButton,\n      fromHexButton: fromHexButton,\n      toRgbButton: toRgbButton,\n      toHslButton: toHslButton,\n      toHexButton: toHexButton,\n      repeatRender: values.repeatRender,\n      togglePosition: togglePosition,\n      fromTopLabel: fromTopLabel,\n      fromMiddleLabel: fromMiddleLabel,\n      fromBottomLabel: fromBottomLabel,\n      fromTopInput: fromTopInput,\n      fromMiddleInput: fromMiddleInput,\n      fromBottomInput: fromBottomInput,\n      toggleFromRgbButton: toggleFromRgbButton,\n      toggleFromHslButton: toggleFromHslButton,\n      toggleFromHexButton: toggleFromHexButton,\n      toggleToRgbButton: toggleToRgbButton,\n      toggleToHslButton: toggleToHslButton,\n      toggleToHexButton: toggleToHexButton,\n      toggleTogglePosition: toggleTogglePosition,\n      toggleRepeatRender: values.toggleRepeatRender,\n      playerSubmit: playerSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(RightConvertPanel, {\n      toTopLabel: toTopLabel,\n      toMiddleLabel: toMiddleLabel,\n      toBottomLabel: toBottomLabel,\n      toTopInput: toTopInput,\n      toMiddleInput: toMiddleInput,\n      toBottomInput: toBottomInput,\n      togglePosition: togglePosition,\n      repeatRender: values.repeatRender,\n      toggleCreateTriadic: values.toggleCreateTriadic,\n      toggleCreateAnalogous: values.toggleCreateAnalogous,\n      toggleCreatePastel: values.toggleCreatePastel,\n      toggleRepeatRender: values.toggleRepeatRender,\n      toggleTogglePosition: toggleTogglePosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(ConvertContainer, \"ny3wuTA//kgeMd9mwKywn5iNfwg=\");\n\n_c = ConvertContainer;\nexport default ConvertContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConvertContainer\");","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/src/Components/Footer/ConvertContainer.js"],"names":["React","useState","useContext","ColorContext","HSLtoRGB","RGBtoHEX","HEXtoRGB","RGBtoHSL","LeftConvertPanel","RightConvertPanel","ConvertContainer","values","rgbLabelArray","rgbInputArray","hslLabelArray","hslInputArray","hexLabelArray","hexInputArray","togglePosition","setTogglePosition","fromRgbButton","setFromRgbButton","fromHslButton","setFromHslButton","fromHexButton","setFromHexButton","toRgbButton","setToRgbButton","toHslButton","setToHslButton","toHexButton","setToHexButton","fromTopLabel","setFromTopLabel","fromMiddleLabel","setFromMiddleLabel","fromBottomLabel","setFromBottomLabel","fromTopInput","setFromTopInput","fromMiddleInput","setFromMiddleInput","fromBottomInput","setFromBottomInput","toTopLabel","setToTopLabel","toMiddleLabel","setToMiddleLabel","toBottomLabel","setToBottomLabel","toTopInput","setToTopInput","toMiddleInput","setToMiddleInput","toBottomInput","setToBottomInput","toggleTogglePosition","toggleFromRgbButton","toggleFromHslButton","toggleFromHexButton","toggleToRgbButton","toggleToHslButton","toggleToHexButton","playerSubmit","playerInput","input","includes","tempInput","checkInput","renderedColor","displayedValue","join","stringHSL","displayArray","split","setCustomColor","result","i","Number","push","validNumberInputs","validLetterInputs","length","repeatRender","toggleRepeatRender","toggleCreateTriadic","toggleCreateAnalogous","toggleCreatePastel"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\n\nimport ColorContext from '../../context/ColorContext';\nimport { HSLtoRGB, RGBtoHEX, HEXtoRGB, RGBtoHSL } from '../../pureFunctions'\nimport LeftConvertPanel from './LeftConvertPanel';\nimport RightConvertPanel from './RightConvertPanel';\n\nconst ConvertContainer = () => {\n    const values = useContext(ColorContext);\n\n    const rgbLabelArray = ['Red', 'Green', 'Blue'];\n    const rgbInputArray = ['From 0 to 255', 'From 0 to 255', 'From 0 to 255'];\n    const hslLabelArray = ['Hue', 'Saturation', 'Light'];\n    const hslInputArray = ['From 0 to 360', 'From 0 to 100', 'From 0 to 100'];\n    const hexLabelArray = ['Red', 'Green', 'Blue'];\n    const hexInputArray = ['From 00 to FF', 'From 00 to FF', 'From 00 to FF'];\n\n    const [togglePosition, setTogglePosition] = useState(false);\n\n    const [fromRgbButton, setFromRgbButton] = useState(true)\n    const [fromHslButton, setFromHslButton] = useState(false)\n    const [fromHexButton, setFromHexButton] = useState(false)\n\n    const [toRgbButton, setToRgbButton] = useState(false)\n    const [toHslButton, setToHslButton] = useState(true)\n    const [toHexButton, setToHexButton] = useState(false)\n\n    const [fromTopLabel, setFromTopLabel] = useState(rgbLabelArray[0])\n    const [fromMiddleLabel, setFromMiddleLabel] = useState(rgbLabelArray[1])\n    const [fromBottomLabel, setFromBottomLabel] = useState(rgbLabelArray[2])\n\n    const [fromTopInput, setFromTopInput] = useState(rgbInputArray[0])\n    const [fromMiddleInput, setFromMiddleInput] = useState(rgbInputArray[1])\n    const [fromBottomInput, setFromBottomInput] = useState(rgbInputArray[2])\n\n    const [toTopLabel, setToTopLabel] = useState(hslLabelArray[0])\n    const [toMiddleLabel, setToMiddleLabel] = useState(hslLabelArray[1])\n    const [toBottomLabel, setToBottomLabel] = useState(hslLabelArray[2])\n\n    const [toTopInput, setToTopInput] = useState(hslInputArray[0])\n    const [toMiddleInput, setToMiddleInput] = useState(hslInputArray[1])\n    const [toBottomInput, setToBottomInput] = useState(hslInputArray[2])\n\n    const toggleTogglePosition = () => {setTogglePosition(!togglePosition)}\n\n    const toggleFromRgbButton = () => {\n        if (toRgbButton) {\n            setToRgbButton(false)\n            setToHslButton(true)\n        }\n        if (fromRgbButton) return;\n        if (fromHslButton) setFromHslButton(false)\n        if (fromHexButton) setFromHexButton(false)\n\n        setFromRgbButton(true)\n        setFromTopLabel(rgbLabelArray[0])\n        setFromMiddleLabel(rgbLabelArray[1])\n        setFromBottomLabel(rgbLabelArray[2])\n        setFromTopInput(rgbInputArray[0])\n        setFromMiddleInput(rgbInputArray[1])\n        setFromBottomInput(rgbInputArray[2])\n    }\n\n    const toggleFromHslButton = () => {\n        if (toHslButton) {\n            setToHslButton(false)\n            setToRgbButton(true)\n        }\n        if (fromRgbButton) setFromRgbButton(false)\n        if (fromHexButton) setFromHexButton(false)\n\n        setFromHslButton(true)\n        setFromTopLabel(hslLabelArray[0])\n        setFromMiddleLabel(hslLabelArray[1])\n        setFromBottomLabel(hslLabelArray[2])\n        setFromTopInput(hslInputArray[0])\n        setFromMiddleInput(hslInputArray[1])\n        setFromBottomInput(hslInputArray[2])\n    }\n\n    const toggleFromHexButton = () => {\n        if (toHexButton) {\n            setToHexButton(false)\n            setToRgbButton(true)\n        }\n        if (fromHslButton) setFromHslButton(false)\n        if (fromRgbButton) setFromRgbButton(false)\n\n        setFromHexButton(true)\n        setFromTopLabel(hexLabelArray[0])\n        setFromMiddleLabel(hexLabelArray[1])\n        setFromBottomLabel(hexLabelArray[2])\n        setFromTopInput(hexInputArray[0])\n        setFromMiddleInput(hexInputArray[1])\n        setFromBottomInput(hexInputArray[2])\n    }\n\n    const toggleToRgbButton = () => {\n        if (fromRgbButton) return\n        if (toHexButton) setToHexButton(false)\n        if (toHslButton) setToHslButton(false)\n\n        setToRgbButton(true)\n        setToTopLabel(rgbLabelArray[0])\n        setToMiddleLabel(rgbLabelArray[1])\n        setToBottomLabel(rgbLabelArray[2])\n        setToTopInput(rgbInputArray[0])\n        setToMiddleInput(rgbInputArray[1])\n        setToBottomInput(rgbInputArray[2])\n    }\n\n    const toggleToHslButton = () => {\n        if (fromHslButton) return\n        if (toHexButton) setToHexButton(false)\n        if (toRgbButton) setToRgbButton(false)\n\n        setToHslButton(true)\n        setToTopLabel(hslLabelArray[0])\n        setToMiddleLabel(hslLabelArray[1])\n        setToBottomLabel(hslLabelArray[2])\n        setToTopInput(hslInputArray[0])\n        setToMiddleInput(hslInputArray[1])\n        setToBottomInput(hslInputArray[2])\n    }\n\n    const toggleToHexButton = () => {\n        if (fromHexButton) return\n        if (toRgbButton) setToRgbButton(false)\n        if (toHslButton) setToHslButton(false)\n\n        setToHexButton(true)\n        setToTopLabel(hexLabelArray[0])\n        setToMiddleLabel(hexLabelArray[1])\n        setToBottomLabel(hexLabelArray[2])\n        setToTopInput(hexInputArray[0])\n        setToMiddleInput(hexInputArray[1])\n        setToBottomInput(hexInputArray[2])\n    }\n\n    const playerSubmit = (playerInput) => {\n        //if they missed a field then exit function\n        for (let input of playerInput) {\n            if (input.includes('From')) return\n        }\n\n        //validate input\n        const tempInput = checkInput(playerInput)\n\n        //display any input errors while retaining good ones\n        setFromTopInput(`${tempInput[0]}`)\n        setFromMiddleInput(`${tempInput[1]}`)\n        setFromBottomInput(`${tempInput[2]}`)\n\n        let renderedColor = '';\n        let displayedValue = '';\n\n        //RGB to HSL\n        if ((fromRgbButton  && toHslButton)) {\n            renderedColor = tempInput.join(', ');\n            displayedValue = RGBtoHSL(renderedColor)\n\n        //HSL to RGB\n        } else if (fromHslButton && toRgbButton) {\n            let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`\n            renderedColor = HSLtoRGB(stringHSL);\n            displayedValue = renderedColor;\n\n        //Hex to RGB\n        } else if (fromHexButton && toRgbButton) {\n            renderedColor = HEXtoRGB(`#${tempInput.join('')}`);\n            displayedValue = renderedColor;\n\n        //RGB to HEX\n        } else if (fromRgbButton && toHexButton) {\n            renderedColor = tempInput.join(', ');\n            displayedValue = RGBtoHEX(tempInput.join(','))\n\n        //HSL to HEX\n        } else if (fromHslButton && toHexButton) {\n            let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`\n            renderedColor = HSLtoRGB(stringHSL)\n            displayedValue = RGBtoHEX(renderedColor)\n\n        //HEX to HSL\n        } else if (fromHexButton && toHslButton) {\n            renderedColor = HEXtoRGB(`#${tempInput.join('')}`);\n            displayedValue = RGBtoHSL(renderedColor);\n        }\n\n        //display converted values\n        let displayArray = displayedValue.split(',')\n        setToTopInput(`${displayArray[0]}`)\n        setToMiddleInput(`${displayArray[1]}`)\n        setToBottomInput(`${displayArray[2]}`)\n\n        //render player color with compliments\n        values.setCustomColor(renderedColor);\n    }\n\n    const checkInput = (playerInput) => {\n        const result = [];\n\n        //RGB input\n        if (fromRgbButton) {\n            for (let i = 0; i < 3; i++) {\n                if (!Number(playerInput[i]) && Number(playerInput[i]) !== 0) {\n                    result.push('From 0 to 255!')\n                } else if (playerInput[i] < 0 || playerInput[i] > 255) {\n                    result.push('From 0 to 255!')\n                } else {\n                    result.push(playerInput[i])\n                }\n            }\n        }\n\n        //HSL input\n        if (fromHslButton) {\n            if (playerInput[0] < 0 || playerInput[0] > 360 || !Number(playerInput[0])) {\n                result.push('From 0 to 360')\n            } else {\n                result.push(playerInput[0])\n            }\n            if (playerInput[1] < 0 || playerInput[1] > 100 || !Number(playerInput[1])) {\n                result.push('From 0 to 100')\n            } else {\n                result.push(playerInput[1])\n            }\n            if (playerInput[2] < 0 || playerInput[2] > 100 || !Number(playerInput[2])) {\n                result.push('From 0 to 100')\n            } else  {\n                result.push(playerInput[2])\n            }\n        }\n\n        //HEX input\n        if (fromHexButton) {\n            const validNumberInputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n            const validLetterInputs = ['A', 'B', 'C', 'D', 'E', 'F'];\n            for (let i = 0; i < 3; i++) {\n                if (playerInput[i].length !== 2) {\n                    result.push('From 00 to FF')\n                    continue;\n                }\n                if ((validNumberInputs.includes(Number(playerInput[i][0]))||\n                     validLetterInputs.includes(playerInput[i][0])) &&\n                    (validNumberInputs.includes(Number(playerInput[i][1])) ||\n                     validLetterInputs.includes(playerInput[i][1]))) {\n                    result.push(playerInput[i])\n                } else {\n                    result.push('From 00 to FF')\n                }\n            }\n        }\n        return result;\n    }\n\n    return (\n        <>\n            <LeftConvertPanel\n                fromRgbButton={fromRgbButton}\n                fromHslButton={fromHslButton}\n                fromHexButton={fromHexButton}\n                toRgbButton={toRgbButton}\n                toHslButton={toHslButton}\n                toHexButton={toHexButton}\n                repeatRender={values.repeatRender}\n                togglePosition={togglePosition}\n\n                fromTopLabel={fromTopLabel}\n                fromMiddleLabel={fromMiddleLabel}\n                fromBottomLabel={fromBottomLabel}\n                fromTopInput={fromTopInput}\n                fromMiddleInput={fromMiddleInput}\n                fromBottomInput={fromBottomInput}\n\n                toggleFromRgbButton={toggleFromRgbButton}\n                toggleFromHslButton={toggleFromHslButton}\n                toggleFromHexButton={toggleFromHexButton}\n                toggleToRgbButton={toggleToRgbButton}\n                toggleToHslButton={toggleToHslButton}\n                toggleToHexButton={toggleToHexButton}\n                toggleTogglePosition={toggleTogglePosition}\n                toggleRepeatRender={values.toggleRepeatRender}\n                playerSubmit={playerSubmit}\n            />\n            <RightConvertPanel\n                toTopLabel={toTopLabel}\n                toMiddleLabel={toMiddleLabel}\n                toBottomLabel={toBottomLabel}\n                toTopInput={toTopInput}\n                toMiddleInput={toMiddleInput}\n                toBottomInput={toBottomInput}\n                togglePosition={togglePosition}\n                repeatRender={values.repeatRender}\n\n                toggleCreateTriadic={values.toggleCreateTriadic}\n                toggleCreateAnalogous={values.toggleCreateAnalogous}\n                toggleCreatePastel={values.toggleCreatePastel}\n                toggleRepeatRender={values.toggleRepeatRender}\n                toggleTogglePosition={toggleTogglePosition}\n            />\n        </>\n    )\n}\n\nexport default ConvertContainer;\n"]},"metadata":{},"sourceType":"module"}