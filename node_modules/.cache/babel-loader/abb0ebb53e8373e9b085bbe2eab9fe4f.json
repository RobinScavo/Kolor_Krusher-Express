{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js\";\nimport React from 'react';\nimport { generateEasyColors, HSLtoRGB, generateBattleColors, generateZenColors, generateGhostColors, generatePastelColors, generateCustomColors, zenObject } from './PureFunctions';\nimport Backdrop from './Components/Backdrop/Backdrop';\nimport KarenContext from './KarenContext';\nimport InstructionModal from './Components/Modals/InstructionModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n  constructor(props) {\n    const battleArray = generateBattleColors();\n    super(props);\n\n    this.toggleInstructionModal = () => this.setState({\n      instructionModal: !this.state.instructionModal\n    });\n\n    this.toggleLoginModal = () => this.setState({\n      loginModal: !this.state.loginModal\n    });\n\n    this.toggleBioModal = () => this.setState({\n      bioModal: !this.state.bioModal\n    });\n\n    this.togglePlayerPageModal = () => this.setState({\n      playerPageModal: !this.state.playerPageModal\n    });\n\n    this.toggleGameOn = () => this.setState({\n      gameOn: false\n    });\n\n    this.toggleWindowDisplay = () => this.setState({\n      windowDisplayed: !this.state.windowDisplayed\n    });\n\n    this.clearRounds = () => this.setState({\n      round: 0\n    });\n\n    this.toggleCreateAnalogous = () => {\n      if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createAnalogous: true\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createAnalogous: false\n        });\n      }, delayOrNot);\n    };\n\n    this.toggleCreatePastel = () => {\n      if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createPastel: true\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createPastel: false\n        });\n      }, delayOrNot);\n    };\n\n    this.toggleCreateTriadic = () => {\n      if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createTriadic: true\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createTriadic: false\n        });\n      }, delayOrNot);\n    };\n\n    this.setCustomColor = custom => {\n      // if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createCustom: true,\n        customColor: custom\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createCustom: false\n        });\n      }, delayOrNot);\n    };\n\n    this.toggleStartZen = () => {\n      if (this.state.startBattle) this.toggleStartBattle();\n      if (this.state.startConvert) this.toggleStartConvert();\n      this.setState({\n        startZen: !this.state.startZen\n      });\n    };\n\n    this.toggleStartBattle = () => {\n      if (this.state.startZen) this.toggleStartZen();\n      if (this.state.startConvert) this.toggleStartConvert();\n      this.setState({\n        startBattle: !this.state.startBattle\n      });\n    };\n\n    this.toggleStartConvert = () => {\n      if (this.state.startZen) this.toggleStartZen();\n      if (this.state.startBattle) this.toggleStartBattle();\n      this.setState({\n        startConvert: !this.state.startConvert\n      });\n    };\n\n    this.startGame = () => {\n      this.clearBoard();\n      this.timeout = setTimeout(() => {\n        this.setState({\n          gameOn: true\n        });\n        this.updateColorArrayContext();\n      }, 1100);\n    };\n\n    this.removeCoin = () => {\n      let tempArray = [];\n\n      if (this.state.coinArray[0]) {\n        tempArray = [false, true, true];\n      } else if (this.state.coinArray[1]) {\n        tempArray = [false, false, true];\n      } else {\n        tempArray = [false, false, false];\n      }\n\n      this.setState({\n        coinArray: tempArray\n      });\n    };\n\n    this.correctGuess = () => {\n      let coinCount = this.state.coins;\n\n      if (this.state.startBattle) {\n        for (let coin of this.state.coinArray) {\n          if (coin) coinCount++;\n        }\n\n        this.setState({\n          gameOn: false,\n          coins: coinCount\n        });\n      } else if (this.state.startZen) {\n        this.setState({\n          kernelVisibility: true,\n          gameOn: false\n        });\n        setTimeout(() => {\n          this.toggleKernelDisplay();\n        }, 4000);\n      }\n\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n      }, 1500);\n    };\n\n    this.clearBoard = () => {\n      let clearArray = [];\n\n      for (let i = 0; i < 6; i++) {\n        clearArray.push({\n          background: `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n        });\n      }\n\n      this.setState({\n        colorArray: clearArray\n      });\n    };\n\n    this.updateTimerContext = seconds => {\n      this.setState({\n        timer: seconds,\n        score: this.state.score + seconds\n      });\n    };\n\n    this.updateColorArrayContext = () => {\n      console.log('update');\n      let randomSix = Math.floor(Math.random() * 6);\n      let targetArray = ['colorOne', 'colorTwo', 'colorThree', 'colorFour', 'colorFive', 'colorSix'];\n      let targetId = targetArray[randomSix];\n      let arr = [];\n      if (this.state.startZen) arr = generateZenColors();\n      if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateGhostColors();\n      if (this.state.startConvert && this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateBattleColors();\n      if (this.state.startConvert && !this.state.createTriadic && this.state.createAnalogous && !this.state.createPastel) arr = generateZenColors();\n      if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && this.state.createPastel) arr = generatePastelColors();\n      if (this.state.startConvert && this.state.createCustom) arr = generateCustomColors(this.state.customColor);\n\n      if (this.state.startBattle) {\n        this.state.round <= 2 ? arr = generateEasyColors() : arr = generateBattleColors();\n      }\n\n      const targetColor = arr[randomSix];\n      const firstSlice = targetColor.background.slice(42);\n      let colorTarget = firstSlice.slice(0, firstSlice.length - 7);\n      colorTarget = colorTarget.split(',');\n      let first = colorTarget[0];\n      let second = colorTarget[1];\n      let third = colorTarget[2];\n      let combined = `${first.slice(1)}, ${second.slice(0, second.length - 1)}, ${third.slice(0, third.length - 2)}`;\n      let converted = HSLtoRGB(combined);\n      this.setState({\n        coinArray: [true, true, true],\n        colorArray: arr,\n        round: this.state.round + 1,\n        colorTargetId: targetId,\n        gameOn: true,\n        colorTarget: converted\n      });\n    };\n\n    this.toggleKernelDisplay = () => {\n      let randomKernel = '';\n\n      if (Object.keys(this.state.mutableZen).length > 0) {\n        let kernelArray = Object.keys(this.state.mutableZen);\n        let randomNum = Math.random();\n        let kernelIndex = Math.floor(randomNum * kernelArray.length);\n        let randomKey = kernelArray[kernelIndex];\n        randomKernel = this.state.mutableZen[randomKey];\n        delete this.state.mutableZen[randomKey];\n      }\n\n      ;\n      this.setState({\n        zenKernel: randomKernel,\n        kernelVisibility: false\n      });\n    };\n\n    this.state = {\n      colorArray: battleArray,\n      colorTargetId: '',\n      colorTarget: null,\n      round: 0,\n      score: 0,\n      timer: 15,\n      coins: 0,\n      coinArray: [true, true, true],\n      gameOn: false,\n      zenKernel: '',\n      kernelVisibility: false,\n      zenObject: zenObject,\n      mutableZen: zenObject,\n      windowDisplayed: false,\n      customColor: '255, 255, 255',\n      instructionModal: false,\n      loginModal: false,\n      bioModal: false,\n      playerPageModal: false,\n      startZen: false,\n      startBattle: false,\n      startConvert: false,\n      createTriadic: false,\n      createAnalogous: false,\n      createPastel: false,\n      createCustom: false,\n      toggleInstructionModal: this.toggleInstructionModal,\n      toggleLoginModal: this.toggleLoginModal,\n      toggleBioModal: this.toggleBioModal,\n      togglePlayerPageModal: this.togglePlayerPageModal,\n      toggleWindowDisplay: this.toggleWindowDisplay,\n      toggleGameOn: this.toggleGameOn,\n      toggleStartZen: this.toggleStartZen,\n      toggleStartBattle: this.toggleStartBattle,\n      toggleStartConvert: this.toggleStartConvert,\n      toggleCreateTriadic: this.toggleCreateTriadic,\n      toggleCreateAnalogous: this.toggleCreateAnalogous,\n      toggleCreatePastel: this.toggleCreatePastel,\n      setCustomColor: this.setCustomColor,\n      startGame: this.startGame,\n      correctGuess: this.correctGuess,\n      updateTimer: this.updateTimerContext,\n      removeCoin: this.removeCoin,\n      clearRounds: this.clearRounds\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBoardDiv\",\n      value: this.state,\n      children: /*#__PURE__*/_jsxDEV(KarenContext.Provider, {\n        value: this.state,\n        children: /*#__PURE__*/_jsxDEV(ModalProvider, {\n          children: [/*#__PURE__*/_jsxDEV(Backdrop, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 25\n          }, this), this.state.instructionModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(InstructionModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 29\n          }, this), this.state.loginModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(LoginModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 29\n          }, this), this.state.bioModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MyBioModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 29\n          }, this), this.state.playerPageModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(PlayerPageModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Controller;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js"],"names":["React","generateEasyColors","HSLtoRGB","generateBattleColors","generateZenColors","generateGhostColors","generatePastelColors","generateCustomColors","zenObject","Backdrop","KarenContext","InstructionModal","LoginModal","PlayerPageModal","MyBioModal","Modal","ModalProvider","Controller","Component","constructor","props","battleArray","toggleInstructionModal","setState","instructionModal","state","toggleLoginModal","loginModal","toggleBioModal","bioModal","togglePlayerPageModal","playerPageModal","toggleGameOn","gameOn","toggleWindowDisplay","windowDisplayed","clearRounds","round","toggleCreateAnalogous","createAnalogous","createPastel","createTriadic","delayOrNot","colorArray","class","clearBoard","setTimeout","updateColorArrayContext","toggleCreatePastel","toggleCreateTriadic","setCustomColor","custom","createCustom","customColor","toggleStartZen","startBattle","toggleStartBattle","startConvert","toggleStartConvert","startZen","startGame","timeout","removeCoin","tempArray","coinArray","correctGuess","coinCount","coins","coin","kernelVisibility","toggleKernelDisplay","clearArray","i","push","background","updateTimerContext","seconds","timer","score","console","log","randomSix","Math","floor","random","targetArray","targetId","arr","targetColor","firstSlice","slice","colorTarget","length","split","first","second","third","combined","converted","colorTargetId","randomKernel","Object","keys","mutableZen","kernelArray","randomNum","kernelIndex","randomKey","zenKernel","updateTimer","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,kBADJ,EAEIC,QAFJ,EAGIC,oBAHJ,EAIIC,iBAJJ,EAKIC,mBALJ,EAMIC,oBANJ,EAOIC,oBAPJ,EAQIC,SARJ,QASO,iBATP;AAWA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,eAAP,MAA4B,qCAA5B;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SAASC,aAAT,QAA8B,sBAA9B;;AAEA,MAAMC,UAAN,SAAyBjB,KAAK,CAACkB,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMC,WAAW,GAAGlB,oBAAoB,EAAxC;AAEA,UAAOiB,KAAP;;AAHgB,SA2DpBE,sBA3DoB,GA2DK,MAAM,KAAKC,QAAL,CAAc;AAAEC,MAAAA,gBAAgB,EAAE,CAAC,KAAKC,KAAL,CAAWD;AAAhC,KAAd,CA3DX;;AAAA,SA4DpBE,gBA5DoB,GA4DD,MAAM,KAAKH,QAAL,CAAc;AAAEI,MAAAA,UAAU,EAAE,CAAC,KAAKF,KAAL,CAAWE;AAA1B,KAAd,CA5DL;;AAAA,SA6DpBC,cA7DoB,GA6DH,MAAM,KAAKL,QAAL,CAAc;AAAEM,MAAAA,QAAQ,EAAE,CAAC,KAAKJ,KAAL,CAAWI;AAAxB,KAAd,CA7DH;;AAAA,SA8DpBC,qBA9DoB,GA8DI,MAAM,KAAKP,QAAL,CAAc;AAAEQ,MAAAA,eAAe,EAAE,CAAC,KAAKN,KAAL,CAAWM;AAA/B,KAAd,CA9DV;;AAAA,SA+DpBC,YA/DoB,GA+DL,MAAM,KAAKT,QAAL,CAAc;AAAEU,MAAAA,MAAM,EAAE;AAAV,KAAd,CA/DD;;AAAA,SAgEpBC,mBAhEoB,GAgEE,MAAM,KAAKX,QAAL,CAAc;AAAEY,MAAAA,eAAe,EAAE,CAAC,KAAKV,KAAL,CAAWU;AAA/B,KAAd,CAhER;;AAAA,SAiEpBC,WAjEoB,GAiEN,MAAM,KAAKb,QAAL,CAAc;AAAEc,MAAAA,KAAK,EAAE;AAAT,KAAd,CAjEA;;AAAA,SAmEpBC,qBAnEoB,GAmEI,MAAM;AAC1B,UAAI,KAAKb,KAAL,CAAWc,eAAX,IAA8B,KAAKd,KAAL,CAAWe,YAAzC,IAAyD,KAAKf,KAAL,CAAWgB,aAAxE,EAAuF;AACvF,WAAKlB,QAAL,CAAc;AAAEgB,QAAAA,eAAe,EAAE;AAAnB,OAAd;AACA,UAAIG,UAAU,GAAG,CAAjB;AACC,WAAKjB,KAAL,CAAWkB,UAAX,CAAsB,CAAtB,EAAyBC,KAAzB,KAAmC,SAApC,GACMF,UAAU,GAAG,CADnB,GAEMA,UAAU,GAAG,IAFnB;AAGA,WAAKG,UAAL;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,uBAAL;AACA,aAAKxB,QAAL,CAAc;AAAEgB,UAAAA,eAAe,EAAE;AAAnB,SAAd;AACH,OAHS,EAGPG,UAHO,CAAV;AAIH,KA/EmB;;AAAA,SAgFpBM,kBAhFoB,GAgFC,MAAM;AACvB,UAAI,KAAKvB,KAAL,CAAWc,eAAX,IAA8B,KAAKd,KAAL,CAAWe,YAAzC,IAAyD,KAAKf,KAAL,CAAWgB,aAAxE,EAAuF;AACvF,WAAKlB,QAAL,CAAc;AAAEiB,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACA,UAAIE,UAAU,GAAG,CAAjB;AACC,WAAKjB,KAAL,CAAWkB,UAAX,CAAsB,CAAtB,EAAyBC,KAAzB,KAAmC,SAApC,GACMF,UAAU,GAAG,CADnB,GAEMA,UAAU,GAAG,IAFnB;AAGA,WAAKG,UAAL;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,uBAAL;AACA,aAAKxB,QAAL,CAAc;AAAEiB,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACH,OAHS,EAGPE,UAHO,CAAV;AAIH,KA5FmB;;AAAA,SA6FpBO,mBA7FoB,GA6FE,MAAM;AACxB,UAAI,KAAKxB,KAAL,CAAWc,eAAX,IAA8B,KAAKd,KAAL,CAAWe,YAAzC,IAAyD,KAAKf,KAAL,CAAWgB,aAAxE,EAAuF;AACvF,WAAKlB,QAAL,CAAc;AAAEkB,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACA,UAAIC,UAAU,GAAG,CAAjB;AACC,WAAKjB,KAAL,CAAWkB,UAAX,CAAsB,CAAtB,EAAyBC,KAAzB,KAAmC,SAApC,GACMF,UAAU,GAAG,CADnB,GAEMA,UAAU,GAAG,IAFnB;AAGA,WAAKG,UAAL;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,uBAAL;AACA,aAAKxB,QAAL,CAAc;AAAEkB,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACH,OAHS,EAGPC,UAHO,CAAV;AAIH,KAzGmB;;AAAA,SA0GpBQ,cA1GoB,GA0GFC,MAAD,IAAY;AACzB;AACA,WAAK5B,QAAL,CAAc;AACV6B,QAAAA,YAAY,EAAE,IADJ;AAEVC,QAAAA,WAAW,EAAEF;AAFH,OAAd;AAIA,UAAIT,UAAU,GAAG,CAAjB;AACC,WAAKjB,KAAL,CAAWkB,UAAX,CAAsB,CAAtB,EAAyBC,KAAzB,KAAmC,SAApC,GACMF,UAAU,GAAG,CADnB,GAEMA,UAAU,GAAG,IAFnB;AAGA,WAAKG,UAAL;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,uBAAL;AACA,aAAKxB,QAAL,CAAc;AAAE6B,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACH,OAHS,EAGPV,UAHO,CAAV;AAIH,KAzHmB;;AAAA,SA2HpBY,cA3HoB,GA2HH,MAAM;AACnB,UAAI,KAAK7B,KAAL,CAAW8B,WAAf,EAA4B,KAAKC,iBAAL;AAC5B,UAAI,KAAK/B,KAAL,CAAWgC,YAAf,EAA6B,KAAKC,kBAAL;AAC7B,WAAKnC,QAAL,CAAc;AAAEoC,QAAAA,QAAQ,EAAE,CAAC,KAAKlC,KAAL,CAAWkC;AAAxB,OAAd;AACH,KA/HmB;;AAAA,SAgIpBH,iBAhIoB,GAgIA,MAAM;AACtB,UAAI,KAAK/B,KAAL,CAAWkC,QAAf,EAAyB,KAAKL,cAAL;AACzB,UAAI,KAAK7B,KAAL,CAAWgC,YAAf,EAA6B,KAAKC,kBAAL;AAC7B,WAAKnC,QAAL,CAAc;AAAEgC,QAAAA,WAAW,EAAE,CAAC,KAAK9B,KAAL,CAAW8B;AAA3B,OAAd;AACH,KApImB;;AAAA,SAqIpBG,kBArIoB,GAqIC,MAAM;AACvB,UAAI,KAAKjC,KAAL,CAAWkC,QAAf,EAAyB,KAAKL,cAAL;AACzB,UAAI,KAAK7B,KAAL,CAAW8B,WAAf,EAA4B,KAAKC,iBAAL;AAC5B,WAAKjC,QAAL,CAAc;AAAEkC,QAAAA,YAAY,EAAE,CAAC,KAAKhC,KAAL,CAAWgC;AAA5B,OAAd;AACH,KAzImB;;AAAA,SA2IpBG,SA3IoB,GA2IR,MAAM;AACd,WAAKf,UAAL;AACA,WAAKgB,OAAL,GAAef,UAAU,CAAC,MAAM;AAC5B,aAAKvB,QAAL,CAAc;AAAEU,UAAAA,MAAM,EAAE;AAAV,SAAd;AACA,aAAKc,uBAAL;AACH,OAHwB,EAGtB,IAHsB,CAAzB;AAIH,KAjJmB;;AAAA,SAmJpBe,UAnJoB,GAmJP,MAAM;AACf,UAAIC,SAAS,GAAG,EAAhB;;AACA,UAAI,KAAKtC,KAAL,CAAWuC,SAAX,CAAqB,CAArB,CAAJ,EAA6B;AACzBD,QAAAA,SAAS,GAAG,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,CAAZ;AACH,OAFD,MAEO,IAAI,KAAKtC,KAAL,CAAWuC,SAAX,CAAqB,CAArB,CAAJ,EAA6B;AAChCD,QAAAA,SAAS,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,CAAZ;AACH,OAFM,MAEA;AACHA,QAAAA,SAAS,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAZ;AACH;;AACD,WAAKxC,QAAL,CAAe;AAAEyC,QAAAA,SAAS,EAAED;AAAb,OAAf;AACH,KA7JmB;;AAAA,SAgKpBE,YAhKoB,GAgKL,MAAM;AACjB,UAAIC,SAAS,GAAG,KAAKzC,KAAL,CAAW0C,KAA3B;;AAEA,UAAI,KAAK1C,KAAL,CAAW8B,WAAf,EAA4B;AACxB,aAAK,IAAIa,IAAT,IAAiB,KAAK3C,KAAL,CAAWuC,SAA5B,EAAuC;AACnC,cAAII,IAAJ,EAAUF,SAAS;AACtB;;AAED,aAAK3C,QAAL,CAAc;AACVU,UAAAA,MAAM,EAAE,KADE;AAEVkC,UAAAA,KAAK,EAAED;AAFG,SAAd;AAIH,OATD,MASO,IAAI,KAAKzC,KAAL,CAAWkC,QAAf,EAAyB;AAC5B,aAAKpC,QAAL,CAAc;AACV8C,UAAAA,gBAAgB,EAAE,IADR;AAEVpC,UAAAA,MAAM,EAAE;AAFE,SAAd;AAIAa,QAAAA,UAAU,CAAC,MAAM;AACb,eAAKwB,mBAAL;AACH,SAFS,EAEP,IAFO,CAAV;AAGH;;AACD,WAAKzB,UAAL;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,uBAAL;AACH,OAFS,EAEP,IAFO,CAAV;AAGH,KAzLmB;;AAAA,SA2LpBF,UA3LoB,GA2LP,MAAM;AACf,UAAI0B,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBD,QAAAA,UAAU,CAACE,IAAX,CAAgB;AAAEC,UAAAA,UAAU,EACvB;AADW,SAAhB;AAGH;;AACD,WAAKnD,QAAL,CAAc;AACVoB,QAAAA,UAAU,EAAE4B;AADF,OAAd;AAGH,KArMmB;;AAAA,SAuMpBI,kBAvMoB,GAuMEC,OAAD,IAAa;AAC9B,WAAKrD,QAAL,CAAc;AACVsD,QAAAA,KAAK,EAAED,OADG;AAEVE,QAAAA,KAAK,EAAE,KAAKrD,KAAL,CAAWqD,KAAX,GAAmBF;AAFhB,OAAd;AAIH,KA5MmB;;AAAA,SA8MpB7B,uBA9MoB,GA8MM,MAAM;AAC5BgC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAhB;AACA,UAAIC,WAAW,GAAG,CACd,UADc,EAEd,UAFc,EAGd,YAHc,EAId,WAJc,EAKd,WALc,EAMd,UANc,CAAlB;AAQA,UAAIC,QAAQ,GAAGD,WAAW,CAACJ,SAAD,CAA1B;AACA,UAAIM,GAAG,GAAG,EAAV;AAEA,UAAI,KAAK9D,KAAL,CAAWkC,QAAf,EAAyB4B,GAAG,GAAGnF,iBAAiB,EAAvB;AAEzB,UAAI,KAAKqB,KAAL,CAAWgC,YAAX,IAA2B,CAAC,KAAKhC,KAAL,CAAWgB,aAAvC,IAAwD,CAAC,KAAKhB,KAAL,CAAWc,eAApE,IAAuF,CAAC,KAAKd,KAAL,CAAWe,YAAvG,EACI+C,GAAG,GAAGlF,mBAAmB,EAAzB;AACJ,UAAI,KAAKoB,KAAL,CAAWgC,YAAX,IAA2B,KAAKhC,KAAL,CAAWgB,aAAtC,IAAuD,CAAC,KAAKhB,KAAL,CAAWc,eAAnE,IAAsF,CAAC,KAAKd,KAAL,CAAWe,YAAtG,EACI+C,GAAG,GAAGpF,oBAAoB,EAA1B;AACJ,UAAI,KAAKsB,KAAL,CAAWgC,YAAX,IAA2B,CAAC,KAAKhC,KAAL,CAAWgB,aAAvC,IAAwD,KAAKhB,KAAL,CAAWc,eAAnE,IAAsF,CAAC,KAAKd,KAAL,CAAWe,YAAtG,EACI+C,GAAG,GAAGnF,iBAAiB,EAAvB;AACJ,UAAI,KAAKqB,KAAL,CAAWgC,YAAX,IAA2B,CAAC,KAAKhC,KAAL,CAAWgB,aAAvC,IAAwD,CAAC,KAAKhB,KAAL,CAAWc,eAApE,IAAuF,KAAKd,KAAL,CAAWe,YAAtG,EACI+C,GAAG,GAAGjF,oBAAoB,EAA1B;AACJ,UAAI,KAAKmB,KAAL,CAAWgC,YAAX,IAA2B,KAAKhC,KAAL,CAAW2B,YAA1C,EACImC,GAAG,GAAGhF,oBAAoB,CAAC,KAAKkB,KAAL,CAAW4B,WAAZ,CAA1B;;AAEJ,UAAI,KAAK5B,KAAL,CAAW8B,WAAf,EAA4B;AACxB,aAAK9B,KAAL,CAAWY,KAAX,IAAoB,CAApB,GACMkD,GAAG,GAAGtF,kBAAkB,EAD9B,GAEMsF,GAAG,GAAGpF,oBAAoB,EAFhC;AAGC;;AAEL,YAAMqF,WAAW,GAAGD,GAAG,CAACN,SAAD,CAAvB;AACA,YAAMQ,UAAU,GAAID,WAAW,CAACd,UAAZ,CAAuBgB,KAAvB,CAA6B,EAA7B,CAApB;AACA,UAAIC,WAAW,GAAIF,UAAU,CAACC,KAAX,CAAiB,CAAjB,EAAoBD,UAAU,CAACG,MAAX,GAAmB,CAAvC,CAAnB;AACAD,MAAAA,WAAW,GAAGA,WAAW,CAACE,KAAZ,CAAkB,GAAlB,CAAd;AACA,UAAIC,KAAK,GAAGH,WAAW,CAAC,CAAD,CAAvB;AACA,UAAII,MAAM,GAAGJ,WAAW,CAAC,CAAD,CAAxB;AACA,UAAIK,KAAK,GAAGL,WAAW,CAAC,CAAD,CAAvB;AACA,UAAIM,QAAQ,GAAI,GAAEH,KAAK,CAACJ,KAAN,CAAY,CAAZ,CAAe,KAAIK,MAAM,CAACL,KAAP,CAAa,CAAb,EAAgBK,MAAM,CAACH,MAAP,GAAe,CAA/B,CAAkC,KAAII,KAAK,CAACN,KAAN,CAAY,CAAZ,EAAeM,KAAK,CAACJ,MAAN,GAAa,CAA5B,CAA+B,EAA1G;AACA,UAAIM,SAAS,GAAGhG,QAAQ,CAAC+F,QAAD,CAAxB;AACA,WAAK1E,QAAL,CAAc;AACVyC,QAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADD;AAEVrB,QAAAA,UAAU,EAAE4C,GAFF;AAGVlD,QAAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWY,KAAX,GAAmB,CAHhB;AAIV8D,QAAAA,aAAa,EAAEb,QAJL;AAKVrD,QAAAA,MAAM,EAAE,IALE;AAMV0D,QAAAA,WAAW,EAAEO;AANH,OAAd;AAQH,KAhQmB;;AAAA,SAkQpB5B,mBAlQoB,GAkQE,MAAM;AACxB,UAAI8B,YAAY,GAAG,EAAnB;;AACA,UAAIC,MAAM,CAACC,IAAP,CAAY,KAAK7E,KAAL,CAAW8E,UAAvB,EAAmCX,MAAnC,GAA4C,CAAhD,EAAmD;AAC/C,YAAIY,WAAW,GAAGH,MAAM,CAACC,IAAP,CAAY,KAAK7E,KAAL,CAAW8E,UAAvB,CAAlB;AACA,YAAIE,SAAS,GAAGvB,IAAI,CAACE,MAAL,EAAhB;AACA,YAAIsB,WAAW,GAAGxB,IAAI,CAACC,KAAL,CAAWsB,SAAS,GAAGD,WAAW,CAACZ,MAAnC,CAAlB;AACA,YAAIe,SAAS,GAAGH,WAAW,CAACE,WAAD,CAA3B;AACAN,QAAAA,YAAY,GAAG,KAAK3E,KAAL,CAAW8E,UAAX,CAAsBI,SAAtB,CAAf;AACA,eAAO,KAAKlF,KAAL,CAAW8E,UAAX,CAAsBI,SAAtB,CAAP;AACH;;AAAA;AAED,WAAKpF,QAAL,CAAc;AACVqF,QAAAA,SAAS,EAAER,YADD;AAEV/B,QAAAA,gBAAgB,EAAE;AAFR,OAAd;AAIH,KAjRmB;;AAIhB,SAAK5C,KAAL,GAAa;AACTkB,MAAAA,UAAU,EAAEtB,WADH;AAET8E,MAAAA,aAAa,EAAE,EAFN;AAGTR,MAAAA,WAAW,EAAE,IAHJ;AAITtD,MAAAA,KAAK,EAAE,CAJE;AAKTyC,MAAAA,KAAK,EAAE,CALE;AAMTD,MAAAA,KAAK,EAAE,EANE;AAOTV,MAAAA,KAAK,EAAE,CAPE;AAQTH,MAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CARF;AAST/B,MAAAA,MAAM,EAAE,KATC;AAUT2E,MAAAA,SAAS,EAAE,EAVF;AAWTvC,MAAAA,gBAAgB,EAAE,KAXT;AAYT7D,MAAAA,SAAS,EAAEA,SAZF;AAaT+F,MAAAA,UAAU,EAAE/F,SAbH;AAcT2B,MAAAA,eAAe,EAAE,KAdR;AAeTkB,MAAAA,WAAW,EAAE,eAfJ;AAiBT7B,MAAAA,gBAAgB,EAAE,KAjBT;AAkBTG,MAAAA,UAAU,EAAE,KAlBH;AAmBTE,MAAAA,QAAQ,EAAE,KAnBD;AAoBTE,MAAAA,eAAe,EAAE,KApBR;AAsBT4B,MAAAA,QAAQ,EAAE,KAtBD;AAuBTJ,MAAAA,WAAW,EAAE,KAvBJ;AAwBTE,MAAAA,YAAY,EAAE,KAxBL;AA0BThB,MAAAA,aAAa,EAAE,KA1BN;AA2BTF,MAAAA,eAAe,EAAE,KA3BR;AA4BTC,MAAAA,YAAY,EAAE,KA5BL;AA6BTY,MAAAA,YAAY,EAAE,KA7BL;AA+BT9B,MAAAA,sBAAsB,EAAE,KAAKA,sBA/BpB;AAgCTI,MAAAA,gBAAgB,EAAE,KAAKA,gBAhCd;AAiCTE,MAAAA,cAAc,EAAE,KAAKA,cAjCZ;AAkCTE,MAAAA,qBAAqB,EAAE,KAAKA,qBAlCnB;AAmCTI,MAAAA,mBAAmB,EAAE,KAAKA,mBAnCjB;AAqCTF,MAAAA,YAAY,EAAE,KAAKA,YArCV;AAsCTsB,MAAAA,cAAc,EAAE,KAAKA,cAtCZ;AAuCTE,MAAAA,iBAAiB,EAAE,KAAKA,iBAvCf;AAwCTE,MAAAA,kBAAkB,EAAE,KAAKA,kBAxChB;AA0CTT,MAAAA,mBAAmB,EAAE,KAAKA,mBA1CjB;AA2CTX,MAAAA,qBAAqB,EAAE,KAAKA,qBA3CnB;AA4CTU,MAAAA,kBAAkB,EAAE,KAAKA,kBA5ChB;AA6CTE,MAAAA,cAAc,EAAE,KAAKA,cA7CZ;AA+CTU,MAAAA,SAAS,EAAE,KAAKA,SA/CP;AAgDTK,MAAAA,YAAY,EAAE,KAAKA,YAhDV;AAiDT4C,MAAAA,WAAW,EAAE,KAAKlC,kBAjDT;AAkDTb,MAAAA,UAAU,EAAE,KAAKA,UAlDR;AAmDT1B,MAAAA,WAAW,EAAE,KAAKA;AAnDT,KAAb;AAqDH;;AA2ND0E,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,KAAK,EAAE,KAAKrF,KAA1C;AAAA,6BACI,QAAC,YAAD,CAAc,QAAd;AAAuB,QAAA,KAAK,EAAE,KAAKA,KAAnC;AAAA,+BACI,QAAC,aAAD;AAAA,kCACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,kBADJ,EAIK,KAAKA,KAAL,CAAWD,gBAAX,iBACG,QAAC,KAAD;AAAA,mCACI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBALR,EASK,KAAKC,KAAL,CAAWE,UAAX,iBACG,QAAC,KAAD;AAAA,mCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAVR,EAcK,KAAKF,KAAL,CAAWI,QAAX,iBACG,QAAC,KAAD;AAAA,mCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAfR,EAmBK,KAAKJ,KAAL,CAAWM,eAAX,iBACG,QAAC,KAAD;AAAA,mCACI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBApBR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AA+BH;;AArToC;;AAwTzC,eAAed,UAAf","sourcesContent":["import React from 'react'\n\nimport {\n    generateEasyColors,\n    HSLtoRGB,\n    generateBattleColors,\n    generateZenColors,\n    generateGhostColors,\n    generatePastelColors,\n    generateCustomColors,\n    zenObject,\n} from './PureFunctions';\n\nimport Backdrop from './Components/Backdrop/Backdrop'\nimport KarenContext from './KarenContext';\nimport InstructionModal from './Components/Modals/InstructionModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n    constructor (props) {\n        const battleArray = generateBattleColors();\n\n        super (props);\n        this.state = {\n            colorArray: battleArray,\n            colorTargetId: '',\n            colorTarget: null,\n            round: 0,\n            score: 0,\n            timer: 15,\n            coins: 0,\n            coinArray: [true, true, true],\n            gameOn: false,\n            zenKernel: '',\n            kernelVisibility: false,\n            zenObject: zenObject,\n            mutableZen: zenObject,\n            windowDisplayed: false,\n            customColor: '255, 255, 255',\n\n            instructionModal: false,\n            loginModal: false,\n            bioModal: false,\n            playerPageModal: false,\n\n            startZen: false,\n            startBattle: false,\n            startConvert: false,\n\n            createTriadic: false,\n            createAnalogous: false,\n            createPastel: false,\n            createCustom: false,\n\n            toggleInstructionModal: this.toggleInstructionModal,\n            toggleLoginModal: this.toggleLoginModal,\n            toggleBioModal: this.toggleBioModal,\n            togglePlayerPageModal: this.togglePlayerPageModal,\n            toggleWindowDisplay: this.toggleWindowDisplay,\n\n            toggleGameOn: this.toggleGameOn,\n            toggleStartZen: this.toggleStartZen,\n            toggleStartBattle: this.toggleStartBattle,\n            toggleStartConvert: this.toggleStartConvert,\n\n            toggleCreateTriadic: this.toggleCreateTriadic,\n            toggleCreateAnalogous: this.toggleCreateAnalogous,\n            toggleCreatePastel: this.toggleCreatePastel,\n            setCustomColor: this.setCustomColor,\n\n            startGame: this.startGame,\n            correctGuess: this.correctGuess,\n            updateTimer: this.updateTimerContext,\n            removeCoin: this.removeCoin,\n            clearRounds: this.clearRounds,\n        }\n    }\n\n    toggleInstructionModal = () => this.setState({ instructionModal: !this.state.instructionModal })\n    toggleLoginModal = () => this.setState({ loginModal: !this.state.loginModal })\n    toggleBioModal = () => this.setState({ bioModal: !this.state.bioModal })\n    togglePlayerPageModal = () => this.setState({ playerPageModal: !this.state.playerPageModal })\n    toggleGameOn = () => this.setState({ gameOn: false })\n    toggleWindowDisplay = () => this.setState({ windowDisplayed: !this.state.windowDisplayed})\n    clearRounds = () => this.setState({ round: 0})\n\n    toggleCreateAnalogous = () => {\n        if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({ createAnalogous: true});\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createAnalogous: false})\n        }, delayOrNot)\n    }\n    toggleCreatePastel = () => {\n        if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({ createPastel: true});\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createPastel: false})\n        }, delayOrNot)\n    }\n    toggleCreateTriadic = () => {\n        if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({ createTriadic: true});\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createTriadic: false});\n        }, delayOrNot)\n    }\n    setCustomColor = (custom) => {\n        // if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({\n            createCustom: true,\n            customColor: custom,\n        });\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createCustom: false});\n        }, delayOrNot)\n    }\n\n    toggleStartZen = () => {\n        if (this.state.startBattle) this.toggleStartBattle();\n        if (this.state.startConvert) this.toggleStartConvert();\n        this.setState({ startZen: !this.state.startZen });\n    }\n    toggleStartBattle = () => {\n        if (this.state.startZen) this.toggleStartZen();\n        if (this.state.startConvert) this.toggleStartConvert();\n        this.setState({ startBattle: !this.state.startBattle });\n    }\n    toggleStartConvert = () => {\n        if (this.state.startZen) this.toggleStartZen();\n        if (this.state.startBattle) this.toggleStartBattle();\n        this.setState({ startConvert: !this.state.startConvert});\n    }\n\n    startGame = () => {\n        this.clearBoard();\n        this.timeout = setTimeout(() => {\n            this.setState({ gameOn: true })\n            this.updateColorArrayContext()\n        }, 1100)\n    }\n\n    removeCoin = () => {\n        let tempArray = [];\n        if (this.state.coinArray[0]) {\n            tempArray = [false, true, true]\n        } else if (this.state.coinArray[1]) {\n            tempArray = [false, false, true]\n        } else {\n            tempArray = [false, false, false]\n        }\n        this.setState ({ coinArray: tempArray })\n    }\n\n\n    correctGuess = () => {\n        let coinCount = this.state.coins;\n\n        if (this.state.startBattle) {\n            for (let coin of this.state.coinArray) {\n                if (coin) coinCount++\n            }\n\n            this.setState({\n                gameOn: false,\n                coins: coinCount,\n             });\n        } else if (this.state.startZen) {\n            this.setState({\n                kernelVisibility: true,\n                gameOn: false,\n            })\n            setTimeout(() => {\n                this.toggleKernelDisplay();\n            }, 4000)\n        }\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n        }, 1500)\n    }\n\n    clearBoard = () => {\n        let clearArray = []\n        for (let i = 0; i < 6; i++) {\n            clearArray.push({ background:\n                `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n            })\n        }\n        this.setState({\n            colorArray: clearArray,\n        })\n    }\n\n    updateTimerContext = (seconds) => {\n        this.setState({\n            timer: seconds,\n            score: this.state.score + seconds,\n        })\n    }\n\n    updateColorArrayContext = () => {\n        console.log('update')\n        let randomSix = Math.floor(Math.random() * 6)\n        let targetArray = [\n            'colorOne',\n            'colorTwo',\n            'colorThree',\n            'colorFour',\n            'colorFive',\n            'colorSix'\n        ]\n        let targetId = targetArray[randomSix];\n        let arr = [];\n\n        if (this.state.startZen) arr = generateZenColors();\n\n        if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel)\n            arr = generateGhostColors();\n        if (this.state.startConvert && this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel)\n            arr = generateBattleColors();\n        if (this.state.startConvert && !this.state.createTriadic && this.state.createAnalogous && !this.state.createPastel)\n            arr = generateZenColors();\n        if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && this.state.createPastel)\n            arr = generatePastelColors();\n        if (this.state.startConvert && this.state.createCustom)\n            arr = generateCustomColors(this.state.customColor);\n\n        if (this.state.startBattle) {\n            this.state.round <= 2\n                ? arr = generateEasyColors()\n                : arr = generateBattleColors()\n            }\n\n        const targetColor = arr[randomSix]\n        const firstSlice = (targetColor.background.slice(42))\n        let colorTarget = (firstSlice.slice(0, firstSlice.length -7))\n        colorTarget = colorTarget.split(',')\n        let first = colorTarget[0]\n        let second = colorTarget[1]\n        let third = colorTarget[2]\n        let combined = `${first.slice(1)}, ${second.slice(0, second.length -1)}, ${third.slice(0, third.length-2)}`\n        let converted = HSLtoRGB(combined)\n        this.setState({\n            coinArray: [true, true, true],\n            colorArray: arr,\n            round: this.state.round + 1,\n            colorTargetId: targetId,\n            gameOn: true,\n            colorTarget: converted,\n        })\n    }\n\n    toggleKernelDisplay = () => {\n        let randomKernel = '';\n        if (Object.keys(this.state.mutableZen).length > 0) {\n            let kernelArray = Object.keys(this.state.mutableZen);\n            let randomNum = Math.random();\n            let kernelIndex = Math.floor(randomNum * kernelArray.length)\n            let randomKey = kernelArray[kernelIndex];\n            randomKernel = this.state.mutableZen[randomKey]\n            delete this.state.mutableZen[randomKey]\n        };\n\n        this.setState({\n            zenKernel: randomKernel,\n            kernelVisibility: false,\n        })\n    }\n\n\n    render() {\n        return (\n            <div className='gameBoardDiv' value={this.state}>\n                <KarenContext.Provider value={this.state}>\n                    <ModalProvider>\n                        <Backdrop />\n\n                        {/* Modal Control */}\n                        {this.state.instructionModal &&\n                            <Modal >\n                                <InstructionModal />\n                            </Modal>\n                        }\n                        {this.state.loginModal &&\n                            <Modal>\n                                <LoginModal />\n                            </Modal>\n                        }\n                        {this.state.bioModal &&\n                            <Modal>\n                                <MyBioModal />\n                            </Modal>\n                        }\n                        {this.state.playerPageModal &&\n                            <Modal>\n                                <PlayerPageModal />\n                            </Modal>\n                        }\n                    </ModalProvider>\n                </KarenContext.Provider>\n            </div>\n        )\n    }\n}\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}