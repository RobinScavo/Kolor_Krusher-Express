{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js\";\nimport React from 'react';\nimport { generateEasyArray, generateTriadicArray, generateAnalogousArray, generateGhostArray, generatePastelArray, generateCustomArray } from './PureFunctions';\nimport Backdrop from './Components/Backdrop/Backdrop';\nimport ColorContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport BattleInstructionModal from './Components/Modals/BattleInstructionModal';\nimport ConvertInstructionModal from './Components/Modals/ConvertInstructionModal';\nimport ScoringModal from './Components/Modals/ScoringModal';\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n  constructor(props) {\n    const battleArray = generateAnalogousArray();\n    super(props);\n\n    this.toggleMainModal = () => {\n      this.setState({\n        repeatRender: false,\n        createAnalogous: false,\n        MainModal: !this.state.MainModal,\n        round: 0,\n        coins: 0,\n        score: 0,\n        timer: 15\n      });\n    };\n\n    this.toggleLoginModal = () => this.setState({\n      loginModal: !this.state.loginModal\n    });\n\n    this.toggleBioModal = () => this.setState({\n      bioModal: !this.state.bioModal\n    });\n\n    this.togglePlayerPageModal = () => this.setState({\n      playerPageModal: !this.state.playerPageModal\n    });\n\n    this.toggleBattleInstructionModal = () => this.setState({\n      battleInstructionModal: !this.state.battleInstructionModal\n    });\n\n    this.toggleConvertInstructionModal = () => this.setState({\n      convertInstructionModal: !this.state.convertInstructionModal\n    });\n\n    this.toggleScoringModal = () => this.setState({\n      scoringModal: !this.state.scoringModal\n    });\n\n    this.toggleGameOn = () => this.setState({\n      gameOn: false\n    });\n\n    this.toggleRepeatRender = () => this.setState({\n      repeatRender: !this.state.repeatRender\n    });\n\n    this.toggleWindowDisplay = () => this.setState({\n      windowDisplayed: !this.state.windowDisplayed\n    });\n\n    this.clearRounds = () => this.setState({\n      round: 0\n    });\n\n    this.toggleCreateAnalogous = () => {\n      this.setState({\n        createAnalogous: true\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n\n        if (!this.state.repeatRender) {\n          this.setState({\n            createAnalogous: false\n          });\n        }\n      }, 1100);\n    };\n\n    this.toggleCreatePastel = () => {\n      this.setState({\n        createPastel: true\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n\n        if (!this.state.repeatRender) {\n          this.setState({\n            createPastel: false\n          });\n        }\n      }, 1100);\n    };\n\n    this.toggleCreateTriadic = () => {\n      this.setState({\n        createTriadic: true\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n\n        if (!this.state.repeatRender) {\n          this.setState({\n            createTriadic: false\n          });\n        }\n      }, 1100);\n    };\n\n    this.setCustomColor = custom => {\n      this.setState({\n        createCustom: true,\n        customColor: custom\n      });\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createCustom: false\n        });\n      }, 1100);\n    };\n\n    this.toggleStartBattle = () => {\n      if (this.state.startConvert) this.toggleStartConvert();\n      this.setState({\n        startBattle: !this.state.startBattle\n      });\n    };\n\n    this.toggleStartConvert = () => {\n      if (this.state.startBattle) this.toggleStartBattle();\n      this.setState({\n        startConvert: !this.state.startConvert\n      });\n    };\n\n    this.startGame = () => {\n      this.clearBoard();\n      this.timeout = setTimeout(() => {\n        this.setState({\n          gameOn: true\n        });\n        this.updateColorArrayContext();\n      }, 1100);\n    };\n\n    this.removeCoin = () => {\n      let tempArray = [];\n\n      if (this.state.coinArray[0]) {\n        tempArray = [false, true, true];\n      } else if (this.state.coinArray[1]) {\n        tempArray = [false, false, true];\n      } else {\n        tempArray = [false, false, false];\n      }\n\n      this.setState({\n        coinArray: tempArray\n      });\n    };\n\n    this.correctGuess = () => {\n      let coinCount = this.state.coins;\n\n      if (this.state.startBattle) {\n        for (let coin of this.state.coinArray) {\n          if (coin) coinCount++;\n        }\n\n        this.setState({\n          gameOn: false,\n          coins: coinCount\n        });\n      }\n\n      this.clearBoard();\n\n      if (this.state.round < 6) {\n        setTimeout(() => {\n          this.updateColorArrayContext();\n        }, 1500);\n      } else {\n        this.setState({\n          gameOn: false,\n          startBattle: false\n        });\n        setTimeout(() => {\n          this.toggleScoringModal();\n        }, 2000);\n      }\n    };\n\n    this.newGame = () => {\n      this.setState({\n        round: 0,\n        coins: 0,\n        score: 0,\n        timer: 15\n      });\n      this.toggleStartBattle();\n      this.startGame();\n    };\n\n    this.clearBoard = () => {\n      let clearArray = [];\n\n      for (let i = 0; i < 6; i++) {\n        clearArray.push({\n          background: `radial-gradient(circle at 100px 100px, rgb(255, 255, 255, 0.1), #000)`\n        });\n      }\n\n      this.setState({\n        colorArray: clearArray\n      });\n    };\n\n    this.updateTimerContext = seconds => {\n      this.setState({\n        timer: seconds,\n        score: this.state.score + seconds\n      });\n    };\n\n    this.updateColorArrayContext = () => {\n      let randomSix = Math.floor(Math.random() * 6);\n      let targetArray = ['colorOne', 'colorTwo', 'colorThree', 'colorFour', 'colorFive', 'colorSix'];\n      let targetId = targetArray[randomSix];\n      let arr = [];\n      if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateGhostArray();\n      if (this.state.startConvert && this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateTriadicArray();\n      if (this.state.startConvert && this.state.createAnalogous && !this.state.createTriadic && !this.state.createPastel) arr = generateAnalogousArray();\n      if (this.state.startConvert && this.state.createPastel && !this.state.createTriadic && !this.state.createAnalogous) arr = generatePastelArray();\n      if (this.state.startConvert && this.state.createCustom) arr = generateCustomArray(this.state.customColor);\n\n      if (this.state.startBattle) {\n        this.state.round <= 2 ? arr = generateEasyArray() : arr = generateTriadicArray();\n      }\n\n      if (!this.state.startBattle && !this.state.startConvert) {\n        arr = generateAnalogousArray();\n      }\n\n      if (this.state.startBattle) {\n        //display target value\n        const targetColor = arr[randomSix];\n        const firstSlice = targetColor.background.slice(42);\n        let colorTarget = firstSlice.slice(0, firstSlice.length - 7);\n        this.setState({\n          coinArray: [true, true, true],\n          round: this.state.round + 1,\n          colorTargetId: targetId,\n          colorTarget: colorTarget\n        });\n      }\n\n      this.setState({\n        colorArray: arr,\n        gameOn: true\n      });\n\n      if (this.state.repeatRender) {\n        setTimeout(() => {\n          this.clearBoard();\n        }, 1100);\n        setTimeout(() => {\n          this.updateColorArrayContext();\n        }, 2200);\n      }\n    };\n\n    this.state = {\n      colorArray: battleArray,\n      colorTargetId: '',\n      colorTarget: null,\n      round: 0,\n      score: 0,\n      timer: 15,\n      coins: 0,\n      coinArray: [true, true, true],\n      gameOn: false,\n      windowDisplayed: false,\n      customColor: '255, 255, 255',\n      MainModal: false,\n      loginModal: false,\n      bioModal: false,\n      playerPageModal: false,\n      battleInstructionModal: false,\n      convertInstructionModal: false,\n      scoringModal: false,\n      repeatRender: true,\n      startBattle: false,\n      startConvert: false,\n      createTriadic: false,\n      createAnalogous: false,\n      createPastel: false,\n      createCustom: false,\n      toggleMainModal: this.toggleMainModal,\n      toggleLoginModal: this.toggleLoginModal,\n      toggleBioModal: this.toggleBioModal,\n      togglePlayerPageModal: this.togglePlayerPageModal,\n      toggleBattleInstructionModal: this.toggleBattleInstructionModal,\n      toggleConvertInstructionModal: this.toggleConvertInstructionModal,\n      toggleScoringModal: this.toggleScoringModal,\n      toggleWindowDisplay: this.toggleWindowDisplay,\n      toggleGameOn: this.toggleGameOn,\n      toggleStartBattle: this.toggleStartBattle,\n      toggleStartConvert: this.toggleStartConvert,\n      toggleRepeatRender: this.toggleRepeatRender,\n      toggleCreateTriadic: this.toggleCreateTriadic,\n      toggleCreateAnalogous: this.toggleCreateAnalogous,\n      toggleCreatePastel: this.toggleCreatePastel,\n      setCustomColor: this.setCustomColor,\n      startGame: this.startGame,\n      correctGuess: this.correctGuess,\n      updateTimer: this.updateTimerContext,\n      removeCoin: this.removeCoin,\n      clearRounds: this.clearRounds,\n      newGame: this.newGame\n    };\n  }\n\n  componentDidMount() {\n    this.toggleCreateAnalogous();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBoardDiv\",\n      value: this.state,\n      children: /*#__PURE__*/_jsxDEV(ColorContext.Provider, {\n        value: this.state,\n        children: /*#__PURE__*/_jsxDEV(ModalProvider, {\n          children: [/*#__PURE__*/_jsxDEV(Backdrop, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 25\n          }, this), this.state.MainModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MainModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 29\n          }, this), this.state.loginModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(LoginModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 29\n          }, this), this.state.bioModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MyBioModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 29\n          }, this), this.state.playerPageModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(PlayerPageModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 29\n          }, this), this.state.battleInstructionModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(BattleInstructionModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 29\n          }, this), this.state.convertInstructionModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(ConvertInstructionModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 29\n          }, this), this.state.scoringModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(ScoringModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Controller;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js"],"names":["React","generateEasyArray","generateTriadicArray","generateAnalogousArray","generateGhostArray","generatePastelArray","generateCustomArray","Backdrop","ColorContext","MainModal","LoginModal","PlayerPageModal","MyBioModal","BattleInstructionModal","ConvertInstructionModal","ScoringModal","Modal","ModalProvider","Controller","Component","constructor","props","battleArray","toggleMainModal","setState","repeatRender","createAnalogous","state","round","coins","score","timer","toggleLoginModal","loginModal","toggleBioModal","bioModal","togglePlayerPageModal","playerPageModal","toggleBattleInstructionModal","battleInstructionModal","toggleConvertInstructionModal","convertInstructionModal","toggleScoringModal","scoringModal","toggleGameOn","gameOn","toggleRepeatRender","toggleWindowDisplay","windowDisplayed","clearRounds","toggleCreateAnalogous","clearBoard","setTimeout","updateColorArrayContext","toggleCreatePastel","createPastel","toggleCreateTriadic","createTriadic","setCustomColor","custom","createCustom","customColor","toggleStartBattle","startConvert","toggleStartConvert","startBattle","startGame","timeout","removeCoin","tempArray","coinArray","correctGuess","coinCount","coin","newGame","clearArray","i","push","background","colorArray","updateTimerContext","seconds","randomSix","Math","floor","random","targetArray","targetId","arr","targetColor","firstSlice","slice","colorTarget","length","colorTargetId","updateTimer","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n    generateEasyArray,\n    generateTriadicArray,\n    generateAnalogousArray,\n    generateGhostArray,\n    generatePastelArray,\n    generateCustomArray,\n} from './PureFunctions';\n\nimport Backdrop from './Components/Backdrop/Backdrop'\nimport ColorContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport BattleInstructionModal from './Components/Modals/BattleInstructionModal'\nimport ConvertInstructionModal from './Components/Modals/ConvertInstructionModal'\nimport ScoringModal from './Components/Modals/ScoringModal'\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n    constructor (props) {\n        const battleArray = generateAnalogousArray();\n\n        super (props);\n        this.state = {\n            colorArray: battleArray,\n            colorTargetId: '',\n            colorTarget: null,\n            round: 0,\n            score: 0,\n            timer: 15,\n            coins: 0,\n            coinArray: [true, true, true],\n            gameOn: false,\n            windowDisplayed: false,\n            customColor: '255, 255, 255',\n\n            MainModal: false,\n            loginModal: false,\n            bioModal: false,\n            playerPageModal: false,\n            battleInstructionModal: false,\n            convertInstructionModal: false,\n            scoringModal: false,\n            repeatRender: true,\n\n            startBattle: false,\n            startConvert: false,\n\n            createTriadic: false,\n            createAnalogous: false,\n            createPastel: false,\n            createCustom: false,\n\n            toggleMainModal: this.toggleMainModal,\n            toggleLoginModal: this.toggleLoginModal,\n            toggleBioModal: this.toggleBioModal,\n            togglePlayerPageModal: this.togglePlayerPageModal,\n            toggleBattleInstructionModal: this.toggleBattleInstructionModal,\n            toggleConvertInstructionModal: this.toggleConvertInstructionModal,\n            toggleScoringModal: this.toggleScoringModal,\n\n            toggleWindowDisplay: this.toggleWindowDisplay,\n\n            toggleGameOn: this.toggleGameOn,\n            toggleStartBattle: this.toggleStartBattle,\n            toggleStartConvert: this.toggleStartConvert,\n            toggleRepeatRender: this.toggleRepeatRender,\n\n            toggleCreateTriadic: this.toggleCreateTriadic,\n            toggleCreateAnalogous: this.toggleCreateAnalogous,\n            toggleCreatePastel: this.toggleCreatePastel,\n            setCustomColor: this.setCustomColor,\n\n            startGame: this.startGame,\n            correctGuess: this.correctGuess,\n            updateTimer: this.updateTimerContext,\n            removeCoin: this.removeCoin,\n            clearRounds: this.clearRounds,\n            newGame: this.newGame\n        }\n    }\n\n    componentDidMount() {this.toggleCreateAnalogous()}\n\n    toggleMainModal = () => {\n        this.setState({\n            repeatRender: false,\n            createAnalogous: false,\n            MainModal: !this.state.MainModal,\n            round: 0,\n            coins: 0,\n            score: 0,\n            timer: 15\n        })\n    }\n\n    toggleLoginModal = () => this.setState({ loginModal: !this.state.loginModal })\n    toggleBioModal = () => this.setState({ bioModal: !this.state.bioModal })\n    togglePlayerPageModal = () => this.setState({ playerPageModal: !this.state.playerPageModal })\n    toggleBattleInstructionModal = () => this.setState({ battleInstructionModal: !this.state.battleInstructionModal })\n    toggleConvertInstructionModal = () => this.setState({ convertInstructionModal: !this.state.convertInstructionModal })\n    toggleScoringModal = () => this.setState({ scoringModal: !this.state.scoringModal});\n\n    toggleGameOn = () => this.setState({ gameOn: false })\n    toggleRepeatRender = () => this.setState({ repeatRender: !this.state.repeatRender })\n    toggleWindowDisplay = () => this.setState({ windowDisplayed: !this.state.windowDisplayed})\n    clearRounds = () => this.setState({ round: 0})\n\n    toggleCreateAnalogous = () => {\n        this.setState({ createAnalogous: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createAnalogous: false})\n            }\n        }, 1100)\n    }\n\n    toggleCreatePastel = () => {\n        this.setState({ createPastel: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createPastel: false})\n            }\n        }, 1100)\n    }\n\n    toggleCreateTriadic = () => {\n        this.setState({ createTriadic: true});\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            if (!this.state.repeatRender) {\n                this.setState({ createTriadic: false});\n            }\n        }, 1100)\n    }\n\n    setCustomColor = (custom) => {\n        this.setState({\n            createCustom: true,\n            customColor: custom,\n        });\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createCustom: false});\n        }, 1100)\n    }\n\n    toggleStartBattle = () => {\n        if (this.state.startConvert) this.toggleStartConvert();\n        this.setState({ startBattle: !this.state.startBattle });\n    }\n\n    toggleStartConvert = () => {\n        if (this.state.startBattle) this.toggleStartBattle();\n        this.setState({ startConvert: !this.state.startConvert});\n    }\n\n    startGame = () => {\n        this.clearBoard();\n        this.timeout = setTimeout(() => {\n            this.setState({ gameOn: true })\n            this.updateColorArrayContext()\n        }, 1100)\n    }\n\n    removeCoin = () => {\n        let tempArray = [];\n        if (this.state.coinArray[0]) {\n            tempArray = [false, true, true]\n        } else if (this.state.coinArray[1]) {\n            tempArray = [false, false, true]\n        } else {\n            tempArray = [false, false, false]\n        }\n        this.setState ({ coinArray: tempArray })\n    }\n\n    correctGuess = () => {\n        let coinCount = this.state.coins;\n\n        if (this.state.startBattle) {\n            for (let coin of this.state.coinArray) {\n                if (coin) coinCount++\n            }\n\n            this.setState({\n                gameOn: false,\n                coins: coinCount,\n             });\n        }\n\n        this.clearBoard();\n        if (this.state.round < 6) {\n            setTimeout(() => {\n                this.updateColorArrayContext();\n            }, 1500)\n        } else {\n            this.setState({\n                gameOn: false,\n                startBattle: false\n            })\n            setTimeout(() => {\n                this.toggleScoringModal()\n            }, 2000)\n        }\n    }\n\n    newGame = () => {\n        this.setState({\n            round: 0,\n            coins: 0,\n            score: 0,\n            timer: 15,\n        })\n        this.toggleStartBattle();\n        this.startGame();\n    }\n\n    clearBoard = () => {\n        let clearArray = []\n        for (let i = 0; i < 6; i++) {\n            clearArray.push({ background:\n                `radial-gradient(circle at 100px 100px, rgb(255, 255, 255, 0.1), #000)`\n            })\n        }\n        this.setState({\n            colorArray: clearArray,\n        })\n    }\n\n    updateTimerContext = (seconds) => {\n        this.setState({\n            timer: seconds,\n            score: this.state.score + seconds,\n        })\n    }\n\n    updateColorArrayContext = () => {\n        let randomSix = Math.floor(Math.random() * 6)\n        let targetArray = [\n            'colorOne',\n            'colorTwo',\n            'colorThree',\n            'colorFour',\n            'colorFive',\n            'colorSix'\n        ]\n        let targetId = targetArray[randomSix];\n        let arr = [];\n\n        if (this.state.startConvert &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateGhostArray();\n\n        if (this.state.startConvert &&\n            this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateTriadicArray();\n\n        if (this.state.startConvert &&\n            this.state.createAnalogous &&\n            !this.state.createTriadic &&\n            !this.state.createPastel)\n                arr = generateAnalogousArray();\n\n        if (this.state.startConvert &&\n            this.state.createPastel &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous)\n                arr = generatePastelArray();\n\n        if (this.state.startConvert &&\n            this.state.createCustom)\n                arr = generateCustomArray(this.state.customColor);\n\n        if (this.state.startBattle) {\n            this.state.round <= 2\n                ? arr = generateEasyArray()\n                : arr = generateTriadicArray()\n            }\n\n        if (!this.state.startBattle &&\n            !this.state.startConvert) {\n                arr = generateAnalogousArray()\n            }\n\n\n        if (this.state.startBattle) {\n            //display target value\n            const targetColor = arr[randomSix]\n            const firstSlice = (targetColor.background.slice(42))\n            let colorTarget = (firstSlice.slice(0, firstSlice.length -7))\n\n            this.setState({\n                coinArray: [true, true, true],\n                round: this.state.round + 1,\n                colorTargetId: targetId,\n                colorTarget: colorTarget,\n            })\n        }\n\n        this.setState({\n            colorArray: arr,\n            gameOn: true,\n        });\n\n        if (this.state.repeatRender) {\n            setTimeout(() => {\n                this.clearBoard();\n            }, 1100)\n            setTimeout(() => {\n                this.updateColorArrayContext();\n            }, 2200)\n        }\n    }\n\n    render() {\n        return (\n            <div className='gameBoardDiv' value={this.state}>\n                <ColorContext.Provider value={this.state}>\n                    <ModalProvider>\n                        <Backdrop />\n\n                        {/* Modal Control */}\n                        {this.state.MainModal &&\n                            <Modal >\n                                <MainModal />\n                            </Modal>\n                        }\n                        {this.state.loginModal &&\n                            <Modal>\n                                <LoginModal />\n                            </Modal>\n                        }\n                        {this.state.bioModal &&\n                            <Modal>\n                                <MyBioModal />\n                            </Modal>\n                        }\n                        {this.state.playerPageModal &&\n                            <Modal>\n                                <PlayerPageModal />\n                            </Modal>\n                        }\n                        {this.state.battleInstructionModal &&\n                            <Modal>\n                                <BattleInstructionModal />\n                            </Modal>\n                        }\n                        {this.state.convertInstructionModal &&\n                            <Modal>\n                                <ConvertInstructionModal />\n                            </Modal>\n                        }\n                        {this.state.scoringModal &&\n                            <Modal >\n                                <ScoringModal />\n                            </Modal>\n                        }\n                    </ModalProvider>\n                </ColorContext.Provider>\n            </div>\n        )\n    }\n}\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}