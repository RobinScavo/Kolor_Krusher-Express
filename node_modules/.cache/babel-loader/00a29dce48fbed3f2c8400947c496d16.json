{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import { useDispatch } from \"react-redux\";\n\nimport { Route, Switch } from \"react-router-dom\"; // import SignupFormPage from \"./Components/SignupFormPage\";\n// import * as sessionActions from \"./store/session\";\n// import Navigation from \"./Components/Navigation\";\n// import ControllerContainer from './ControllerContainer'\n\nimport firebase from \"./firebase\";\nimport { useStorageState } from 'react-storage-hooks';\nimport UserContext from './context/UserContext';\nimport Controller from './Controller';\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useStorageState(localStorage, 'state-user', {});\n  const [editMode, setEditMode] = useState(false);\n\n  const toggleEditMode = () => setEditMode(!editMode);\n\n  const onLogin = (email, password) => {\n    firebase.auth().signInWithEmailAndPassword(email, password).then(response => {\n      setUser({\n        email: response.user['email'],\n        isAuthenticated: true\n      });\n    }).catch(error => console.error(error));\n  };\n\n  const onLogout = () => {\n    console.log('logOut', user);\n    firebase.auth().signOut().then(() => {\n      setUser({\n        isAuthenticated: false\n      });\n    }).catch(error => console.error(error));\n  }; // const dispatch = useDispatch();\n  // const [isLoaded, setIsLoaded] = useState(false);\n  // useEffect(() => {\n  //   dispatch(sessionActions.restoreUser()).then(() => setIsLoaded(true));\n  // }, [dispatch]);\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        user,\n        onLogin,\n        onLogout,\n        toggleEditMode\n      },\n      children: /*#__PURE__*/_jsxDEV(Controller, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"uQdsq4JMkZfSDVfDUDaTVpXf5kc=\", false, function () {\n  return [useStorageState];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/App.js"],"names":["React","useState","useEffect","Route","Switch","firebase","useStorageState","UserContext","Controller","App","user","setUser","localStorage","editMode","setEditMode","toggleEditMode","onLogin","email","password","auth","signInWithEmailAndPassword","then","response","isAuthenticated","catch","error","console","onLogout","log","signOut"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B,C,CACA;AACA;AACA;AACA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,eAAe,CAACM,YAAD,EAAe,YAAf,EAA6B,EAA7B,CAAvC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAAyBb,QAAQ,CAAC,KAAD,CAAvC;;AAEA,QAAMc,cAAc,GAAG,MAAMD,WAAW,CAAC,CAACD,QAAF,CAAxC;;AAEA,QAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACnCb,IAAAA,QAAQ,CACLc,IADH,GAEGC,0BAFH,CAE8BH,KAF9B,EAEqCC,QAFrC,EAGGG,IAHH,CAGSC,QAAD,IAAc;AAClBX,MAAAA,OAAO,CAAC;AACNM,QAAAA,KAAK,EAAEK,QAAQ,CAACZ,IAAT,CAAc,OAAd,CADD;AAENa,QAAAA,eAAe,EAAE;AAFX,OAAD,CAAP;AAID,KARH,EASGC,KATH,CASSC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CATlB;AAUD,GAXD;;AAaA,QAAME,QAAQ,GAAG,MAAM;AACrBD,IAAAA,OAAO,CAACE,GAAR,CAAY,QAAZ,EAAsBlB,IAAtB;AACAL,IAAAA,QAAQ,CACLc,IADH,GAEGU,OAFH,GAGGR,IAHH,CAGQ,MAAM;AACVV,MAAAA,OAAO,CAAC;AAAEY,QAAAA,eAAe,EAAE;AAAnB,OAAD,CAAP;AACD,KALH,EAMGC,KANH,CAMUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CANpB;AAOD,GATD,CAnBa,CA6Bb;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAA,2BAgBE,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAEf,QAAAA,IAAF;AAAQM,QAAAA,OAAR;AAAiBW,QAAAA,QAAjB;AAA2BZ,QAAAA;AAA3B,OAA7B;AAAA,6BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAhBF,mBADF;AAuBD;;GA1DQN,G;UACiBH,e;;;KADjBG,G;AA4DT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import { useDispatch } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\n// import SignupFormPage from \"./Components/SignupFormPage\";\n// import * as sessionActions from \"./store/session\";\n// import Navigation from \"./Components/Navigation\";\n// import ControllerContainer from './ControllerContainer'\nimport firebase from \"./firebase\";\nimport { useStorageState } from 'react-storage-hooks';\n\nimport UserContext from './context/UserContext'\nimport Controller from './Controller'\n\nfunction App() {\n  const [user, setUser] = useStorageState(localStorage, 'state-user', {});\n  const [editMode, setEditMode] =useState(false);\n\n  const toggleEditMode = () => setEditMode(!editMode);\n\n  const onLogin = (email, password) => {\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then((response) => {\n        setUser({\n          email: response.user['email'],\n          isAuthenticated: true,\n        })\n      })\n      .catch(error => console.error(error))\n  }\n\n  const onLogout = () => {\n    console.log('logOut', user)\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        setUser({ isAuthenticated: false });\n      })\n      .catch((error) => console.error(error))\n  }\n  // const dispatch = useDispatch();\n  // const [isLoaded, setIsLoaded] = useState(false);\n  // useEffect(() => {\n  //   dispatch(sessionActions.restoreUser()).then(() => setIsLoaded(true));\n  // }, [dispatch]);\n\n  return (\n    <>\n      {/* <Navigation isLoaded={isLoaded} />\n      {isLoaded && (\n        <Switch>\n          <Route path=\"/signup\">\n            <SignupFormPage />\n          </Route>\n        </Switch>\n\n      )} */}\n      {/* <Switch>\n        <Route exact path ='/' component={Controller}>\n        <Route path ='/players' component={Controller}>\n\n      </Switch> */}\n      {/* <Route> */}\n      <UserContext.Provider value={{ user, onLogin, onLogout, toggleEditMode }}>\n          <Controller/>\n      </UserContext.Provider>\n      {/* </Route> */}\n    </>\n)\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}