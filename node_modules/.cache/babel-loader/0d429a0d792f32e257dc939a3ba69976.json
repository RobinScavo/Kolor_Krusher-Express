{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Components/Footer/ClassConvertPanels.js\";\nimport React from 'react';\nimport { HSLtoRGB, RGBtoHEX, HEXtoRGB, RGBtoHSL } from '../../PureFunctions';\nimport LeftConvertPanel from './LeftConvertPanel';\nimport RightConvertPanel from './RightConvertPanel';\nimport './ClassConvertPanels.css';\n\nclass ConvertPanels extends React.Component {\n  constructor(props) {\n    const rgbLabelArray = ['Red', 'Green', 'Blue'];\n    const rgbInputArray = ['From 0 to 255', 'From 0 to 255', 'From 0 to 255'];\n    const hslLabelArray = ['Hue', 'Saturation', 'Light'];\n    const hslInputArray = ['From 0 to 360', 'From 0 to 100', 'From 0 to 100'];\n    const hexLabelArray = ['Red', 'Green', 'Blue'];\n    const hexInputArray = ['From 00 to FF', 'From 00 to FF', 'From 00 to FF'];\n    super(props);\n\n    this.playerSubmit = playerInput => {\n      //if they missed a field then exit function\n      for (let input of playerInput) {\n        if (input.includes('From')) return;\n      } //validate input\n\n\n      const tempInput = this.checkInput(playerInput); //display any input errors while retaining good ones\n\n      this.setState({\n        fromTopInput: `${tempInput[0]}`,\n        fromMiddleInput: `${tempInput[1]}`,\n        fromBottomInput: `${tempInput[2]}`\n      });\n      let renderedColor = '';\n      let displayedValue = ''; //RGB to HSL\n\n      if (this.state.fromRgbButton && this.state.toHslButton) {\n        renderedColor = tempInput.join(',');\n        displayedValue = RGBtoHSL(renderedColor); //HSL to RGB\n      } else if (this.state.fromHslButton && this.state.toRgbButton) {\n        let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`;\n        renderedColor = HSLtoRGB(stringHSL);\n        displayedValue = tempInput.join(','); //Hex to RGB\n      } else if (this.state.fromHexButton && this.state.toRgbButton) {\n        renderedColor = HEXtoRGB(`#${tempInput.join('')}`);\n        displayedValue = renderedColor; //RGB to HEX\n      } else if (this.state.fromRgbButton && this.state.toHexButton) {\n        renderedColor = RGBtoHEX(tempInput.join(',')); // displayedValue =\n        //HSL to HEX\n      } else if (this.state.fromHslButton && this.state.toHexButton) {\n        let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`;\n        let tempColor = HSLtoRGB(stringHSL);\n        renderedColor = RGBtoHEX(tempColor);\n      } else if (this.state.fromHexButton && this.state.toHslButton) {\n        let tempColor = HEXtoRGB(`#${tempInput.join('')}`);\n        renderedColor = RGBtoHSL(`(${tempColor.join(', ')})`);\n        console.log('VVVVVVVVV', tempColor, renderedColor);\n      } else if (this.state.fromRgbButton && this.state.toRgbButton || this.state.fromHslButton && this.state.toHslButton || this.state.fromHexButton && this.state.toHexButton) {\n        renderedColor = tempInput;\n      }\n\n      let displayArray = displayedValue.split(',');\n      this.setState({\n        toTopInput: `${displayArray[0]}`,\n        toMiddleInput: `${displayArray[1]}`,\n        toBottomInput: `${displayArray[2]}`\n      });\n      this.state.setCustom(renderedColor);\n    };\n\n    this.checkInput = playerInput => {\n      const result = []; //RGB input\n\n      if (this.state.fromRgbButton) {\n        for (let i = 0; i < 3; i++) {\n          if (!Number(playerInput[i]) && Number(playerInput[i]) !== 0) {\n            result.push('From 0 to 255!');\n          } else if (playerInput[i] < 0 || playerInput[i] > 255) {\n            result.push('From 0 to 255!');\n          } else {\n            result.push(playerInput[i]);\n          }\n        }\n      } //HSL input\n\n\n      if (this.state.fromHslButton) {\n        if (playerInput[0] < 0 || playerInput[0] > 360 || !Number(playerInput[0])) {\n          result.push('From 0 to 360');\n        } else {\n          result.push(playerInput[0]);\n        }\n\n        if (playerInput[1] < 0 || playerInput[1] > 100 || !Number(playerInput[1])) {\n          result.push('From 0 to 100');\n        } else {\n          result.push(playerInput[1]);\n        }\n\n        if (playerInput[2] < 0 || playerInput[2] > 100 || !Number(playerInput[2])) {\n          result.push('From 0 to 100');\n        } else {\n          result.push(playerInput[2]);\n        }\n      } //HEX input\n\n\n      if (this.state.fromHexButton) {\n        const validNumberInputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n        const validLetterInputs = ['A', 'B', 'C', 'D', 'E', 'F'];\n\n        for (let i = 0; i < 3; i++) {\n          if (playerInput[i].length !== 2) {\n            result.push('From 00 to FF');\n            continue;\n          }\n\n          if ((validNumberInputs.includes(Number(playerInput[i][0])) || validLetterInputs.includes(playerInput[i][0])) && (validNumberInputs.includes(Number(playerInput[i][1])) || validLetterInputs.includes(playerInput[i][1]))) {\n            result.push(playerInput[i]);\n          } else {\n            result.push('From 00 to FF');\n          }\n        }\n      }\n\n      return result;\n    };\n\n    this.toggleFromRgbButton = () => {\n      if (this.state.fromRgbButton) return;\n      if (this.state.fromHslButton) this.setState({\n        fromHslButton: false\n      });\n      if (this.state.fromHexButton) this.setState({\n        fromHexButton: false\n      });\n      this.setState({\n        fromRgbButton: true,\n        fromTopLabel: this.state.rgbLabelArray[0],\n        fromMiddleLabel: this.state.rgbLabelArray[1],\n        fromBottomLabel: this.state.rgbLabelArray[2],\n        fromTopInput: this.state.rgbInputArray[0],\n        fromMiddleInput: this.state.rgbInputArray[1],\n        fromBottomInput: this.state.rgbInputArray[2]\n      });\n    };\n\n    this.toggleFromHslButton = () => {\n      if (this.state.fromRgbButton) this.setState({\n        fromRgbButton: false\n      });\n      if (this.state.fromHexButton) this.setState({\n        fromHexButton: false\n      });\n      this.setState({\n        fromHslButton: true,\n        fromTopLabel: this.state.hslLabelArray[0],\n        fromMiddleLabel: this.state.hslLabelArray[1],\n        fromBottomLabel: this.state.hslLabelArray[2],\n        fromTopInput: this.state.hslInputArray[0],\n        fromMiddleInput: this.state.hslInputArray[1],\n        fromBottomInput: this.state.hslInputArray[2]\n      });\n    };\n\n    this.toggleFromHexButton = () => {\n      if (this.state.fromHslButton) this.setState({\n        fromHslButton: false\n      });\n      if (this.state.fromRgbButton) this.setState({\n        fromRgbButton: false\n      });\n      this.setState({\n        fromHexButton: true,\n        fromTopLabel: this.state.hexLabelArray[0],\n        fromMiddleLabel: this.state.hexLabelArray[1],\n        fromBottomLabel: this.state.hexLabelArray[2],\n        fromTopInput: this.state.hexInputArray[0],\n        fromMiddleInput: this.state.hexInputArray[1],\n        fromBottomInput: this.state.hexInputArray[2]\n      });\n    };\n\n    this.toggleToRgbButton = () => {\n      if (this.state.toHexButton) this.setState({\n        toHexButton: false\n      });\n      if (this.state.toHslButton) this.setState({\n        toHslButton: false\n      });\n      this.setState({\n        toRgbButton: true,\n        toTopLabel: this.state.rgbLabelArray[0],\n        toMiddleLabel: this.state.rgbLabelArray[1],\n        toBottomLabel: this.state.rgbLabelArray[2],\n        toTopInput: this.state.rgbInputArray[0],\n        toMiddleInput: this.state.rgbInputArray[1],\n        toBottomInput: this.state.rgbInputArray[2]\n      });\n    };\n\n    this.toggleToHslButton = () => {\n      if (this.state.toHexButton) this.setState({\n        toHexButton: false\n      });\n      if (this.state.toRgbButton) this.setState({\n        toRgbButton: false\n      });\n      this.setState({\n        toHslButton: true,\n        toTopLabel: this.state.hslLabelArray[0],\n        toMiddleLabel: this.state.hslLabelArray[1],\n        toBottomLabel: this.state.hslLabelArray[2],\n        toTopInput: this.state.hslInputArray[0],\n        toMiddleInput: this.state.hslInputArray[1],\n        toBottomInput: this.state.hslInputArray[2]\n      });\n    };\n\n    this.toggleToHexButton = () => {\n      if (this.state.toRgbButton) this.setState({\n        toRgbButton: false\n      });\n      if (this.state.toHslButton) this.setState({\n        toHslButton: false\n      });\n      this.setState({\n        toHexButton: true,\n        toTopLabel: this.state.hexLabelArray[0],\n        toMiddleLabel: this.state.hexLabelArray[1],\n        toBottomLabel: this.state.hexLabelArray[2],\n        toTopInput: this.state.hexInputArray[0],\n        toMiddleInput: this.state.hexInputArray[1],\n        toBottomInput: this.state.hexInputArray[2]\n      });\n    };\n\n    this.state = {\n      setCustom: props.setCustom,\n      fromRgbButton: true,\n      fromHslButton: false,\n      fromHexButton: false,\n      toRgbButton: false,\n      toHslButton: true,\n      toHexButton: false,\n      fromTopLabel: rgbLabelArray[0],\n      fromMiddleLabel: rgbLabelArray[1],\n      fromBottomLabel: rgbLabelArray[2],\n      fromTopInput: rgbInputArray[0],\n      fromMiddleInput: rgbInputArray[1],\n      fromBottomInput: rgbInputArray[2],\n      toTopLabel: hslLabelArray[0],\n      toMiddleLabel: hslLabelArray[1],\n      toBottomLabel: hslLabelArray[2],\n      toTopInput: hslInputArray[0],\n      toMiddleInput: hslInputArray[1],\n      toBottomInput: hslInputArray[2],\n      rgbLabelArray: rgbLabelArray,\n      rgbInputArray: rgbInputArray,\n      hslLabelArray: hslLabelArray,\n      hslInputArray: hslInputArray,\n      hexLabelArray: hexLabelArray,\n      hexInputArray: hexInputArray,\n      // playerInput: '',\n      toggleFromRgbButton: this.toggleFromRgbButton,\n      toggleFromHslButton: this.toggleFromHslButton,\n      toggleFromHexButton: this.toggleFromHexButton,\n      toggleToRgbButton: this.toggleToRgbButton,\n      toggleToHslButton: this.toggleToHslButton,\n      toggleToHexButton: this.toggleToHexButton,\n      playerSubmit: this.playerSubmit\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(LeftConvertPanel, {\n        fromRgbButton: this.state.fromRgbButton,\n        fromHslButton: this.state.fromHslButton,\n        fromHexButton: this.state.fromHexButton,\n        toRgbButton: this.state.toRgbButton,\n        toHslButton: this.state.toHslButton,\n        toHexButton: this.state.toHexButton,\n        fromTopLabel: this.state.fromTopLabel,\n        fromMiddleLabel: this.state.fromMiddleLabel,\n        fromBottomLabel: this.state.fromBottomLabel,\n        fromTopInput: this.state.fromTopInput,\n        fromMiddleInput: this.state.fromMiddleInput,\n        fromBottomInput: this.state.fromBottomInput,\n        toggleFromRgbButton: this.state.toggleFromRgbButton,\n        toggleFromHslButton: this.state.toggleFromHslButton,\n        toggleFromHexButton: this.state.toggleFromHexButton,\n        toggleToRgbButton: this.state.toggleToRgbButton,\n        toggleToHslButton: this.state.toggleToHslButton,\n        toggleToHexButton: this.state.toggleToHexButton,\n        playerSubmit: this.state.playerSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RightConvertPanel, {\n        toTopLabel: this.state.toTopLabel,\n        toMiddleLabel: this.state.toMiddleLabel,\n        toBottomLabel: this.state.toBottomLabel,\n        toTopInput: this.state.toTopInput,\n        toMiddleInput: this.state.toMiddleInput,\n        toBottomInput: this.state.toBottomInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default ConvertPanels;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Components/Footer/ClassConvertPanels.js"],"names":["React","HSLtoRGB","RGBtoHEX","HEXtoRGB","RGBtoHSL","LeftConvertPanel","RightConvertPanel","ConvertPanels","Component","constructor","props","rgbLabelArray","rgbInputArray","hslLabelArray","hslInputArray","hexLabelArray","hexInputArray","playerSubmit","playerInput","input","includes","tempInput","checkInput","setState","fromTopInput","fromMiddleInput","fromBottomInput","renderedColor","displayedValue","state","fromRgbButton","toHslButton","join","fromHslButton","toRgbButton","stringHSL","fromHexButton","toHexButton","tempColor","console","log","displayArray","split","toTopInput","toMiddleInput","toBottomInput","setCustom","result","i","Number","push","validNumberInputs","validLetterInputs","length","toggleFromRgbButton","fromTopLabel","fromMiddleLabel","fromBottomLabel","toggleFromHslButton","toggleFromHexButton","toggleToRgbButton","toTopLabel","toMiddleLabel","toBottomLabel","toggleToHslButton","toggleToHexButton","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { HSLtoRGB, RGBtoHEX, HEXtoRGB, RGBtoHSL } from '../../PureFunctions'\nimport LeftConvertPanel from './LeftConvertPanel';\nimport RightConvertPanel from './RightConvertPanel';\n\nimport './ClassConvertPanels.css'\n\nclass ConvertPanels extends React.Component {\n    constructor (props) {\n        const rgbLabelArray = ['Red', 'Green', 'Blue'];\n        const rgbInputArray = ['From 0 to 255', 'From 0 to 255', 'From 0 to 255'];\n        const hslLabelArray = ['Hue', 'Saturation', 'Light'];\n        const hslInputArray = ['From 0 to 360', 'From 0 to 100', 'From 0 to 100'];\n        const hexLabelArray = ['Red', 'Green', 'Blue'];\n        const hexInputArray = ['From 00 to FF', 'From 00 to FF', 'From 00 to FF']\n\n        super(props);\n        this.state = {\n            setCustom: props.setCustom,\n\n            fromRgbButton: true,\n            fromHslButton: false,\n            fromHexButton: false,\n\n            toRgbButton: false,\n            toHslButton: true,\n            toHexButton: false,\n\n            fromTopLabel: rgbLabelArray[0],\n            fromMiddleLabel: rgbLabelArray[1],\n            fromBottomLabel: rgbLabelArray[2],\n\n            fromTopInput: rgbInputArray[0],\n            fromMiddleInput: rgbInputArray[1],\n            fromBottomInput: rgbInputArray[2],\n\n            toTopLabel: hslLabelArray[0],\n            toMiddleLabel: hslLabelArray[1],\n            toBottomLabel: hslLabelArray[2],\n\n            toTopInput: hslInputArray[0],\n            toMiddleInput: hslInputArray[1],\n            toBottomInput: hslInputArray[2],\n\n            rgbLabelArray: rgbLabelArray,\n            rgbInputArray: rgbInputArray,\n            hslLabelArray: hslLabelArray,\n            hslInputArray: hslInputArray,\n            hexLabelArray: hexLabelArray,\n            hexInputArray: hexInputArray,\n\n            // playerInput: '',\n\n            toggleFromRgbButton: this.toggleFromRgbButton,\n            toggleFromHslButton: this.toggleFromHslButton,\n            toggleFromHexButton: this.toggleFromHexButton,\n            toggleToRgbButton: this.toggleToRgbButton,\n            toggleToHslButton: this.toggleToHslButton,\n            toggleToHexButton: this.toggleToHexButton,\n            playerSubmit: this.playerSubmit,\n        }\n    }\n\n    playerSubmit = (playerInput) => {\n        //if they missed a field then exit function\n        for (let input of playerInput) {\n            if (input.includes('From')) return\n        }\n\n        //validate input\n        const tempInput = this.checkInput(playerInput)\n\n        //display any input errors while retaining good ones\n        this.setState({\n            fromTopInput: `${tempInput[0]}`,\n            fromMiddleInput: `${tempInput[1]}`,\n            fromBottomInput: `${tempInput[2]}`,\n        })\n\n        let renderedColor = '';\n        let displayedValue = '';\n\n        //RGB to HSL\n        if ((this.state.fromRgbButton  && this.state.toHslButton)) {\n            renderedColor = tempInput.join(',');\n            displayedValue = RGBtoHSL(renderedColor)\n\n        //HSL to RGB\n        } else if (this.state.fromHslButton && this.state.toRgbButton) {\n            let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`\n            renderedColor = HSLtoRGB(stringHSL)\n            displayedValue = tempInput.join(',')\n\n        //Hex to RGB\n        } else if (this.state.fromHexButton && this.state.toRgbButton) {\n            renderedColor = HEXtoRGB(`#${tempInput.join('')}`);\n            displayedValue = renderedColor;\n\n        //RGB to HEX\n        } else if (this.state.fromRgbButton && this.state.toHexButton) {\n            renderedColor = RGBtoHEX(tempInput.join(','))\n            // displayedValue =\n\n        //HSL to HEX\n        } else if (this.state.fromHslButton && this.state.toHexButton) {\n            let stringHSL = `${tempInput[0]}, ${tempInput[1]}%, ${tempInput[2]}%`\n            let tempColor = HSLtoRGB(stringHSL)\n            renderedColor = RGBtoHEX(tempColor)\n\n        } else if (this.state.fromHexButton && this.state.toHslButton) {\n            let tempColor = HEXtoRGB(`#${tempInput.join('')}`)\n            renderedColor = RGBtoHSL(`(${tempColor.join(', ')})`)\n            console.log('VVVVVVVVV', tempColor, renderedColor)\n        } else if ((this.state.fromRgbButton && this.state.toRgbButton) ||\n                   (this.state.fromHslButton && this.state.toHslButton) ||\n                   (this.state.fromHexButton && this.state.toHexButton)) {\n                        renderedColor = tempInput;\n        }\n\n        let displayArray = displayedValue.split(',')\n        this.setState({\n            toTopInput: `${displayArray[0]}`,\n            toMiddleInput: `${displayArray[1]}`,\n            toBottomInput: `${displayArray[2]}`,\n        })\n        this.state.setCustom(renderedColor);\n    }\n\n    //Player input validation\n    checkInput = (playerInput) => {\n        const result = [];\n\n        //RGB input\n        if (this.state.fromRgbButton) {\n            for (let i = 0; i < 3; i++) {\n                if (!Number(playerInput[i]) && Number(playerInput[i]) !== 0) {\n                    result.push('From 0 to 255!')\n                } else if (playerInput[i] < 0 || playerInput[i] > 255) {\n                    result.push('From 0 to 255!')\n                } else {\n                    result.push(playerInput[i])\n                }\n            }\n        }\n\n        //HSL input\n        if (this.state.fromHslButton) {\n            if (playerInput[0] < 0 || playerInput[0] > 360 || !Number(playerInput[0])) {\n                result.push('From 0 to 360')\n            } else {\n                result.push(playerInput[0])\n            }\n            if (playerInput[1] < 0 || playerInput[1] > 100 || !Number(playerInput[1])) {\n                result.push('From 0 to 100')\n            } else {\n                result.push(playerInput[1])\n            }\n            if (playerInput[2] < 0 || playerInput[2] > 100 || !Number(playerInput[2])) {\n                result.push('From 0 to 100')\n            } else  {\n                result.push(playerInput[2])\n            }\n        }\n\n        //HEX input\n        if (this.state.fromHexButton) {\n            const validNumberInputs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n            const validLetterInputs = ['A', 'B', 'C', 'D', 'E', 'F'];\n            for (let i = 0; i < 3; i++) {\n                if (playerInput[i].length !== 2) {\n                    result.push('From 00 to FF')\n                    continue;\n                }\n                if ((validNumberInputs.includes(Number(playerInput[i][0]))|| validLetterInputs.includes(playerInput[i][0])) &&\n                    (validNumberInputs.includes(Number(playerInput[i][1])) || validLetterInputs.includes(playerInput[i][1]))) {\n                    result.push(playerInput[i])\n                } else {\n                    result.push('From 00 to FF')\n                }\n            }\n        }\n        return result;\n    }\n\n    toggleFromRgbButton = () => {\n        if (this.state.fromRgbButton) return;\n        if (this.state.fromHslButton) this.setState({fromHslButton: false})\n        if (this.state.fromHexButton) this.setState({fromHexButton: false})\n        this.setState ({\n            fromRgbButton: true,\n            fromTopLabel: this.state.rgbLabelArray[0],\n            fromMiddleLabel: this.state.rgbLabelArray[1],\n            fromBottomLabel: this.state.rgbLabelArray[2],\n            fromTopInput: this.state.rgbInputArray[0],\n            fromMiddleInput: this.state.rgbInputArray[1],\n            fromBottomInput: this.state.rgbInputArray[2],\n        }\n    )}\n\n    toggleFromHslButton = () => {\n        if (this.state.fromRgbButton) this.setState({fromRgbButton: false})\n        if (this.state.fromHexButton) this.setState({fromHexButton: false})\n        this.setState ({\n            fromHslButton: true,\n            fromTopLabel: this.state.hslLabelArray[0],\n            fromMiddleLabel: this.state.hslLabelArray[1],\n            fromBottomLabel: this.state.hslLabelArray[2],\n            fromTopInput: this.state.hslInputArray[0],\n            fromMiddleInput: this.state.hslInputArray[1],\n            fromBottomInput: this.state.hslInputArray[2],\n        }\n    )}\n\n    toggleFromHexButton = () => {\n        if (this.state.fromHslButton) this.setState({fromHslButton: false})\n        if (this.state.fromRgbButton) this.setState({fromRgbButton: false})\n        this.setState ({\n            fromHexButton: true,\n            fromTopLabel: this.state.hexLabelArray[0],\n            fromMiddleLabel: this.state.hexLabelArray[1],\n            fromBottomLabel: this.state.hexLabelArray[2],\n            fromTopInput: this.state.hexInputArray[0],\n            fromMiddleInput: this.state.hexInputArray[1],\n            fromBottomInput: this.state.hexInputArray[2],\n        }\n    )}\n\n    toggleToRgbButton = () => {\n        if (this.state.toHexButton) this.setState({toHexButton: false})\n        if (this.state.toHslButton) this.setState({toHslButton: false})\n        this.setState ({\n            toRgbButton: true,\n            toTopLabel: this.state.rgbLabelArray[0],\n            toMiddleLabel: this.state.rgbLabelArray[1],\n            toBottomLabel: this.state.rgbLabelArray[2],\n            toTopInput: this.state.rgbInputArray[0],\n            toMiddleInput: this.state.rgbInputArray[1],\n            toBottomInput: this.state.rgbInputArray[2],\n        }\n    )}\n\n    toggleToHslButton = () => {\n        if (this.state.toHexButton) this.setState({toHexButton: false})\n        if (this.state.toRgbButton) this.setState({toRgbButton: false})\n        this.setState ({\n            toHslButton: true,\n            toTopLabel: this.state.hslLabelArray[0],\n            toMiddleLabel: this.state.hslLabelArray[1],\n            toBottomLabel: this.state.hslLabelArray[2],\n            toTopInput: this.state.hslInputArray[0],\n            toMiddleInput: this.state.hslInputArray[1],\n            toBottomInput: this.state.hslInputArray[2],\n        }\n    )}\n\n    toggleToHexButton = () => {\n        if (this.state.toRgbButton) this.setState({toRgbButton: false})\n        if (this.state.toHslButton) this.setState({toHslButton: false})\n        this.setState ({\n            toHexButton: true,\n            toTopLabel: this.state.hexLabelArray[0],\n            toMiddleLabel: this.state.hexLabelArray[1],\n            toBottomLabel: this.state.hexLabelArray[2],\n            toTopInput: this.state.hexInputArray[0],\n            toMiddleInput: this.state.hexInputArray[1],\n            toBottomInput: this.state.hexInputArray[2],\n        }\n    )}\n\n    render () {\n        return (\n            <>\n                <LeftConvertPanel\n                    fromRgbButton={this.state.fromRgbButton}\n                    fromHslButton={this.state.fromHslButton}\n                    fromHexButton={this.state.fromHexButton}\n                    toRgbButton={this.state.toRgbButton}\n                    toHslButton={this.state.toHslButton}\n                    toHexButton={this.state.toHexButton}\n\n                    fromTopLabel={this.state.fromTopLabel}\n                    fromMiddleLabel={this.state.fromMiddleLabel}\n                    fromBottomLabel={this.state.fromBottomLabel}\n                    fromTopInput={this.state.fromTopInput}\n                    fromMiddleInput={this.state.fromMiddleInput}\n                    fromBottomInput={this.state.fromBottomInput}\n\n                    toggleFromRgbButton={this.state.toggleFromRgbButton}\n                    toggleFromHslButton={this.state.toggleFromHslButton}\n                    toggleFromHexButton={this.state.toggleFromHexButton}\n                    toggleToRgbButton={this.state.toggleToRgbButton}\n                    toggleToHslButton={this.state.toggleToHslButton}\n                    toggleToHexButton={this.state.toggleToHexButton}\n                    playerSubmit={this.state.playerSubmit}\n                />\n                <RightConvertPanel\n                    toTopLabel={this.state.toTopLabel}\n                    toMiddleLabel={this.state.toMiddleLabel}\n                    toBottomLabel={this.state.toBottomLabel}\n                    toTopInput={this.state.toTopInput}\n                    toMiddleInput={this.state.toMiddleInput}\n                    toBottomInput={this.state.toBottomInput}\n                />\n            </>\n        )\n    }\n}\n\nexport default ConvertPanels;\n"]},"metadata":{},"sourceType":"module"}