{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js\";\nimport React from 'react';\nimport { generateEasyArray, generateTriadicArray, generateAnalogousArray, generateGhostArray, generatePastelArray, generateCustomArray } from './PureFunctions';\nimport Backdrop from './Components/Backdrop/Backdrop';\nimport KarenContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n  constructor(props) {\n    const battleArray = generateAnalogousArray();\n    super(props);\n\n    this.toggleMainModal = () => this.setState({\n      MainModal: !this.state.MainModal\n    });\n\n    this.toggleLoginModal = () => this.setState({\n      loginModal: !this.state.loginModal\n    });\n\n    this.toggleBioModal = () => this.setState({\n      bioModal: !this.state.bioModal\n    });\n\n    this.togglePlayerPageModal = () => this.setState({\n      playerPageModal: !this.state.playerPageModal\n    });\n\n    this.toggleGameOn = () => this.setState({\n      gameOn: false\n    });\n\n    this.toggleWindowDisplay = () => this.setState({\n      windowDisplayed: !this.state.windowDisplayed\n    });\n\n    this.clearRounds = () => this.setState({\n      round: 0\n    });\n\n    this.toggleCreateAnalogous = () => {\n      if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createAnalogous: true\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createAnalogous: false\n        });\n      }, delayOrNot);\n    };\n\n    this.toggleCreatePastel = () => {\n      if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createPastel: true\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createPastel: false\n        });\n      }, delayOrNot);\n    };\n\n    this.toggleCreateTriadic = () => {\n      if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createTriadic: true\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createTriadic: false\n        });\n      }, delayOrNot);\n    };\n\n    this.setCustomColor = custom => {\n      // if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n      this.setState({\n        createCustom: true,\n        customColor: custom\n      });\n      let delayOrNot = 0;\n      this.state.colorArray[0].class === 'blurred' ? delayOrNot = 0 : delayOrNot = 1500;\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n        this.setState({\n          createCustom: false\n        });\n      }, delayOrNot);\n    };\n\n    this.toggleStartBattle = () => {\n      if (this.state.startConvert) this.toggleStartConvert();\n      this.setState({\n        startBattle: !this.state.startBattle\n      });\n    };\n\n    this.toggleStartConvert = () => {\n      if (this.state.startBattle) this.toggleStartBattle();\n      this.setState({\n        startConvert: !this.state.startConvert\n      });\n    };\n\n    this.startGame = () => {\n      this.clearBoard();\n      this.timeout = setTimeout(() => {\n        this.setState({\n          gameOn: true\n        });\n        this.updateColorArrayContext();\n      }, 1100);\n    };\n\n    this.removeCoin = () => {\n      let tempArray = [];\n\n      if (this.state.coinArray[0]) {\n        tempArray = [false, true, true];\n      } else if (this.state.coinArray[1]) {\n        tempArray = [false, false, true];\n      } else {\n        tempArray = [false, false, false];\n      }\n\n      this.setState({\n        coinArray: tempArray\n      });\n    };\n\n    this.correctGuess = () => {\n      let coinCount = this.state.coins;\n\n      if (this.state.startBattle) {\n        for (let coin of this.state.coinArray) {\n          if (coin) coinCount++;\n        }\n\n        this.setState({\n          gameOn: false,\n          coins: coinCount\n        });\n      }\n\n      this.clearBoard();\n      setTimeout(() => {\n        this.updateColorArrayContext();\n      }, 1500);\n    };\n\n    this.clearBoard = () => {\n      let clearArray = [];\n\n      for (let i = 0; i < 6; i++) {\n        clearArray.push({\n          background: `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n        });\n      }\n\n      this.setState({\n        colorArray: clearArray\n      });\n    };\n\n    this.updateTimerContext = seconds => {\n      this.setState({\n        timer: seconds,\n        score: this.state.score + seconds\n      });\n    };\n\n    this.updateColorArrayContext = () => {\n      let randomSix = Math.floor(Math.random() * 6);\n      let targetArray = ['colorOne', 'colorTwo', 'colorThree', 'colorFour', 'colorFive', 'colorSix'];\n      let targetId = targetArray[randomSix];\n      let arr = [];\n      if (this.state.startConvert && !this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateGhostArray();\n      if (this.state.startConvert && this.state.createTriadic && !this.state.createAnalogous && !this.state.createPastel) arr = generateTriadicArray();\n      if (this.state.startConvert && this.state.createAnalogous && !this.state.createTriadic && !this.state.createPastel) arr = generateAnalogousArray();\n      if (this.state.startConvert && this.state.createPastel && !this.state.createTriadic && !this.state.createAnalogous) arr = generatePastelArray();\n      if (this.state.startConvert && this.state.createCustom) arr = generateCustomArray(this.state.customColor);\n\n      if (this.state.startBattle) {\n        this.state.round <= 2 ? arr = generateEasyArray() : arr = generateTriadicArray();\n      } //display target value\n\n\n      const targetColor = arr[randomSix];\n      const firstSlice = targetColor.background.slice(42);\n      let colorTarget = firstSlice.slice(0, firstSlice.length - 7);\n      this.setState({\n        coinArray: [true, true, true],\n        colorArray: arr,\n        round: this.state.round + 1,\n        colorTargetId: targetId,\n        gameOn: true,\n        colorTarget: colorTarget\n      });\n    };\n\n    this.state = {\n      colorArray: battleArray,\n      colorTargetId: '',\n      colorTarget: null,\n      round: 0,\n      score: 0,\n      timer: 15,\n      coins: 0,\n      coinArray: [true, true, true],\n      gameOn: false,\n      windowDisplayed: false,\n      customColor: '255, 255, 255',\n      MainModal: false,\n      loginModal: false,\n      bioModal: false,\n      playerPageModal: false,\n      startBattle: false,\n      startConvert: false,\n      createTriadic: false,\n      createAnalogous: false,\n      createPastel: false,\n      createCustom: false,\n      toggleMainModal: this.toggleMainModal,\n      toggleLoginModal: this.toggleLoginModal,\n      toggleBioModal: this.toggleBioModal,\n      togglePlayerPageModal: this.togglePlayerPageModal,\n      toggleWindowDisplay: this.toggleWindowDisplay,\n      toggleGameOn: this.toggleGameOn,\n      toggleStartBattle: this.toggleStartBattle,\n      toggleStartConvert: this.toggleStartConvert,\n      toggleCreateTriadic: this.toggleCreateTriadic,\n      toggleCreateAnalogous: this.toggleCreateAnalogous,\n      toggleCreatePastel: this.toggleCreatePastel,\n      setCustomColor: this.setCustomColor,\n      startGame: this.startGame,\n      correctGuess: this.correctGuess,\n      updateTimer: this.updateTimerContext,\n      removeCoin: this.removeCoin,\n      clearRounds: this.clearRounds\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBoardDiv\",\n      value: this.state,\n      children: /*#__PURE__*/_jsxDEV(KarenContext.Provider, {\n        value: this.state,\n        children: /*#__PURE__*/_jsxDEV(ModalProvider, {\n          children: [/*#__PURE__*/_jsxDEV(Backdrop, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this), this.state.MainModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MainModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 29\n          }, this), this.state.loginModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(LoginModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this), this.state.bioModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(MyBioModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 29\n          }, this), this.state.playerPageModal && /*#__PURE__*/_jsxDEV(Modal, {\n            children: /*#__PURE__*/_jsxDEV(PlayerPageModal, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Controller;","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/frontend/src/Controller.js"],"names":["React","generateEasyArray","generateTriadicArray","generateAnalogousArray","generateGhostArray","generatePastelArray","generateCustomArray","Backdrop","KarenContext","MainModal","LoginModal","PlayerPageModal","MyBioModal","Modal","ModalProvider","Controller","Component","constructor","props","battleArray","toggleMainModal","setState","state","toggleLoginModal","loginModal","toggleBioModal","bioModal","togglePlayerPageModal","playerPageModal","toggleGameOn","gameOn","toggleWindowDisplay","windowDisplayed","clearRounds","round","toggleCreateAnalogous","createAnalogous","createPastel","createTriadic","delayOrNot","colorArray","class","clearBoard","setTimeout","updateColorArrayContext","toggleCreatePastel","toggleCreateTriadic","setCustomColor","custom","createCustom","customColor","toggleStartBattle","startConvert","toggleStartConvert","startBattle","startGame","timeout","removeCoin","tempArray","coinArray","correctGuess","coinCount","coins","coin","clearArray","i","push","background","updateTimerContext","seconds","timer","score","randomSix","Math","floor","random","targetArray","targetId","arr","targetColor","firstSlice","slice","colorTarget","length","colorTargetId","updateTimer","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n    generateEasyArray,\n    generateTriadicArray,\n    generateAnalogousArray,\n    generateGhostArray,\n    generatePastelArray,\n    generateCustomArray,\n} from './PureFunctions';\n\nimport Backdrop from './Components/Backdrop/Backdrop'\nimport KarenContext from './ColorContext';\nimport MainModal from './Components/Modals/MainModal';\nimport LoginModal from './Components/Modals/LoginFormModal';\nimport PlayerPageModal from './Components/Modals/PlayerPageModal';\nimport MyBioModal from './Components/Modals/MyBioModal';\nimport { Modal } from './ModalContext/Modal';\nimport { ModalProvider } from './ModalContext/Modal';\n\nclass Controller extends React.Component {\n    constructor (props) {\n        const battleArray = generateAnalogousArray();\n\n        super (props);\n        this.state = {\n            colorArray: battleArray,\n            colorTargetId: '',\n            colorTarget: null,\n            round: 0,\n            score: 0,\n            timer: 15,\n            coins: 0,\n            coinArray: [true, true, true],\n            gameOn: false,\n            windowDisplayed: false,\n            customColor: '255, 255, 255',\n\n            MainModal: false,\n            loginModal: false,\n            bioModal: false,\n            playerPageModal: false,\n\n            startBattle: false,\n            startConvert: false,\n\n            createTriadic: false,\n            createAnalogous: false,\n            createPastel: false,\n            createCustom: false,\n\n            toggleMainModal: this.toggleMainModal,\n            toggleLoginModal: this.toggleLoginModal,\n            toggleBioModal: this.toggleBioModal,\n            togglePlayerPageModal: this.togglePlayerPageModal,\n            toggleWindowDisplay: this.toggleWindowDisplay,\n\n            toggleGameOn: this.toggleGameOn,\n            toggleStartBattle: this.toggleStartBattle,\n            toggleStartConvert: this.toggleStartConvert,\n\n            toggleCreateTriadic: this.toggleCreateTriadic,\n            toggleCreateAnalogous: this.toggleCreateAnalogous,\n            toggleCreatePastel: this.toggleCreatePastel,\n            setCustomColor: this.setCustomColor,\n\n            startGame: this.startGame,\n            correctGuess: this.correctGuess,\n            updateTimer: this.updateTimerContext,\n            removeCoin: this.removeCoin,\n            clearRounds: this.clearRounds,\n        }\n    }\n\n    toggleMainModal = () => this.setState({ MainModal: !this.state.MainModal })\n    toggleLoginModal = () => this.setState({ loginModal: !this.state.loginModal })\n    toggleBioModal = () => this.setState({ bioModal: !this.state.bioModal })\n    togglePlayerPageModal = () => this.setState({ playerPageModal: !this.state.playerPageModal })\n    toggleGameOn = () => this.setState({ gameOn: false })\n    toggleWindowDisplay = () => this.setState({ windowDisplayed: !this.state.windowDisplayed})\n    clearRounds = () => this.setState({ round: 0})\n\n    toggleCreateAnalogous = () => {\n        if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({ createAnalogous: true});\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createAnalogous: false})\n        }, delayOrNot)\n    }\n\n    toggleCreatePastel = () => {\n        if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({ createPastel: true});\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createPastel: false})\n        }, delayOrNot)\n    }\n\n    toggleCreateTriadic = () => {\n        if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({ createTriadic: true});\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createTriadic: false});\n        }, delayOrNot)\n    }\n\n    setCustomColor = (custom) => {\n        // if (this.state.createAnalogous || this.state.createPastel || this.state.createTriadic) return;\n        this.setState({\n            createCustom: true,\n            customColor: custom,\n        });\n        let delayOrNot = 0;\n        (this.state.colorArray[0].class === 'blurred')\n            ? delayOrNot = 0\n            : delayOrNot = 1500\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n            this.setState({ createCustom: false});\n        }, delayOrNot)\n    }\n\n    toggleStartBattle = () => {\n        if (this.state.startConvert) this.toggleStartConvert();\n        this.setState({ startBattle: !this.state.startBattle });\n    }\n\n    toggleStartConvert = () => {\n        if (this.state.startBattle) this.toggleStartBattle();\n        this.setState({ startConvert: !this.state.startConvert});\n    }\n\n    startGame = () => {\n        this.clearBoard();\n        this.timeout = setTimeout(() => {\n            this.setState({ gameOn: true })\n            this.updateColorArrayContext()\n        }, 1100)\n    }\n\n    removeCoin = () => {\n        let tempArray = [];\n        if (this.state.coinArray[0]) {\n            tempArray = [false, true, true]\n        } else if (this.state.coinArray[1]) {\n            tempArray = [false, false, true]\n        } else {\n            tempArray = [false, false, false]\n        }\n        this.setState ({ coinArray: tempArray })\n    }\n\n    correctGuess = () => {\n        let coinCount = this.state.coins;\n\n        if (this.state.startBattle) {\n            for (let coin of this.state.coinArray) {\n                if (coin) coinCount++\n            }\n\n            this.setState({\n                gameOn: false,\n                coins: coinCount,\n             });\n        }\n\n        this.clearBoard();\n        setTimeout(() => {\n            this.updateColorArrayContext();\n        }, 1500)\n    }\n\n    clearBoard = () => {\n        let clearArray = []\n        for (let i = 0; i < 6; i++) {\n            clearArray.push({ background:\n                `radial-gradient(circle at 100px 100px, rgba(255, 255, 255, 0.1), #000)`\n            })\n        }\n        this.setState({\n            colorArray: clearArray,\n        })\n    }\n\n    updateTimerContext = (seconds) => {\n        this.setState({\n            timer: seconds,\n            score: this.state.score + seconds,\n        })\n    }\n\n    updateColorArrayContext = () => {\n        let randomSix = Math.floor(Math.random() * 6)\n        let targetArray = [\n            'colorOne',\n            'colorTwo',\n            'colorThree',\n            'colorFour',\n            'colorFive',\n            'colorSix'\n        ]\n        let targetId = targetArray[randomSix];\n        let arr = [];\n\n        if (this.state.startConvert &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateGhostArray();\n\n        if (this.state.startConvert &&\n            this.state.createTriadic &&\n            !this.state.createAnalogous &&\n            !this.state.createPastel)\n                arr = generateTriadicArray();\n\n        if (this.state.startConvert &&\n            this.state.createAnalogous &&\n            !this.state.createTriadic &&\n            !this.state.createPastel)\n                arr = generateAnalogousArray();\n\n        if (this.state.startConvert &&\n            this.state.createPastel &&\n            !this.state.createTriadic &&\n            !this.state.createAnalogous)\n                arr = generatePastelArray();\n\n        if (this.state.startConvert &&\n            this.state.createCustom)\n                arr = generateCustomArray(this.state.customColor);\n\n        if (this.state.startBattle) {\n            this.state.round <= 2\n                ? arr = generateEasyArray()\n                : arr = generateTriadicArray()\n            }\n\n        //display target value\n        const targetColor = arr[randomSix]\n        const firstSlice = (targetColor.background.slice(42))\n        let colorTarget = (firstSlice.slice(0, firstSlice.length -7))\n\n        this.setState({\n            coinArray: [true, true, true],\n            colorArray: arr,\n            round: this.state.round + 1,\n            colorTargetId: targetId,\n            gameOn: true,\n            colorTarget: colorTarget,\n        });\n    }\n\n    render() {\n        return (\n            <div className='gameBoardDiv' value={this.state}>\n                <KarenContext.Provider value={this.state}>\n                    <ModalProvider>\n                        <Backdrop />\n\n                        {/* Modal Control */}\n                        {this.state.MainModal &&\n                            <Modal >\n                                <MainModal />\n                            </Modal>\n                        }\n                        {this.state.loginModal &&\n                            <Modal>\n                                <LoginModal />\n                            </Modal>\n                        }\n                        {this.state.bioModal &&\n                            <Modal>\n                                <MyBioModal />\n                            </Modal>\n                        }\n                        {this.state.playerPageModal &&\n                            <Modal>\n                                <PlayerPageModal />\n                            </Modal>\n                        }\n                    </ModalProvider>\n                </KarenContext.Provider>\n            </div>\n        )\n    }\n}\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}