{"ast":null,"code":"//Add 3D effect\nfunction addStyleString(arr) {\n  var newArray = []; //iterate through the given array of colors and add the 3-D effect\n\n  for (var i = 0; i < arr.length; i++) {\n    newArray.push({\n      background: \"radial-gradient(circle at 100px 100px, rgb(\".concat(arr[i], \"), #000)\")\n    });\n  }\n\n  return newArray;\n} //Color value array factories:\n\n\nexport function generateEasyArray() {\n  //Array of all possible 'easy ' colors (all values either 0 or 255)\n  var arr = [\"0, 0, 0\", \"0, 0, 255\", \"255, 0, 255\", \"255, 255, 255\", \"0, 255, 255\", \"255, 0, 0\", \"0, 255, 0\", \"255, 255, 0\"];\n  var returnArr = []; //fill returnArr array with random easy colors\n\n  while (returnArr.length !== 6) {\n    var randomNum = Math.floor(Math.random() * 8);\n    var _randomColor = arr[randomNum];\n\n    if (!returnArr.includes(_randomColor)) {\n      returnArr.push(_randomColor);\n    }\n  } //Add 3D effect\n\n\n  var newArray = addStyleString(returnArr);\n  return newArray;\n}\nexport function generateGhostArray() {\n  var arr = [];\n\n  for (var i = 0; i < 6; i++) {\n    // let temp = randomColor();\n    // let sliced = temp.slice(0)\n    arr.push('255, 255, 255, 0.1');\n  }\n\n  var newArray = addStyleString(arr); // const blurredArray = addBlurClass(newArray)\n\n  return newArray; // return arr;\n}\n\nfunction randomColor() {\n  //pick a \"red\" from 0 to 255\n  var r = Math.floor(Math.random() * 256); //pick a \"green\" from 0 to 255\n\n  var g = Math.floor(Math.random() * 256); //pick a \"blue\" from 0 to 255\n\n  var b = Math.floor(Math.random() * 256); // return RGBtoHSL(`(${r}, ${g}, ${b})`);\n  //make sure not too white or black\n\n  var difference = Math.abs(Math.abs(r - g) + Math.abs(r - b) + Math.abs(g - b));\n\n  if (difference < 80) {\n    return randomColor();\n  }\n\n  return \"\".concat(r, \", \").concat(g, \", \").concat(b);\n} //find high numbers\n\n\nfunction randomPastelColor() {\n  //pick a \"red\" from 76 to 180\n  var r = Math.floor(Math.random() * 76) + 180; //pick a \"green\" from 76 to 180\n\n  var g = Math.floor(Math.random() * 76) + 180; //pick a \"blue\" from 76 to 180\n\n  var b = Math.floor(Math.random() * 76) + 180; //make sure its not too white\n\n  if (r + g + b > 700 || r + g + b < 600 || Math.abs(r - g) + Math.abs(g - b) < 40) {\n    return randomPastelColor();\n  }\n\n  return \"\".concat(r, \", \").concat(g, \", \").concat(b);\n}\n\nexport function generateTriadicArray() {\n  var arr = []; //Pick Random RGB color\n\n  var ranColor = randomColor();\n  arr.push(ranColor); //Find compliment\n\n  var compliment = findComplement(ranColor); //find triadic compliments\n\n  var triOne = findTriadics(ranColor).RGBtriOneColor;\n  var triTwo = findTriadics(ranColor).RGBtriTwoColor; //Find triadic compliments of compliment\n\n  var triCompOne = findTriadics(compliment).RGBtriOneColor;\n  var triCompTwo = findTriadics(compliment).RGBtriTwoColor;\n  arr.push(triCompOne, triTwo, compliment, triOne, triCompTwo);\n  return addStyleString(arr);\n}\nexport function generateAnalogousArray() {\n  var arr = []; //Pick Random RGB color\n\n  var ranColor = randomColor();\n  arr.push(ranColor); //Find compliment\n\n  var compliment = findComplement(ranColor); //find analogous compliments\n\n  var triOne = findAnalogous(ranColor).RGBanalogousOne;\n  var triTwo = findAnalogous(ranColor).RGBanalogousTwo; //Find analogous compliments of compliment\n\n  var analogousOne = findAnalogous(compliment).RGBanalogousOne;\n  var analogousTwo = findAnalogous(compliment).RGBanalogousTwo;\n  arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo);\n  return addStyleString(arr);\n}\nexport function generatePastelArray() {\n  var arr = []; //Pick Random RGB color\n\n  var ranColor = randomPastelColor();\n  arr.push(ranColor); //Find compliment\n\n  var compliment = findComplement(ranColor); //find split compliments\n\n  var splitCompOne = findAnalogous(ranColor).RGBanalogousOne;\n  var splitCompTwo = findAnalogous(ranColor).RGBanalogousTwo; //Find analogous compliments\n\n  var analogousOne = findAnalogous(compliment).RGBanalogousOne;\n  var analogousTwo = findAnalogous(compliment).RGBanalogousTwo;\n  arr.push(analogousOne, splitCompOne, compliment, splitCompTwo, analogousTwo);\n  return addStyleString(arr);\n}\nexport function generateCustomArray(playerColor) {\n  var arr = []; //Pick Random RGB color\n\n  arr.push(playerColor); //Find compliment\n\n  var compliment = findComplement(playerColor); //find analogous compliments\n\n  var triOne = findAnalogous(playerColor).RGBanalogousOne;\n  var triTwo = findAnalogous(playerColor).RGBanalogousTwo; //Find analogous compliments of compliment\n\n  var analogousOne = findAnalogous(compliment).RGBanalogousOne;\n  var analogousTwo = findAnalogous(compliment).RGBanalogousTwo;\n  arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo);\n  return addStyleString(arr);\n} //Find compliment colors:\n\nfunction findComplement(color) {\n  var convertedColor = RGBtoHSL(color);\n  var splitColor = convertedColor.split(',');\n  var hue = Number(splitColor[0]);\n  var satch = splitColor[1];\n  var light = splitColor[2];\n  var complimentHue = 0;\n\n  if (hue >= 180) {\n    complimentHue = hue - 180;\n  } else {\n    complimentHue = hue + 180;\n  }\n\n  var compHSL = \"\".concat(complimentHue, \",\").concat(satch, \",\").concat(light);\n  return HSLtoRGB(compHSL);\n}\n\nfunction findTriadics(rgbValue) {\n  var convertedColor = RGBtoHSL(rgbValue);\n  var splitColor = convertedColor.split(',');\n  var hue = Number(splitColor[0]);\n  var satch = splitColor[1];\n  var light = splitColor[2];\n  var triOne = 0;\n  var triTwo = 0;\n\n  if (hue < 120) {\n    triOne = hue + 120;\n    triTwo = hue + 240;\n  } else if (hue >= 120 && hue < 240) {\n    triOne = hue + 120;\n    triTwo = hue - 120;\n  } else {\n    triOne = hue - 240;\n    triTwo = hue - 120;\n  }\n\n  var triOneColor = \"\".concat(triOne, \",\").concat(satch, \",\").concat(light);\n  var triTwoColor = \"\".concat(triTwo, \",\").concat(satch, \",\").concat(light);\n  var RGBtriOneColor = HSLtoRGB(triOneColor);\n  var RGBtriTwoColor = HSLtoRGB(triTwoColor);\n  return {\n    RGBtriOneColor: RGBtriOneColor,\n    RGBtriTwoColor: RGBtriTwoColor\n  };\n}\n\nfunction findAnalogous(rgbValue) {\n  var convertedColor = RGBtoHSL(rgbValue);\n  var splitColor = convertedColor.split(',');\n  var hue = Number(splitColor[0]);\n  var satch = splitColor[1];\n  var light = splitColor[2];\n  var triOne = 0;\n  var triTwo = 0;\n\n  if (hue < 150) {\n    triOne = hue + 150;\n    triTwo = hue + 210;\n  } else if (hue >= 150 && hue < 210) {\n    triOne = hue + 150;\n    triTwo = hue - 150;\n  } else {\n    triOne = hue - 210;\n    triTwo = hue - 150;\n  }\n\n  var analogousOneColor = \"\".concat(triOne, \",\").concat(satch, \",\").concat(light);\n  var analogousTwoColor = \"\".concat(triTwo, \",\").concat(satch, \",\").concat(light);\n  var RGBanalogousOne = HSLtoRGB(analogousOneColor);\n  var RGBanalogousTwo = HSLtoRGB(analogousTwoColor);\n  return {\n    RGBanalogousOne: RGBanalogousOne,\n    RGBanalogousTwo: RGBanalogousTwo\n  };\n} //Color value conversions:\n\n\nexport function RGBtoHSL(rgbValue) {\n  //slice -n- dice\n  // let sliced = rgbValue.slice(1, rgbValue.length -1);\n  var split = rgbValue.split(',');\n  var red = Number(split[0]);\n  var green = Number(split[1]);\n  var blue = Number(split[2]); //Make red, green, blue fractions of 1\n\n  red /= 255;\n  green /= 255;\n  blue /= 255; //Find greatest and smallest channel values\n\n  var cmin = Math.min(red, green, blue);\n  var cmax = Math.max(red, green, blue);\n  var delta = cmax - cmin; //calculate hue\n  //no difference\n\n  var h = 0;\n  var s = 0;\n  var l = 0;\n\n  if (delta === 0) {\n    h = 0;\n  } //Red is max\n  else if (cmax === red) {\n      h = (green - blue) / delta % 6;\n    } //Green is max\n    else if (cmax === green) {\n        h = (blue - red) / delta + 2;\n      } //Blue is max\n      else {\n          h = (red - green) / delta + 4;\n        }\n\n  h = Math.round(h * 60); //Make negative hues positive behind 360 degrees\n\n  if (h < 0) {\n    h += 360;\n  } //Calculate lightness\n\n\n  l = (cmax + cmin) / 2; //Calculate saturation\n\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1)); // Multiply by 100\n\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);\n  return \"\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%\");\n}\n_c = RGBtoHSL;\nexport function HSLtoRGB(hslValue) {\n  //expected input format: '222, 22%, 22%'\n  var split = hslValue.split(','); //slice off '%' and convert to numbers\n\n  var h = Number(split[0]);\n  var s = Number(split[1].substr(0, split[1].length - 1));\n  var l = Number(split[2].substr(0, split[2].length - 1));\n  s /= 100;\n  l /= 100;\n  var c = (1 - Math.abs(2 * l - 1)) * s;\n  var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n  var m = l - c / 2;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n\n  if (0 <= h && h < 60) {\n    r = c;\n    g = x;\n    b = 0;\n  } else if (60 <= h && h < 120) {\n    r = x;\n    g = c;\n    b = 0;\n  } else if (120 <= h && h < 180) {\n    r = 0;\n    g = c;\n    b = x;\n  } else if (180 <= h && h < 240) {\n    r = 0;\n    g = x;\n    b = c;\n  } else if (240 <= h && h < 300) {\n    r = x;\n    g = 0;\n    b = c;\n  } else if (300 <= h && h < 360) {\n    r = c;\n    g = 0;\n    b = x;\n  }\n\n  r = Math.round((r + m) * 255);\n  g = Math.round((g + m) * 255);\n  b = Math.round((b + m) * 255); //output format: '11, 22, 33's\n\n  return \"\".concat(r, \", \").concat(g, \", \").concat(b);\n}\n_c2 = HSLtoRGB;\nexport function HEXtoRGB(hex) {\n  var r = 0;\n  var g = 0;\n  var b = 0;\n\n  if (hex.length === 4) {\n    r = parseInt(hex[1] + hex[1], 16);\n    g = parseInt(hex[2] + hex[2], 16);\n    b = parseInt(hex[3] + hex[3], 16);\n  } else if (hex.length === 7) {\n    r = parseInt(hex[1] + hex[2], 16);\n    g = parseInt(hex[3] + hex[4], 16);\n    b = parseInt(hex[5] + hex[6], 16);\n  }\n\n  return \"\".concat(r, \", \").concat(g, \", \").concat(b);\n}\n_c3 = HEXtoRGB;\nexport function RGBtoHEX(rgb) {\n  var tempArray = rgb.split(',');\n  var r = Number(tempArray[0]);\n  var g = Number(tempArray[1]);\n  var b = Number(tempArray[2]);\n  r = r.toString(16);\n  g = g.toString(16);\n  b = b.toString(16);\n\n  if (r.length === 1) {\n    r = 0 + r;\n  }\n\n  if (g.length === 1) {\n    g = 0 + g;\n  }\n\n  if (b.length === 1) {\n    b = 0 + b;\n  }\n\n  return \"\".concat(r, \", \").concat(g, \", \").concat(b);\n} //Console greeting\n\n_c4 = RGBtoHEX;\nvar style = \"font-size: 14px;\" + \"background: #67b26f;\" + \"background: -webkit-linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" + \"background: linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" + \"color: white;\" + \"text-align: center;\" + \"padding: 10px 15px;\" + \"width: 100%;\" + \"border-radius: 20px;\";\nvar text = \"%cLet's talk!🙂 sirscavo@gmail.com\";\nconsole.log(text, style);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"RGBtoHSL\");\n$RefreshReg$(_c2, \"HSLtoRGB\");\n$RefreshReg$(_c3, \"HEXtoRGB\");\n$RefreshReg$(_c4, \"RGBtoHEX\");","map":{"version":3,"sources":["/Users/robinscavo/Desktop/projects/KolorKrush/Kolor_Krusher-Express/src/pureFunctions.js"],"names":["addStyleString","arr","newArray","i","length","push","background","generateEasyArray","returnArr","randomNum","Math","floor","random","randomColor","includes","generateGhostArray","r","g","b","difference","abs","randomPastelColor","generateTriadicArray","ranColor","compliment","findComplement","triOne","findTriadics","RGBtriOneColor","triTwo","RGBtriTwoColor","triCompOne","triCompTwo","generateAnalogousArray","findAnalogous","RGBanalogousOne","RGBanalogousTwo","analogousOne","analogousTwo","generatePastelArray","splitCompOne","splitCompTwo","generateCustomArray","playerColor","color","convertedColor","RGBtoHSL","splitColor","split","hue","Number","satch","light","complimentHue","compHSL","HSLtoRGB","rgbValue","triOneColor","triTwoColor","analogousOneColor","analogousTwoColor","red","green","blue","cmin","min","cmax","max","delta","h","s","l","round","toFixed","hslValue","substr","c","x","m","HEXtoRGB","hex","parseInt","RGBtoHEX","rgb","tempArray","toString","style","text","console","log"],"mappings":"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","sourcesContent":["//Add 3D effect\nfunction addStyleString (arr) {\n    const newArray = []\n\n    //iterate through the given array of colors and add the 3-D effect\n    for (let i = 0; i < arr.length; i++) {\n        newArray.push({ background: `radial-gradient(circle at 100px 100px, rgb(${arr[i]}), #000)` })\n    }\n    return newArray\n}\n\n//Color value array factories:\nexport function generateEasyArray() {\n    //Array of all possible 'easy ' colors (all values either 0 or 255)\n    let arr = [\n        \"0, 0, 0\",\n        \"0, 0, 255\",\n        \"255, 0, 255\",\n        \"255, 255, 255\",\n        \"0, 255, 255\",\n        \"255, 0, 0\",\n        \"0, 255, 0\",\n        \"255, 255, 0\"\n    ];\n\n    let returnArr = []\n    //fill returnArr array with random easy colors\n    while (returnArr.length !== 6) {\n        let randomNum = Math.floor(Math.random() *8);\n        let randomColor = arr[randomNum]\n        if(!returnArr.includes(randomColor)){\n            returnArr.push(randomColor)\n        }\n    }\n    //Add 3D effect\n    const newArray = addStyleString(returnArr)\n    return newArray\n}\n\nexport function generateGhostArray() {\n    const arr = [];\n\n    for (let i = 0; i < 6; i++) {\n        // let temp = randomColor();\n        // let sliced = temp.slice(0)\n        arr.push('255, 255, 255, 0.1');\n    }\n\n    const newArray = addStyleString(arr);\n    // const blurredArray = addBlurClass(newArray)\n    return newArray;\n    // return arr;\n}\n\nfunction randomColor() {\n    //pick a \"red\" from 0 to 255\n    const r = Math.floor(Math.random() * 256);\n    //pick a \"green\" from 0 to 255\n    const g = Math.floor(Math.random() * 256);\n    //pick a \"blue\" from 0 to 255\n    const b = Math.floor(Math.random() * 256);\n    // return RGBtoHSL(`(${r}, ${g}, ${b})`);\n\n    //make sure not too white or black\n    let difference = Math.abs(Math.abs(r - g) + Math.abs(r - b) + Math.abs(g - b))\n    if (difference < 80) {\n        return randomColor()\n    }\n\n    return `${r}, ${g}, ${b}`;\n}\n\n//find high numbers\nfunction randomPastelColor() {\n    //pick a \"red\" from 76 to 180\n    const r = Math.floor(Math.random() * 76) + 180;\n    //pick a \"green\" from 76 to 180\n    const g = Math.floor(Math.random() * 76) + 180;\n    //pick a \"blue\" from 76 to 180\n    const b = Math.floor(Math.random() * 76) + 180;\n\n    //make sure its not too white\n    if ((r+g+b) > 700 || (r+g+b) < 600  || ((Math.abs(r - g)) + (Math.abs(g - b))) < 40) {\n        return randomPastelColor()\n    }\n\n    return `${r}, ${g}, ${b}`;\n}\n\nexport function generateTriadicArray() {\n    const arr = []\n\n    //Pick Random RGB color\n    const ranColor = randomColor()\n    arr.push(ranColor);\n\n    //Find compliment\n    const compliment = findComplement(ranColor)\n\n    //find triadic compliments\n    const triOne = findTriadics(ranColor).RGBtriOneColor;\n    const triTwo = findTriadics(ranColor).RGBtriTwoColor;\n\n    //Find triadic compliments of compliment\n    const triCompOne  = findTriadics(compliment).RGBtriOneColor;\n    const triCompTwo  = findTriadics(compliment).RGBtriTwoColor;\n\n    arr.push(triCompOne, triTwo, compliment, triOne, triCompTwo)\n\n    return addStyleString(arr)\n}\n\nexport function generateAnalogousArray() {\n    const arr = []\n    //Pick Random RGB color\n    const ranColor = randomColor()\n    arr.push(ranColor);\n    //Find compliment\n    const compliment = findComplement(ranColor)\n    //find analogous compliments\n    const triOne = findAnalogous(ranColor).RGBanalogousOne;\n    const triTwo = findAnalogous(ranColor).RGBanalogousTwo;\n    //Find analogous compliments of compliment\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo)\n\n    return addStyleString(arr)\n}\n\nexport function generatePastelArray() {\n    const arr = []\n    //Pick Random RGB color\n    const ranColor = randomPastelColor()\n\n    arr.push(ranColor);\n    //Find compliment\n    const compliment = findComplement(ranColor)\n    //find split compliments\n    const splitCompOne = findAnalogous(ranColor).RGBanalogousOne;\n    const splitCompTwo = findAnalogous(ranColor).RGBanalogousTwo;\n    //Find analogous compliments\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, splitCompOne, compliment, splitCompTwo, analogousTwo)\n    return addStyleString(arr)\n}\n\nexport function generateCustomArray(playerColor) {\n    const arr = []\n    //Pick Random RGB color\n    arr.push(playerColor);\n    //Find compliment\n    const compliment = findComplement(playerColor)\n    //find analogous compliments\n    const triOne = findAnalogous(playerColor).RGBanalogousOne;\n    const triTwo = findAnalogous(playerColor).RGBanalogousTwo;\n    //Find analogous compliments of compliment\n    const analogousOne  = findAnalogous(compliment).RGBanalogousOne;\n    const analogousTwo  = findAnalogous(compliment).RGBanalogousTwo;\n    arr.push(analogousOne, triOne, compliment, triTwo, analogousTwo)\n\n    return addStyleString(arr)\n}\n\n//Find compliment colors:\n\nfunction findComplement (color) {\n    let convertedColor = (RGBtoHSL(color))\n\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n    let complimentHue = 0;\n\n    if (hue >= 180) {\n        complimentHue = hue - 180;\n    } else {\n        complimentHue = hue + 180;\n    }\n\n    let compHSL = (`${complimentHue},${satch},${light}`)\n\n    return HSLtoRGB(compHSL);\n}\n\nfunction findTriadics (rgbValue) {\n    let convertedColor = RGBtoHSL(rgbValue)\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n\n    let triOne = 0;\n    let triTwo = 0;\n\n    if (hue < 120) {\n        triOne = hue + 120;\n        triTwo = hue + 240;\n    } else if (hue >= 120 && hue < 240) {\n        triOne = hue + 120;\n        triTwo = hue - 120;\n    } else {\n        triOne = hue - 240;\n        triTwo = hue - 120;\n    }\n    let triOneColor = (`${triOne},${satch},${light}`)\n    let triTwoColor = (`${triTwo},${satch},${light}`)\n\n    let RGBtriOneColor = HSLtoRGB(triOneColor);\n    let RGBtriTwoColor = HSLtoRGB(triTwoColor);\n\n    return {RGBtriOneColor, RGBtriTwoColor}\n}\n\nfunction findAnalogous (rgbValue) {\n    let convertedColor = RGBtoHSL(rgbValue)\n    let splitColor = convertedColor.split(',');\n    let hue = Number(splitColor[0]);\n    let satch = splitColor[1];\n    let light = splitColor[2];\n\n    let triOne = 0;\n    let triTwo = 0;\n\n    if (hue < 150) {\n        triOne = hue + 150;\n        triTwo = hue + 210;\n    } else if (hue >= 150 && hue < 210) {\n        triOne = hue + 150;\n        triTwo = hue - 150;\n    } else {\n        triOne = hue - 210;\n        triTwo = hue - 150;\n    }\n    let analogousOneColor = (`${triOne},${satch},${light}`)\n    let analogousTwoColor = (`${triTwo},${satch},${light}`)\n    let RGBanalogousOne = HSLtoRGB(analogousOneColor)\n    let RGBanalogousTwo = HSLtoRGB(analogousTwoColor)\n\n    return {RGBanalogousOne, RGBanalogousTwo}\n}\n\n\n//Color value conversions:\n\nexport function RGBtoHSL (rgbValue) {\n    //slice -n- dice\n    // let sliced = rgbValue.slice(1, rgbValue.length -1);\n    let split = rgbValue.split(',');\n    let red = Number(split[0]);\n    let green = Number(split[1]);\n    let blue = Number(split[2]);\n\n    //Make red, green, blue fractions of 1\n    red /= 255;\n    green /= 255;\n    blue /= 255;\n\n    //Find greatest and smallest channel values\n    let cmin = Math.min(red, green, blue);\n    let cmax = Math.max(red, green, blue);\n    let delta = cmax - cmin;\n\n    //calculate hue\n    //no difference\n    let h = 0;\n    let s = 0;\n    let l = 0;\n    if (delta === 0) {\n        h = 0;\n    }\n    //Red is max\n    else if (cmax === red) {\n        h = ((green - blue) / delta) % 6;\n    }\n    //Green is max\n    else if (cmax === green) {\n        h = (blue - red) / delta + 2;\n    }\n    //Blue is max\n    else {\n        h = (red - green) / delta + 4;\n    }\n    h = Math.round(h * 60);\n    //Make negative hues positive behind 360 degrees\n    if (h < 0) {\n        h += 360\n    }\n    //Calculate lightness\n    l = (cmax + cmin) / 2;\n    //Calculate saturation\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    // Multiply by 100\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    return(`${h}, ${s}%, ${l}%`)\n}\n\nexport function HSLtoRGB (hslValue) {\n    //expected input format: '222, 22%, 22%'\n    let split = hslValue.split(',');\n\n    //slice off '%' and convert to numbers\n    let h = Number(split[0]);\n    let s = Number(split[1].substr(0,split[1].length -1));\n    let l = Number(split[2].substr(0,split[2].length -1));\n\n    s /= 100;\n    l /= 100;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s;\n    let x = c * (1 - Math.abs((h / 60) % 2 - 1));\n    let m = l - c/2;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n\n    if (0 <= h && h < 60) {\n        r = c; g = x; b = 0;\n    } else if (60 <= h && h < 120) {\n        r = x; g = c; b = 0;\n    } else if (120 <= h && h < 180) {\n        r = 0; g = c; b = x;\n    } else if (180 <= h && h < 240) {\n        r = 0; g = x; b = c;\n    } else if (240 <= h && h < 300) {\n        r = x; g = 0; b = c;\n    } else if (300 <= h && h < 360) {\n        r = c; g = 0; b = x;\n    }\n\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    //output format: '11, 22, 33's\n    return `${r}, ${g}, ${b}`;\n}\n\nexport function HEXtoRGB (hex) {\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n    if (hex.length === 4) {\n        r = parseInt(hex[1] + hex[1], 16);\n        g = parseInt(hex[2] + hex[2], 16);\n        b = parseInt(hex[3] + hex[3], 16);\n    } else if (hex.length === 7) {\n        r = parseInt(hex[1] + hex[2], 16)\n        g = parseInt(hex[3] + hex[4], 16);\n        b = parseInt(hex[5] + hex[6], 16);\n    }\n    return `${r}, ${g}, ${b}`\n}\n\nexport function RGBtoHEX (rgb) {\n    let tempArray = rgb.split(',')\n    let r = Number(tempArray[0])\n    let g = Number(tempArray[1])\n    let b = Number(tempArray[2])\n    r = r.toString(16)\n    g = g.toString(16)\n    b = b.toString(16)\n\n    if (r.length ===1)  {r = 0 + r}\n    if (g.length ===1)  {g = 0 + g}\n    if (b.length ===1)  {b = 0 + b}\n\n    return `${r}, ${g}, ${b}`\n}\n\n//Console greeting\nconst style = \"font-size: 14px;\" +\n  \"background: #67b26f;\" +\n  \"background: -webkit-linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" +\n  \"background: linear-gradient(to right,  rgb(87, 189, 227), rgba(42, 81, 109));\" +\n  \"color: white;\" +\n  \"text-align: center;\" +\n  \"padding: 10px 15px;\" +\n  \"width: 100%;\" +\n  \"border-radius: 20px;\";\n\nconst text = \"%cLet's talk!🙂 sirscavo@gmail.com\";\n\nconsole.log(text, style);\n"]},"metadata":{},"sourceType":"module"}